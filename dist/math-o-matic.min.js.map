{"version":3,"sources":["webpack://MathOMatic/webpack/universalModuleDefinition","webpack://MathOMatic/webpack/bootstrap","webpack://MathOMatic/./src/exprs/Expr.ts","webpack://MathOMatic/./src/exprs/types.ts","webpack://MathOMatic/./src/exprs/Fun.ts","webpack://MathOMatic/./src/exprs/Schema.ts","webpack://MathOMatic/./src/exprs/Variable.ts","webpack://MathOMatic/./src/exprs/$Variable.ts","webpack://MathOMatic/./src/exprs/Parameter.ts","webpack://MathOMatic/./src/exprs/Funcall.ts","webpack://MathOMatic/./src/exprs/ObjectFun.ts","webpack://MathOMatic/./src/ExecutionContext.ts","webpack://MathOMatic/./src/UniversalCounter.ts","webpack://MathOMatic/./src/exprs/Nameable.ts","webpack://MathOMatic/./src/exprs/Tee.ts","webpack://MathOMatic/./src/Program.ts","webpack://MathOMatic/./src/PegInterface.ts","webpack://MathOMatic/./src/exprs/Reduction.ts","webpack://MathOMatic/./src/exprs/With.ts","webpack://MathOMatic/./src/ProofExplorer.ts","webpack://MathOMatic/./src/Counter.ts","webpack://MathOMatic/./src/Scope.ts","webpack://MathOMatic/./src/StackTrace.ts","webpack://MathOMatic/./build_tmp/parser.js","webpack://MathOMatic/./build_tmp/evalParser.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","EqualsPriority","Expr","doc","tex","type","trace","_id","next","error","andFuncalls","expandMetaCache","expandMetaInternal","obj","context","equals","getEqualsPriority","equalsInternal","hypotheses","length","isProvedInternal","hypnumMap","$Map","ctr","has","_type","num","expr","getProofInternal","toIndentedString","message","Error","prec","Array","console","log","my","normalizePrecedence","precedence","your","replace","regex","RegExp","join","match","capitalize","charCodeAt","commandName","toLowerCase","toUpperCase","substring","escapeTeX","id","args","ret","shouldConsolidate","g1","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","Type","TeeType","left","right","SimpleObjectType","FunctionalObjectType","FunctionalMetaType","from","to","super","indent","ObjectType","resolve","toTeXString","isFunctional","map","f","e","Fun","annotations","sealed","rettype","params","variable","isProved","ONE","placeholders","types","push","selector","usedMacrosList","thisCall","fun","objCall","concat","Map","set","substitute","start","peek","$lines","def$s","forEach","$","lines","getProof","$num","Schema","schemaType","isProvedCache","some","expandMeta","_context","repeat","proved","toTeXStringWithId","Variable","canUse","ZERO","FOUR","tmp","toString","makeTeXName","$Variable","FIVE","Parameter","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","isCallable","used","expanded","calleeExpanded","expandOnce","THREE","T","q","thisIsExpandable","objIsExpandable","every","_","schema","schemalines","funcallToTeXString","ObjectFun","makeTeX","ExecutionContext","usingList","includes","Tee","lef","TWO","leftlines","rightlines","flat","parser","evalParser","Program","scopeMap","filename","loader","loadingModules","scope","loadModuleInternal","loadingModuleIndex","indexOf","cycle","slice","fileUri","code","feed","pop","parse","line","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","hasSchema","addSchema","tee","reduction","schemacall","metavar","ktx","m42kup","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","getVariable","objectexpr","isParam","tex_attributes","tvo","tv","hasOwnVariable","with","funcall","hypnum","Number","has$","get$","getSchema","$v","def$","hasOwn$","add$","scopeRight","oldContext","using","subject","g","antecedents","as","Reduction","derefs","guess","antecedentTypes","requiredAntecedents","antecedentEqualsResults","fill","antecedentsExpanded","preFormatConsequent","rightEqualsResult","consequent","antecedentLinesList","antecedentNums","ref","of","subjectlines","subjectnum","reduced","pattern","instance","recurse","ptr","test","With","var","ProofExplorer","REPEAT","SE","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","ncols","exprToHtml","expand","tree","innertree","Math","max","html","tree2html","newleft","render","v","Counter","Scope","parent","typedefMap","defMap","schemaMap","child","h","values","hasOwnType","filter","hasOwnSchema","StackTrace","stack","element","column","peg$SyntaxError","expected","found","captureStackTrace","peg$subclass","ctor","constructor","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","end","other","description","hex","ch","describeExpected","j","descriptions","sort","describeFound","SyntaxError","peg$parse","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c1","imports","peg$c4","peg$c5","peg$literalExpectation","peg$c7","peg$c8","peg$c9","peg$c10","peg$c13","peg$c14","peg$c20","peg$c22","peg$c23","peg$c24","peg$classExpectation","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","head","peg$c33","peg$c34","peg$c36","peg$c37","peg$c38","peg$c39","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c53","peg$c54","peg$c55","peg$c58","peg$c61","peg$c62","peg$c64","peg$c65","peg$c66","tail","peg$c67","peg$c68","peg$c71","peg$c72","peg$c73","peg$c74","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","as_","peg$c85","peg$c86","peg$c87","peg$c90","peg$c91","peg$c92","peg$c93","peg$c97","peg$c102","peg$c104","peg$c107","peg$c108","peg$c109","varname","varexpr","peg$c113","peg$c115","peg$c120","peg$c121","peg$c122","peg$c123","peg$c124","peg$c125","peg$c126","peg$c127","peg$c128","peg$c129","peg$c130","peg$c132","b","peg$c133","peg$c134","peg$c135","peg$c136","peg$c139","peg$c141","peg$c142","peg$c143","peg$c145","peg$c147","peg$c149","peg$c150","peg$c151","peg$currPos","peg$savedPos","peg$posDetailsCache","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$resultsCache","startRule","peg$computeLocation","ignoreCase","peg$computePosDetails","pos","details","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","peg$buildStructuredError","s0","s2","s3","s4","s5","cached","nextPos","result","peg$parse_","peg$parseimport","peg$parseline","peg$parsetypedef","peg$parsedefv","peg$parsedefun","peg$parsedefschema","s1","substr","peg$parse__","peg$parseident","peg$parsesem","s6","s7","s9","peg$parsedocumentation","peg$parseftype","s8","s11","peg$parsetex","peg$parsetype","peg$parseobjectexpr","peg$c17","peg$parsedefparam","peg$parsedefschemaparam","s10","s12","charAt","s13","s15","s16","s17","s19","peg$parsetex_attributes","peg$c42","s14","s18","defdollars","peg$parseannotation","peg$c56","peg$parsedefdollar","peg$parseexpr_internal_3","peg$parsereduction","s20","peg$parseexpr_internal_2","peg$parseschemacall","peg$parsevar","peg$c84","peg$parsefuncall","peg$parsefunexpr","peg$parseschemaexpr","foo","peg$parseexpr_internal_1","peg$c98","peg$parsetee","peg$c105","peg$parsewith","s21","s23","peg$parsedollar_ident","peg$parsestype","peg$parseat_var","peg$parseat_ident","peg$parsedollar_var","peg$parseplain_var","peg$parsekeyword","peg$parsecomment","peg$parsenewline","evaluable","peg$parseevaluable","peg$parseevaluable_internal"],"mappings":"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","file":"math-o-matic.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MathOMatic\"] = factory();\n\telse\n\t\troot[\"MathOMatic\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport UniversalCounter from \"../UniversalCounter\";\nimport Fun from \"./Fun\";\nimport { Type } from \"./types\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable (primitive) */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** Variable (macro) */\n\tFOUR,\n\t/** $Variable, Reduction */\n\tFIVE\n}\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Expr {\n\t\n\tpublic readonly _id: number;\n\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic readonly trace: StackTrace;\n\tpublic precedence: Precedence;\n\n\tpublic readonly type: Type;\n\tprivate expandMetaCache: Expr;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (doc: string, tex: string, type: Type, trace: StackTrace) {\n\t\tthis._id = UniversalCounter.next();\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t\tthis.trace = trace;\n\n\t\tif (!type) throw Expr.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr>): Expr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic expandMeta(andFuncalls: boolean): Expr {\n\t\tif (this.expandMetaCache) return this.expandMetaCache;\n\t\treturn this.expandMetaCache = this.expandMetaInternal(andFuncalls);\n\t}\n\n\tprotected abstract expandMetaInternal(andFuncalls: boolean): Expr;\n\n\t/**\n\t * \n\t * @return 같지 않으면 `false`. 같으면 같음을 보이는 데 사용한 매크로들의 목록.\n\t */\n\tpublic equals(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\t// console.log(`${this}\\n\\n${obj}`);\n\t\t// var ret = (() => {\n\t\t\n\t\tif (this === obj) return [];\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority(context) > this.getEqualsPriority(context))\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\n\t\t// })();\n\t\t// console.log(`${this}\\n\\n${obj}\\n\\nresult:`, ret);\n\t\t// return ret;\n\t}\n\n\t/**\n\t * \n\t * @return 같지 않으면 `false`. 같으면 같음을 보이는 데 사용한 매크로들의 목록.\n\t */\n\tprotected abstract equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false;\n\n\tprotected abstract getEqualsPriority(context: ExecutionContext): EqualsPriority;\n\n\tpublic isProved(hypotheses?: Expr[]): boolean {\n\t\thypotheses = hypotheses || [];\n\n\t\tfor (var i = 0; i < hypotheses.length; i++) {\n\t\t\tif (hypotheses[i] == this) return true;\n\t\t}\n\n\t\treturn this.isProvedInternal(hypotheses);\n\t}\n\n\tprotected abstract isProvedInternal(hypotheses: Expr[]): boolean;\n\n\tpublic getProof(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (hypnumMap.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: hypnumMap.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: $Map.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\treturn this.getProofInternal(hypnumMap, $Map, ctr, root);\n\t}\n\n\tprotected abstract getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot?: boolean): ProofType[];\n\t\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Expr.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec || false;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence): boolean {\n\t\tvar my = Expr.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Expr.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic static escapeTeX(s: string): string {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static makeTeXName(name: string): string {\n\t\tvar alphabet = [\n\t\t\t\"alpha\", \"beta\", \"gamma\", \"delta\",\n\t\t\t\"epsilon\", \"zeta\", \"eta\", \"theta\",\n\t\t\t\"iota\", \"kappa\", \"lambda\", \"mu\",\n\t\t\t\"nu\", \"xi\", \"omicron\", \"pi\",\n\t\t\t\"rho\", \"sigma\", \"tau\", \"upsilon\",\n\t\t\t\"phi\", \"chi\", \"psi\", \"omega\"\n\t\t];\n\n\t\tvar regex = new RegExp(`^(?:([a-z])|(${alphabet.join('|')}))([0-9]*)$`, 'i');\n\t\tvar match = name.match(regex);\n\n\t\tif (match) {\n\t\t\tvar letter = (() => {\n\t\t\t\tif (match[1]) return match[1];\n\t\t\t\t\n\t\t\t\tvar capitalize = match[2].charCodeAt(0) <= 'Z'.charCodeAt(0);\n\t\t\t\tvar commandName = match[2].toLowerCase();\n\n\t\t\t\tif (capitalize) {\n\t\t\t\t\tcommandName = commandName[0].toUpperCase() + commandName.substring(1);\n\t\t\t\t}\n\n\t\t\t\treturn '\\\\' + commandName;\n\t\t\t})();\n\n\t\t\tvar subscript = (() => {\n\t\t\t\tif (!match[3]) return '';\n\t\t\t\tif (match[3].length == 1) return '_' + match[3];\n\t\t\t\treturn `_{${match[3]}}`;\n\t\t\t})();\n\n\t\t\treturn letter + subscript;\n\t\t}\n\n\t\tif (name.length == 1) {\n\t\t\treturn Expr.escapeTeX(name);\n\t\t}\n\n\t\treturn `\\\\mathrm{${Expr.escapeTeX(name)}}`;\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport UniversalCounter from \"../UniversalCounter\";\nimport Nameable from \"./Nameable\";\n\nexport abstract class Type {\n\n\tpublic readonly _id: number;\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\n\tconstructor (doc: string, trace: StackTrace) {\n\t\tthis._id = UniversalCounter.next();\n\t\tthis.doc = doc;\n\t\tthis.trace = trace;\n\t}\n\n\tpublic abstract resolve(): Type;\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number): string;\n\n\tpublic abstract isFunctional(): boolean;\n\n\tpublic equals(t: Type): boolean {\n\t\tif (this === t) return true;\n\n\t\tif (!(t instanceof Type)) return false;\n\n\t\tif ((this instanceof TeeType) != (t instanceof TeeType)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this instanceof TeeType && t instanceof TeeType) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\treturn this.right.equals(t.right);\n\t\t}\n\n\t\tif (this instanceof SimpleObjectType && this.expr) {\n\t\t\treturn this.expr.equals(t);\n\t\t}\n\n\t\tif (t instanceof SimpleObjectType && t.expr) {\n\t\t\treturn this.equals(t.expr);\n\t\t}\n\n\t\tif (this instanceof SimpleObjectType || t instanceof SimpleObjectType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((this instanceof FunctionalObjectType || this instanceof FunctionalMetaType)\n\t\t\t\t&& (t instanceof FunctionalObjectType || t instanceof FunctionalMetaType)) {\n\t\t\tif (this.from.length != t.from.length) return false;\n\n\t\t\tfor (var i = 0; i < this.from.length; i++) {\n\t\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\t\t\t}\n\n\t\t\treturn this.to.equals(t.to);\n\t\t}\n\n\t\tthrow Error('Unknown type format');\n\t}\n}\n\ninterface TeeTypeArgumentType {\n\tleft: Type[];\n\tright: Type;\n}\n\nexport class TeeType extends Type {\n\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\n\tconstructor ({left, right}: TeeTypeArgumentType, trace: StackTrace) {\n\t\tsuper(null, trace);\n\n\t\tif (!left || !right) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn `[${this.left.join(', ')} |- ${this.right}]`;\n\t}\n\n\tpublic resolve(): Type {\n\t\treturn this;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\treturn false;\n\t}\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfrom: ObjectType[];\n\tto: Type;\n}\n\nexport class FunctionalMetaType extends Type {\n\t\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: Type;\n\n\tconstructor ({from, to}: FunctionalMetaTypeArgumentType, trace: StackTrace) {\n\t\tsuper(null, trace);\n\n\t\tif (!from || !to) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic resolve(): FunctionalMetaType {\n\t\treturn this;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport abstract class ObjectType extends Type {\n\n\tconstructor (doc: string, trace: StackTrace) {\n\t\tsuper(doc, trace);\n\t}\n\n\tpublic abstract resolve(): ObjectType;\n\n\tpublic abstract toTeXString(root?: boolean): string;\n}\n\ninterface SimpleObjectTypeArgumentType {\n\tdoc: string;\n\tname: string;\n\texpr: ObjectType;\n}\n\nexport class SimpleObjectType extends ObjectType implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: ObjectType;\n\n\tconstructor ({doc, name, expr}: SimpleObjectTypeArgumentType, trace: StackTrace) {\n\t\tsuper(doc, trace);\n\n\t\tif (!name) throw Error('duh');\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.expr ? this.expr.resolve() : this;\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn this.name;\n\t}\n\n\tpublic toTeXString(root?: boolean): string {\n\t\tvar name = `\\\\href{#type-${this.name}}{\\\\mathsf{${this.name}}}`;\n\n\t\tif (root && this.expr) {\n\t\t\treturn name + `\\\\coloneqq${this.expr.toTeXString()}`;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\tif (this.expr) return this.expr.isFunctional();\n\n\t\treturn false;\n\t}\n}\n\ninterface FunctionalObjectTypeArgumentType {\n\tfrom: ObjectType[];\n\tto: ObjectType;\n}\n\nexport class FunctionalObjectType extends ObjectType {\n\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor ({from, to}: FunctionalObjectTypeArgumentType, trace: StackTrace) {\n\t\tsuper(null, trace);\n\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\n\tpublic resolve(): FunctionalObjectType {\n\t\treturn new FunctionalObjectType({\n\t\t\tfrom: this.from.map(f => f.resolve()),\n\t\t\tto: this.to.resolve()\n\t\t}, this.trace);\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean): string {\n\t\treturn `\\\\left[${this.from.map(e => e.toTeXString()).join('\\\\times ')}`\n\t\t\t+ ` \\\\to ${this.to.toTeXString()}\\\\right]`;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\treturn true;\n\t}\n}","import Nameable from './Nameable';\nimport Expr, { EqualsPriority } from './Expr';\n\nexport default abstract class Fun extends Expr implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Parameter[];\n\tpublic readonly expr: Expr;\n\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Expr.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (rettype && expr) {\n\t\t\tif (!rettype.equals(expr.type)) {\n\t\t\t\tthrow Expr.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (!rettype && !expr) {\n\t\t\tthrow Expr.error('Cannot guess the return type of a primitive fun', trace);\n\t\t}\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Expr.error('Cannot seal a primitive fun', trace);\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\tdoc, tex,\n\t\t\tnew ((rettype || expr.type) instanceof ObjectType ? FunctionalObjectType : FunctionalMetaType)({\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: rettype || expr.type as any\n\t\t\t}, trace),\n\t\t\ttrace\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\t/**\n\t * 매개변수의 개수.\n\t */\n\tget length(): number {\n\t\treturn this.params.length;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.expr && this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as FunctionalObjectType | FunctionalMetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Parameter({\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i,\n\t\t\t\tselector: null\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar usedMacrosList = [];\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? (this.name && usedMacrosList.push(this), this.call(placeholders))\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? (obj.name && usedMacrosList.push(obj), obj.call(placeholders))\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\tvar ret = thisCall.equals(objCall, context);\n\t\treturn ret && ret.concat(usedMacrosList);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr[]): Expr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Arguments length mismatch');\n\t\t}\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tif (!this.params[i].type.equals(args[i].type)) {\n\t\t\t\tthrow Error('Illegal type');\n\t\t\t}\n\t\t}\n\n\t\tvar map: Map<Variable, Expr> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (this instanceof Schema && this.name && !root) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RS',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!this.expr) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\t$Map = new Map($Map);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar $lines: ProofType[] = [];\n\t\t\n\t\tif (this instanceof Schema) {\n\t\t\tthis.def$s.forEach($ => {\n\t\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t$Map.set($, $num);\n\t\t\t});\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'V',\n\t\t\t$lines,\n\t\t\tlines: this.expr.getProof(hypnumMap, $Map, ctr),\n\t\t\tparams: this.params,\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\nimport Counter from '../Counter';\nimport { ProofType } from '../ProofType';\nimport Schema from './Schema';\nimport Parameter from './Parameter';\nimport { ObjectType, FunctionalObjectType, FunctionalMetaType, Type } from './types';\n\ninterface FunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr;\n}","import Fun from \"./Fun\";\n\nexport type SchemaType = 'axiom' | 'theorem' | 'schema';\n\nexport default class Schema extends Fun {\n\n\tpublic readonly schemaType: SchemaType;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, schemaType, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Expr.error('wut', trace);\n\t\t}\n\n\t\tif (schemaType != 'schema' && !name) {\n\t\t\tthrow Expr.error(`wut`, trace);\n\t\t}\n\n\t\tsuper({doc, tex, annotations, sealed: false, rettype: null, name, params, expr}, trace);\n\t\t\n\t\tthis.schemaType = schemaType;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\n\t\tif (schemaType == 'theorem') {\n\t\t\tif (!this.isProved()) {\n\t\t\t\tthrow Expr.error(`Schema ${name} is marked as a theorem but it is not proved`, trace);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\tif (this.isProvedCache) return true;\n\n\t\tif (hypotheses.length == 0 && typeof this.isProvedCache == 'boolean') {\n\t\t\treturn this.isProvedCache;\n\t\t}\n\n\t\tvar ret = this.schemaType == 'axiom' || this.expr.isProved(hypotheses);\n\t\tif (!hypotheses.length) this.isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Expr.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = 'def-' + this.name,\n\t\t\tproved = this.isProved() ? 'p' : 'np';\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Expr.escapeTeX(this.name)}}}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Expr.escapeTeX(this.name)}}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Expr.PREC_COMMA) + (e.selector ? `: \\\\texttt{@${e.selector}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr, { Precedence } from \"./Expr\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport Parameter from \"./Parameter\";\nimport { ObjectType } from \"./types\";\n\ninterface SchemaArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tschemaType: SchemaType;\n\tname: string;\n\tparams: Parameter[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Expr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Fun from './Fun';\nimport Expr, { EqualsPriority, Precedence } from './Expr';\nimport Nameable from './Nameable';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tsealed: boolean;\n\ttype: ObjectType;\n\tname: string;\n\texpr: Expr;\n}\n\nexport default class Variable extends Expr implements Nameable {\n\n\tpublic readonly sealed: boolean;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr | null;\n\n\tconstructor ({doc, tex, sealed, type, name, expr}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(doc, tex, type, trace);\n\t\t\n\t\tif (typeof name != 'string')\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Expr.error('Cannot seal a primitive fun', trace);\n\t\t}\n\n\t\tif (expr && !type.equals(expr.type)) {\n\t\t\tthrow Expr.error(`Expression type ${expr.type} failed to match the type ${type} of variable ${name}`, trace);\n\t\t}\n\n\t\tthis.sealed = sealed;\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (map.has(this)) return map.get(this);\n\n\t\t// 매크로 변수는 스코프 밖에서 보이지 않으므로 치환될 것을 갖지 않는다는\n\t\t// 생각이 들어 있다.\n\t\treturn this;\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\treturn this.expr && (!this.sealed || context.canUse(this))\n\t\t\t? EqualsPriority.FOUR\n\t\t\t: EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!this.expr) return false;\n\n\t\tif (!this.sealed || context.canUse(this)) {\n\t\t\tvar tmp = this.expr.equals(obj, context);\n\t\t\tif (!tmp) return tmp;\n\t\t\treturn tmp.push(this), tmp;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\treturn [{\n\t\t\t_type: 'NP',\n\t\t\tctr: ctr.next(),\n\t\t\texpr: this\n\t\t}];\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this instanceof Parameter ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex || Expr.makeTeXName(this.name);\n\t\t\n\t\tvar expr = root && this.expr\n\t\t\t? `\\\\coloneqq ${this.expr.toTeXString(Expr.PREC_COLONEQQ)}`\n\t\t\t: '';\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}${expr}`;\n\t}\n}\n\nimport Parameter from './Parameter';\nimport { ObjectType } from './types';\n","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Fun from \"./Fun\";\nimport Expr, { EqualsPriority, Precedence } from \"./Expr\";\nimport Nameable from \"./Nameable\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Expr;\n}\n\nexport default class $Variable extends Expr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(null, null, expr.type, trace);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tif (!$Map.has(this)) {\n\t\t\tthrow Error(`${this.name} is not defined`);\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'R',\n\t\t\tctr: ctr.next(),\n\t\t\tnum: $Map.get(this),\n\t\t\texpr: this.expr\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Expr.escapeTeX(this.name)}}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport { Precedence } from \"./Expr\";\nimport { ObjectType } from \"./types\";\nimport Variable from \"./Variable\";\n\ninterface ParameterArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tselector: string;\n}\n\nexport default class Parameter extends Variable {\n\n\tpublic readonly selector: string;\n\n\tconstructor ({doc, tex, type, name, selector}: ParameterArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, sealed: false, type, name, expr: null}, trace);\n\n\t\tthis.selector = selector;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import Expr, { EqualsPriority, Precedence } from './Expr';\n\ninterface FuncallArgumentType {\n\tfun: Expr;\n\targs: Expr[];\n}\n\nexport default class Funcall extends Expr {\n\t\n\tpublic readonly fun: Expr;\n\tpublic readonly args: Expr[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (!fun.type.isFunctional()) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Expr.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Expr).some(e => !e))\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as FunctionalObjectType | FunctionalMetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Expr.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Expr.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(null, null, resolvedType.to, trace);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.fun.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Expr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Variable && callee.expr) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): {expanded: Expr, used: (Fun | Variable)[]} {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar used: (Fun | Variable)[] = [];\n\n\t\tvar callee: Expr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Variable && callee.expr) {\n\t\t\tused.push(callee);\n\n\t\t\treturn {\n\t\t\t\texpanded: new Funcall({\n\t\t\t\t\tfun: callee.expr,\n\t\t\t\t\targs: this.args\n\t\t\t\t}, this.trace),\n\t\t\t\tused\n\t\t\t};\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\tvar calleeExpanded = callee.expandOnce(context);\n\t\t\tused.push(...calleeExpanded.used);\n\t\t\treturn {\n\t\t\t\texpanded: new Funcall({\n\t\t\t\t\tfun: calleeExpanded.expanded,\n\t\t\t\t\targs: this.args\n\t\t\t\t}, this.trace),\n\t\t\t\tused\n\t\t\t};\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tif (callee.name) used.push(callee);\n\n\t\treturn {\n\t\t\texpanded: callee.call(this.args),\n\t\t\tused\n\t\t};\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\t\t\t\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar usedMacrosList: (Fun | Variable)[] = [],\n\t\t\tT = (q: (Fun | Variable)[] | false) => { if (q) usedMacrosList.push(...q); return q; };\n\n\t\tif (this.fun == obj.fun || T(this.fun.equals(obj.fun, context))) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!T(this.args[i].equals(obj.args[i], context))) return false;\n\t\t\t}\n\n\t\t\treturn usedMacrosList;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\tvar {expanded, used} = obj.expandOnce(context);\n\t\t\tvar ret = this.equals(expanded, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!T(this.args[i].equals(obj.args[i], context))) return false;\n\t\t\t\t}\n\n\t\t\t\treturn usedMacrosList;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn T(this.args[i].equals(obj.args[i], context));\n\t\t\t})) {\n\t\t\t\treturn usedMacrosList;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar {expanded, used} = obj.expandOnce(context);\n\t\tvar ret = this.equals(expanded, context);\n\t\treturn ret && ret.concat(used);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\n\t\tif (hypnumMap.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'SE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: hypnumMap.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'SE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: $Map.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (this.fun instanceof Schema && this.fun.name) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!(this.fun instanceof Schema)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tvar schemalines = this.fun.getProof(hypnumMap, $Map, ctr);\n\n\t\treturn [\n\t\t\t...schemalines,\n\t\t\t{\n\t\t\t\t_type: 'SE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#def-${this.fun.name}}{\\\\htmlData{proved=${this.fun.isProved() ? 'p' : 'np'}}{\\\\textsf{${Expr.escapeTeX(this.fun.name)}}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Expr.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Expr.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: Expr.makeTeXName(this.fun.name)\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}\n\nimport Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Fun from './Fun';\nimport { isNameable } from './Nameable';\nimport ObjectFun from './ObjectFun';\nimport Schema from './Schema';\nimport Variable from './Variable';\nimport { FunctionalMetaType, FunctionalObjectType } from './types';\n","import Fun from \"./Fun\";\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, precedence, tex, annotations, sealed, rettype, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, rettype, name, params, expr}, trace);\n\t\tthis.precedence = precedence;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\tprecedence: false,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\tprecedence: false,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.canUse(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Expr.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}{${Expr.makeTeXName(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Expr.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Expr.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Expr.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${Expr.makeTeXName(this.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}\n\nimport ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr, { Precedence } from \"./Expr\";\nimport Variable from \"./Variable\";\nimport Parameter from \"./Parameter\";\nimport { Type, ObjectType } from \"./types\";\n\ninterface ObjectFunArgumentType {\n\tdoc: string;\n\tprecedence: number | false;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr;\n}","import ObjectFun from \"./exprs/ObjectFun\";\nimport Variable from \"./exprs/Variable\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: (Variable | ObjectFun)[];\n\n\tconstructor (usingList?: (Variable | ObjectFun)[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic canUse(fun: Variable | ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","var n: number = 0;\n\nexport default {\n\tpeek(): number {\n\t\treturn n;\n\t},\n\tnext(): number {\n\t\treturn ++n;\n\t}\n};","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Fun from './Fun';\nimport Expr, { EqualsPriority, Precedence } from './Expr';\nimport { ObjectType, Type, TeeType } from './types';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Expr[];\n\tdef$s: $Variable[];\n\tright: Expr;\n}\n\nexport default class Tee extends Expr {\n\n\tpublic readonly left: Expr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Expr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof Type;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof Type)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tsuper(null, null, new TeeType({\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}, trace), trace);\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Expr.PREC_COMMA;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.right.isProved(hypotheses.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft,\n\t\t\tdef$s: null,\n\t\t\tright\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, def$s: null, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\thypnumMap = new Map(hypnumMap);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar leftlines: ProofType[] = this.left.map(l => {\n\t\t\thypnumMap.set(l, ctr.next());\n\t\t\t\n\t\t\treturn {\n\t\t\t\t_type: 'H',\n\t\t\t\tctr: ctr.peek(),\n\t\t\t\texpr: l\n\t\t\t};\n\t\t});\n\n\t\t$Map = new Map($Map);\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [{\n\t\t\t_type: 'T',\n\t\t\tleftlines: leftlines as any,\n\t\t\trightlines: $lines.concat(this.right.getProof(hypnumMap, $Map, ctr)),\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Expr.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","import { SimpleObjectType } from './exprs/types';\nimport PegInterface from './PegInterface';\nimport { EvaluableObject, ImportOrLineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\nlet parser: ParserType, evalParser: EvalParserType;\n\nif (process.env.__webpack__) {\n\tparser = require('../build_tmp/parser');\n\tevalParser = require('../build_tmp/evalParser');\n} else {\n\tlet fs = require('fs');\n\tlet path = require('path');\n\tlet pegjs = require('pegjs');\n\n\tlet grammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n\tparser = pegjs.generate(grammar, {cache: true});\n\tevalParser = pegjs.generate(grammar, {cache: true, allowedStartRules: ['evaluable']});\n}\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport type ParserType = {\n\tparse: (code: string) => ImportOrLineObject[];\n};\n\nexport type EvalParserType = {\n\tparse: (code: string) => EvaluableObject;\n}\n\nexport default class Program {\n\t\n\tpublic scope: Scope;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\t\n\tpublic static parser: ParserType = parser;\n\tpublic static evalParser: EvalParserType = evalParser;\n\n\t/**\n\t * A temporary list used by {@link loadModuleInternal} method.\n\t * \n\t * This is the list of filenames of the files with a temporary mark during a\n\t * depth-first topological sort. Note that the file is considered to be\n\t * marked with a permanent mark if {@code this.scopeMap} has the filename.\n\t * \n\t * See https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search.\n\t */\n\tprivate loadingModules: string[];\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tthis.loadingModules = [];\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\t// the file has a permanent mark\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar loadingModuleIndex = this.loadingModules.indexOf(filename);\n\n\t\t// the file has a temporary mark\n\t\tif (loadingModuleIndex >= 0) {\n\t\t\tif (loadingModuleIndex == this.loadingModules.length - 1) {\n\t\t\t\tthrow Error(`Cannot self import (${filename})`);\n\t\t\t}\n\n\t\t\tvar cycle = this.loadingModules.slice(loadingModuleIndex).concat(filename);\n\n\t\t\tthrow Error(`Circular import detected (${cycle.join(' -> ')}). Sadly, circular import is currently not supported.`);\n\t\t}\n\n\t\t// mark the file with a temporary mark\n\t\tthis.loadingModules.push(filename);\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\n\t\tawait this.feed(code, scope, loader);\n\n\t\t// remove temporary mark\n\t\tif (this.loadingModules.pop() != filename) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\t// mark the file with a permanent mark\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(code: string, scope: Scope=this.scope, loader: LoaderType) {\n\t\tvar lines = parser.parse(code);\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope) as SimpleObjectType;\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(code: string) {\n\t\tvar line = evalParser.parse(code);\n\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx, m42kup) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx, m42kup);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './exprs/$Variable';\nimport Fun from './exprs/Fun';\nimport Funcall from './exprs/Funcall';\nimport Expr from './exprs/Expr';\nimport ObjectFun from './exprs/ObjectFun';\nimport Parameter from './exprs/Parameter';\nimport Reduction from './exprs/Reduction';\nimport Schema, { SchemaType } from './exprs/Schema';\nimport Tee from './exprs/Tee';\nimport { ObjectType, SimpleObjectType } from './exprs/types';\nimport Variable from './exprs/Variable';\nimport With from './exprs/With';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, ObjectExprObject, FuncallObject, FunexprObject, ExprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject, WithObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar expr: ObjectType = obj.expr ? scope.getType(typeObjToNestedArr(obj.expr)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\n\t\tif (expr) {\n\t\t\treturn new SimpleObjectType({\n\t\t\t\tdoc,\n\t\t\t\tname,\n\t\t\t\texpr\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new SimpleObjectType({\n\t\t\tdoc,\n\t\t\tname,\n\t\t\texpr: null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\tvar expr = obj.expr ? PI.objectexpr(obj.expr, scope) : null;\n\n\t\tif (obj.isParam) {\n\t\t\treturn new Parameter({\n\t\t\t\tdoc: obj.doc,\n\t\t\t\ttex: obj.tex,\n\t\t\t\ttype,\n\t\t\t\tname: obj.name,\n\t\t\t\tselector: obj.selector || null\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new Variable({\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex,\n\t\t\tsealed: !!obj.sealed,\n\t\t\ttype,\n\t\t\tname: obj.name,\n\t\t\texpr: expr || null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('fun', obj._type == 'defun' ? obj.name : '<anonymous>', obj.location);\n\n\t\tvar doc = null,\n\t\t\tprecedence : false | number = false,\n\t\t\ttex = null,\n\t\t\tsealed = false,\n\t\t\trettype: ObjectType = null,\n\t\t\tname = null,\n\t\t\texpr = null;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tdoc = obj.doc;\n\t\t\tprecedence = obj.tex_attributes.precedence;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t\t\n\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype))) {\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\t\t\t}\n\n\t\t\trettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\t\t\tname = obj.name;\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tif (obj.expr) {\n\t\t\texpr = PI.objectexpr(obj.expr, scope);\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, rettype, name, params, expr, doc, precedence, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.objectexpr(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.objectexpr(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static expr(obj: ExprObject, parentScope: Scope, context: ExecutionContext): Expr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var', 'with'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tcase 'with':\n\t\t\t\treturn PI.with(obj, scope, context);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static objectexpr(obj: ObjectExprObject, parentScope: Scope): Expr {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Expr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static with(obj: WithObject, parentScope: Scope, context: ExecutionContext): With {\n\t\tif (obj._type != 'with') {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('with', null, obj.location);\n\n\t\tvar tv = PI.variable(obj.with, scope);\n\n\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\n\t\tif (!(tv instanceof Variable)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tscope.addVariable(tv);\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.expr(obj.expr, scope, context);\n\n\t\treturn new With({\n\t\t\tvariable: tv,\n\t\t\tdef$s,\n\t\t\texpr\n\t\t}, scope.trace);\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.expr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.expr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.expr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar schemaType: SchemaType = 'schema',\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\tschemaType = obj.schemaType;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: (Variable | ObjectFun)[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!fun.expr) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.expr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, tex: null, annotations, schemaType, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.objectexpr(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.expr(obj.subject, scope, context);\n\n\t\tvar args = !obj.args\n\t\t\t? null\n\t\t\t: obj.args.map(g => {\n\t\t\t\treturn g && PI.objectexpr(g, scope);\n\t\t\t});\n\n\t\tvar antecedents = obj.antecedents.map(obj => {\n\t\t\treturn PI.expr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.expr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\targs,\n\t\t\tantecedents,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Fun from \"./Fun\";\nimport Funcall from \"./Funcall\";\nimport Expr, { EqualsPriority, Precedence } from \"./Expr\";\nimport { isNameable } from \"./Nameable\";\nimport Parameter from \"./Parameter\";\nimport Schema from \"./Schema\";\nimport Tee from \"./Tee\";\nimport { FunctionalObjectType, FunctionalMetaType, TeeType } from \"./types\";\nimport Variable from \"./Variable\";\n\ninterface ReductionArgumentType {\n\tantecedents: Expr[];\n\tsubject: Expr;\n\targs: (Expr | null)[];\n\tas: Expr;\n}\n\nexport default class Reduction extends Expr {\n\t\n\tpublic readonly antecedents: Expr[];\n\tpublic readonly requiredAntecedents: Expr[];\n\tpublic readonly subject: Expr;\n\tpublic readonly args: (Expr | null)[];\n\tpublic readonly preFormatConsequent: Expr;\n\tpublic readonly consequent: Expr;\n\tprivate readonly antecedentEqualsResults: (Fun | Variable)[][];\n\tprivate readonly rightEqualsResult: (Fun | Variable)[];\n\n\tconstructor ({antecedents, subject, args, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (args) {\n\t\t\tlet resolvedType = subject.type.resolve() as FunctionalObjectType | FunctionalMetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = args.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Expr.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Expr.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(args && args[i]) && !p.selector) {\n\t\t\t\t\tthrow Expr.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (args && args[i]) return args[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false);\n\n\t\t\t\tif (!(tee instanceof Tee)) throw Error('wut');\n\t\n\t\t\t\treturn Reduction.guess(\n\t\t\t\t\tp.selector,\n\t\t\t\t\ttee.left, antecedents,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (args) {\n\t\t\tthrow Expr.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof TeeType))\n\t\t\tthrow Expr.error('Subject is not reducible', trace);\n\t\n\t\tif (!(antecedents instanceof Array)\n\t\t\t\t|| antecedents.map(e => e instanceof Expr).some(e => !e))\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tantecedentTypes = antecedents.map(e => e.type);\n\n\t\tif (paramTypes.length != antecedentTypes.length)\n\t\t\tthrow Expr.error(`Invalid number of arguments (expected ${paramTypes.length}): ${antecedentTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(antecedentTypes[i]))\n\t\t\t\tthrow Expr.error(`Illegal argument type (expected ${paramTypes[i]}): ${antecedentTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(null, null, subject.type.right, trace);\n\n\t\tthis.subject = subject;\n\t\tthis.antecedents = antecedents;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.requiredAntecedents = tee.left;\n\t\tthis.antecedentEqualsResults = Array(tee.left.length).fill(0).map(() => []);\n\n\t\tvar antecedentsExpanded = antecedents.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tvar tmp = tee.left[i].equals(antecedentsExpanded[i], context);\n\t\t\tif (!tmp) {\n\t\t\t\tthrow Expr.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${antecedents[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.antecedentEqualsResults[i] = tmp;\n\t\t}\n\n\t\tthis.preFormatConsequent = tee.right;\n\n\t\tif (as) {\n\t\t\tvar tmp = tee.right.equals(as, context);\n\t\t\tif (!tmp) {\n\t\t\t\tthrow Expr.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.rightEqualsResult = tmp;\n\t\t\tthis.consequent = as;\n\t\t} else {\n\t\t\tthis.consequent = tee.right;\n\t\t}\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.subject.isProved(hypotheses)\n\t\t\t&& this.antecedents.every(l => l.isProved(hypotheses));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\treturn this.consequent.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\treturn this.consequent.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\treturn this.consequent.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tvar antecedentLinesList: ProofType[][] = [];\n\t\tvar antecedentNums: (number | [number, number])[] = this.antecedents.map((l, i) => {\n\t\t\tif (!this.antecedentEqualsResults[i].length) {\n\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\t\tif ($Map.has(l)) return $Map.get(l);\n\t\t\t}\n\n\t\t\tvar ref = hypnumMap.has(l)\n\t\t\t\t? hypnumMap.get(l)\n\t\t\t\t: $Map.has(l)\n\t\t\t\t\t? $Map.get(l)\n\t\t\t\t\t: null;\n\t\t\tvar lines = ref ? [] : l.getProof(hypnumMap, $Map, ctr);\n\n\t\t\tif (this.antecedentEqualsResults[i].length) {\n\t\t\t\tlines.push({\n\t\t\t\t\t_type: 'bydef',\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\tref: ref || lines[lines.length - 1].ctr,\n\t\t\t\t\texpr: this.requiredAntecedents[i],\n\t\t\t\t\tof: this.antecedentEqualsResults[i]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tantecedentLinesList.push(lines);\n\t\t\treturn this.antecedentEqualsResults[i].length\n\t\t\t\t? ctr.peek()\n\t\t\t\t: lines[lines.length - 1].ctr;\n\t\t});\n\t\t\n\t\tvar args: Expr[] = null;\n\t\tvar subjectlines: ProofType[] = [];\n\t\tvar subjectnum = hypnumMap.get(this.subject)\n\t\t\t|| $Map.get(this.subject)\n\t\t\t|| (\n\t\t\t\tthis.subject instanceof Funcall && $Map.has(this.subject.fun)\n\t\t\t\t\t? (args = this.subject.args, $Map.get(this.subject.fun))\n\t\t\t\t\t: false\n\t\t\t)\n\t\t\t|| (\n\t\t\t\t(s => {\n\t\t\t\t\treturn s instanceof Fun && s.name\n\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name;\n\t\t\t\t})(this.subject)\n\t\t\t\t\t? this.subject\n\t\t\t\t\t: (subjectlines = this.subject.getProof(hypnumMap, $Map, ctr))[subjectlines.length-1].ctr\n\t\t\t);\n\n\t\tvar ret: ProofType[] = [\n\t\t\t...antecedentLinesList.flat(),\n\t\t\t...subjectlines\n\t\t];\n\n\t\tif (this.rightEqualsResult && this.rightEqualsResult.length) {\n\t\t\tret.push(\n\t\t\t\t{\n\t\t\t\t\t_type: 'TE',\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\tsubject: subjectnum,\n\t\t\t\t\targs,\n\t\t\t\t\tantecedents: antecedentNums,\n\t\t\t\t\treduced: this.preFormatConsequent\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t_type: 'bydef',\n\t\t\t\t\tref: ctr.peek(),\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\texpr: this.consequent,\n\t\t\t\t\tof: this.rightEqualsResult\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tret.push({\n\t\t\t\t_type: 'TE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tsubject: subjectnum,\n\t\t\t\targs,\n\t\t\t\tantecedents: antecedentNums,\n\t\t\t\treduced: this.consequent\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n\n\tpublic static guess(\n\t\t\tselector: string,\n\t\t\trequiredAntecedents: Expr[], antecedents: Expr[],\n\t\t\tright: Expr, as: Expr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace): Expr {\n\t\t\n\t\tif (selector.length == 0) throw Expr.error('wut', trace);\n\n\t\tvar pattern: Expr, instance: Expr;\n\n\t\tif (selector[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at 0): expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tpattern = right;\n\t\t\tinstance = as;\n\t\t} else {\n\t\t\tvar n = Number(selector[0]);\n\n\t\t\tif (!(1 <= n && n <= antecedents.length))\n\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at 0): antecedent index out of range`, trace);\n\n\t\t\tpattern = requiredAntecedents[n - 1];\n\t\t\tinstance = antecedents[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tptr: number,\n\t\t\t\tpattern: Expr, instance: Expr,\n\t\t\t\tparams: Parameter[]): Expr {\n\t\t\t\n\t\t\tinstance = instance.expandMeta(true);\n\t\t\t\n\t\t\tif (selector.length <= ptr) return instance;\n\n\t\t\tif (/^[0-9]$/.test(selector[ptr])) {\n\t\t\t\tvar n = Number(selector[ptr]);\n\n\t\t\t\tif (pattern instanceof Tee && instance instanceof Tee) {\n\t\t\t\t\tif (pattern.left.length != instance.left.length) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= instance.left.length)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(ptr + 1, pattern.left[n - 1], instance.left[n - 1], params);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\twhile (instance instanceof Variable && instance.expr) {\n\t\t\t\t\t\tinstance = instance.expr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(pattern instanceof Funcall && instance instanceof Funcall)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pattern.fun.equals(instance.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!instance.isExpandable(context)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): ${instance}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tinstance = instance.expandOnce(context).expanded;\n\t\t\t\t}\n\n\t\t\t\tif (!(1 <= n && n <= instance.args.length))\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\n\t\t\t\treturn recurse(ptr + 1, pattern.args[n - 1], instance.args[n - 1], params);\n\t\t\t} else if (selector[ptr] == 'r') {\n\t\t\t\tif (!(pattern instanceof Tee && instance instanceof Tee)) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t}\n\n\t\t\t\treturn recurse(ptr + 1, pattern.right, instance.right, params);\n\t\t\t} else if (selector[ptr] == 'c') {\n\t\t\t\tif (!(\n\t\t\t\t\tpattern instanceof Fun && !pattern.name\n\t\t\t\t\t&& instance instanceof Fun && !instance.name\n\t\t\t\t)) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t}\n\n\t\t\t\tif (pattern.length != instance.length) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): parameter length mismatch`, trace);\n\t\t\t\t}\n\n\t\t\t\tvar placeholders = [];\n\n\t\t\t\tfor (var i = 0; i < pattern.length; i++) {\n\t\t\t\t\tif (!pattern.params[i].type.equals(instance.params[i].type)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): parameter type mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tplaceholders.push(new Parameter({\n\t\t\t\t\t\ttex: instance.params[i].tex,\n\t\t\t\t\t\ttype: pattern.params[i].type,\n\t\t\t\t\t\tname: instance.params[i].name,\n\t\t\t\t\t\tselector: null\n\t\t\t\t\t}, trace));\n\t\t\t\t}\n\n\t\t\t\treturn recurse(ptr + 1, pattern.call(placeholders), instance.call(placeholders), placeholders.concat(params));\n\t\t\t} else if (selector[ptr] == 'f') {\n\t\t\t\tif (ptr != selector.length - 1) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): invalid selector`, trace);\n\t\t\t\t}\n\n\t\t\t\t// (($0, $1) => f($0, $1)) -> f\n\t\t\t\tif (instance instanceof Funcall\n\t\t\t\t\t\t&& instance.args.length == params.length\n\t\t\t\t\t\t&& instance.args.every((arg, i) => arg == params[i])) {\n\t\t\t\t\treturn instance.fun;\n\t\t\t\t}\n\n\t\t\t\treturn new Schema({\n\t\t\t\t\tdoc: null,\n\t\t\t\t\ttex: null,\n\t\t\t\t\tannotations: [],\n\t\t\t\t\tschemaType: 'schema',\n\t\t\t\t\tname: null,\n\t\t\t\t\tparams,\n\t\t\t\t\tcontext: new ExecutionContext(),\n\t\t\t\t\tdef$s: [],\n\t\t\t\t\texpr: instance\n\t\t\t\t}, trace);\n\t\t\t}\n\n\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): invalid selector`, trace);\n\t\t})(1, pattern, instance, []);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar antecedents = this.antecedents.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (antecedents.join('').length <= 50) {\n\t\t\tantecedents = this.antecedents.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tantecedents.join(', '),\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\n\t\treturn [\n\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t'\\t' + antecedents.join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t']'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.antecedents.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')}]`;\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport $Variable from \"./$Variable\";\nimport Fun from \"./Fun\";\nimport Expr, { EqualsPriority, Precedence } from \"./Expr\";\nimport Variable from \"./Variable\";\n\ninterface WithArgumentType {\n\tvariable: Variable;\n\tdef$s: $Variable[];\n\texpr: Expr;\n}\n\nexport default class With extends Expr {\n\n\tpublic readonly variable: Variable;\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly expr: Expr;\n\n\tconstructor({variable, def$s, expr}: WithArgumentType, trace: StackTrace) {\n\t\tsuper(null, null, expr.type, trace);\n\n\t\tthis.variable = variable;\n\t\tthis.def$s = def$s;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (map.has(this.variable))\n\t\t\tthrow Error('Parameter collision');\n\t\t\n\t\tmap = new Map(map);\n\n\t\treturn this.expandMeta(false).substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tvar map = new Map<Variable, Expr>();\n\t\tmap.set(this.variable, this.variable.expr);\n\n\t\treturn this.expr.substitute(map).expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getProofInternal(hypnumMap: Map<Expr, number>, $Map: Map<Expr, number | [number, number]>, ctr: Counter, root?: boolean): ProofType[] {\n\n\t\t$Map = new Map($Map);\n\n\t\tvar def: ProofType = {\n\t\t\t_type: 'def',\n\t\t\tctr: ctr.next(),\n\t\t\tvar: this.variable\n\t\t};\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [\n\t\t\tdef,\n\t\t\t...$lines,\n\t\t\t...this.expr.getProof(hypnumMap, $Map, ctr)\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}","import Counter from \"./Counter\";\nimport Expr from \"./exprs/Expr\";\nimport Schema from \"./exprs/Schema\";\nimport Variable from \"./exprs/Variable\";\nimport { ProofType } from \"./ProofType\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx, m42kup): string {\n\t\tvar REPEAT = '<b>R</b>',\n\t\t\tTE = '<b>⊢E</b>',\n\t\t\tSE = '<b>↦E</b>';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar expr = scope.getSchema(name);\n\n\t\tif (!(expr instanceof Schema)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map((e, i) => `<td${i == 0 ? ' style=\"text-align:center\"' : ''}>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr: number | [number, number] | Expr, expand?: boolean): string {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true, true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true, true));\n\t\t}\n\n\t\tvar tree = expr.getProof(new Map(), new Map(), new Counter(), true);\n\n\t\tvar innertree: ProofType[] = (tree[0] as any).$lines.concat((tree[0] as any).lines);\n\n\t\tvar ncols = (function recurse(tree: ProofType[]): number {\n\t\t\treturn Math.max(...tree.map(t => {\n\t\t\t\tswitch (t._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.lines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.leftlines),\n\t\t\t\t\t\t\trecurse(t.rightlines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}));\n\t\t})(innertree);\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expression</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines: ProofType[], left: Variable[][]) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\t\tvar params = line.params.slice();\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[REPEAT, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[REPEAT, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[SE, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'SE':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[SE, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'TE':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[TE, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.antecedents.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'def':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\tline.var.doc ? `<p>${exprToHtml(line.var)}</p>${m42kup.render(line.var.doc)}` : exprToHtml(line.var),\n\t\t\t\t\t\t\t'definition'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'bydef':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr),\n\t\t\t\t\t\t\t`by definition of ${line.of.map(v => {\n\t\t\t\t\t\t\t\treturn exprToHtml(v);\n\t\t\t\t\t\t\t}).join(', ')} [${exprToHtml(line.ref)}]`\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow Error(`Unknown type ${(line as any)._type}`);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(innertree, []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","export default class Counter {\n\n\tprivate n: number;\n\n\tconstructor (start: number=0) {\n\t\tthis.n = start;\n\t}\n\n\tpublic peek(): number {\n\t\treturn this.n;\n\t}\n\n\tpublic next(): number {\n\t\treturn ++this.n;\n\t}\n}","import $Variable from './exprs/$Variable';\nimport Fun from './exprs/Fun';\nimport Expr from './exprs/Expr';\nimport ObjectFun from './exprs/ObjectFun';\nimport Schema from './exprs/Schema';\nimport { FunctionalObjectType, ObjectType, SimpleObjectType } from './exprs/types';\nimport Variable from './exprs/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Expr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\n\t/** 파일 경로. 예를 들어 `/propositional.math`이다. 파일과 일대일대응이어야 한다. */\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: SimpleObjectType): SimpleObjectType {\n\t\tif (!(type instanceof SimpleObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new FunctionalObjectType({\n\t\t\tfrom,\n\t\t\tto\n\t\t}, this.trace);\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(i) {return i},\n      peg$c1 = function(imports, a) {return a},\n      peg$c2 = function(imports, lines) {return imports.concat(lines)},\n      peg$c3 = function(e) {return e},\n      peg$c4 = \"import\",\n      peg$c5 = peg$literalExpectation(\"import\", false),\n      peg$c6 = function(filename) {\n      \t\treturn {\n      \t\t\t_type: 'import',\n      \t\t\tfilename,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c7 = \"type\",\n      peg$c8 = peg$literalExpectation(\"type\", false),\n      peg$c9 = \"=\",\n      peg$c10 = peg$literalExpectation(\"=\", false),\n      peg$c11 = function(doc, name, o) {return o},\n      peg$c12 = function(doc, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'typedef',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\texpr,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c13 = \"sealed\",\n      peg$c14 = peg$literalExpectation(\"sealed\", false),\n      peg$c15 = function(doc, tex, sealed, type, name, expr) {return expr},\n      peg$c16 = function(doc, tex, sealed, type, name) {return null},\n      peg$c17 = function(doc, tex, sealed, type, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: false,\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c18 = function(tex, type, name) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c19 = \":\",\n      peg$c20 = peg$literalExpectation(\":\", false),\n      peg$c21 = \"@\",\n      peg$c22 = peg$literalExpectation(\"@\", false),\n      peg$c23 = /^[a-z0-9_]/,\n      peg$c24 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c25 = function(tex, type, name, g) {return g},\n      peg$c26 = function(tex, type, name, selector) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tselector,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c27 = \"(\",\n      peg$c28 = peg$literalExpectation(\"(\", false),\n      peg$c29 = \",\",\n      peg$c30 = peg$literalExpectation(\",\", false),\n      peg$c31 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tv) {return tv},\n      peg$c32 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tail) {return [head].concat(tail)},\n      peg$c33 = \")\",\n      peg$c34 = peg$literalExpectation(\")\", false),\n      peg$c35 = function(doc, tex_attributes, tex, sealed, rettype, name, p) {return p || []},\n      peg$c36 = \"{\",\n      peg$c37 = peg$literalExpectation(\"{\", false),\n      peg$c38 = \"}\",\n      peg$c39 = peg$literalExpectation(\"}\", false),\n      peg$c40 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {return expr},\n      peg$c41 = function(doc, tex_attributes, tex, sealed, rettype, name, params) {return null},\n      peg$c42 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defun',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex_attributes: tex_attributes ? tex_attributes[0] : {\n      \t\t\t\tprecedence: false\n      \t\t\t},\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\trettype,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c43 = function(doc, a) {return a},\n      peg$c44 = \"axiom\",\n      peg$c45 = peg$literalExpectation(\"axiom\", false),\n      peg$c46 = \"theorem\",\n      peg$c47 = peg$literalExpectation(\"theorem\", false),\n      peg$c48 = \"schema\",\n      peg$c49 = peg$literalExpectation(\"schema\", false),\n      peg$c50 = function(doc, annotations, schemaType, name, head, tv) {return tv},\n      peg$c51 = function(doc, annotations, schemaType, name, head, tail) {return [head].concat(tail)},\n      peg$c52 = function(doc, annotations, schemaType, name, p) {return p || []},\n      peg$c53 = \"using\",\n      peg$c54 = peg$literalExpectation(\"using\", false),\n      peg$c55 = function(doc, annotations, schemaType, name, params, head, n) {return n},\n      peg$c56 = function(doc, annotations, schemaType, name, params, head, tail) {return [head].concat(tail)},\n      peg$c57 = function(doc, annotations, schemaType, name, params, x) {return x},\n      peg$c58 = function(doc, annotations, schemaType, name, params, using, d) {return d},\n      peg$c59 = function(doc, annotations, schemaType, name, params, using, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defschema',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\tannotations,\n      \t\t\tschemaType,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\tusing: using || [],\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c60 = function(a) {return [a]},\n      peg$c61 = \"[\",\n      peg$c62 = peg$literalExpectation(\"[\", false),\n      peg$c63 = \";\",\n      peg$c64 = peg$literalExpectation(\";\", false),\n      peg$c65 = function(head, e) {return e},\n      peg$c66 = function(head, tail) {return [head].concat(tail)},\n      peg$c67 = \"]\",\n      peg$c68 = peg$literalExpectation(\"]\", false),\n      peg$c69 = function(b) {return b || []},\n      peg$c70 = \">\",\n      peg$c71 = peg$literalExpectation(\">\", false),\n      peg$c72 = function(antecedents, e) {return e},\n      peg$c73 = \"?\",\n      peg$c74 = peg$literalExpectation(\"?\", false),\n      peg$c75 = function(antecedents, subject) {return null},\n      peg$c76 = function(antecedents, subject, head) {return null},\n      peg$c77 = function(antecedents, subject, head, e) {return e},\n      peg$c78 = function(antecedents, subject, head, tail) {return [head].concat(tail)},\n      peg$c79 = function(antecedents, subject, a) {return a || []},\n      peg$c80 = \"as\",\n      peg$c81 = peg$literalExpectation(\"as\", false),\n      peg$c82 = function(antecedents, subject, args, m) {return m},\n      peg$c83 = function(antecedents, subject, args, as_) {return {subject, args, as_: as_ || null};},\n      peg$c84 = function(antecedents, right) {\n      \t\tvar ret = {\n      \t\t\t_type: 'reduction',\n      \t\t\tsubject: right[0].subject,\n      \t\t\targs: right[0].args,\n      \t\t\tantecedents,\n      \t\t\tas: right[0].as_,\n      \t\t\tlocation: location()\n      \t\t};\n\n      \t\tfor (var i = 1; i < right.length; i++) {\n      \t\t\tret = {\n      \t\t\t\t_type: 'reduction',\n      \t\t\t\tsubject: right[i].subject,\n      \t\t\t\targs: right[i].args,\n      \t\t\t\tantecedents: [ret],\n      \t\t\t\tas: right[i].as_,\n      \t\t\t\tlocation: location()\n      \t\t\t}\n      \t\t}\n      \t\t\n      \t\treturn ret;\n      \t},\n      peg$c85 = function(schema, head, e) {return e},\n      peg$c86 = function(schema, head, tail) {return [head].concat(tail)},\n      peg$c87 = function(schema, a) {return a || []},\n      peg$c88 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'schemacall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c89 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'funcall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c90 = function(head, tv) {return tv},\n      peg$c91 = function(p) {return p || []},\n      peg$c92 = \"=>\",\n      peg$c93 = peg$literalExpectation(\"=>\", false),\n      peg$c94 = function(params, e) {return e},\n      peg$c95 = function(params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'funexpr',\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c96 = function(params, expr) {return {defdollars: [], expr}},\n      peg$c97 = function(params, d) {return d},\n      peg$c98 = function(params, defdollars, expr) {return {defdollars, expr}},\n      peg$c99 = function(params, foo) {\n      \t\treturn {\n      \t\t\t_type: 'schemaexpr',\n      \t\t\tparams,\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\texpr: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c100 = function(l) {return l || []},\n      peg$c101 = \"|-\",\n      peg$c102 = peg$literalExpectation(\"|-\", false),\n      peg$c103 = function(left, expr) {return {defdollars: [], expr}},\n      peg$c104 = function(left, d) {return d},\n      peg$c105 = function(left, defdollars, expr) {return {defdollars, expr}},\n      peg$c106 = function(left, foo) {\n      \t\treturn {\n      \t\t\t_type: 'tee',\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\tleft,\n      \t\t\tright: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c107 = \"with\",\n      peg$c108 = peg$literalExpectation(\"with\", false),\n      peg$c109 = function(doc, tex, type, varname, varexpr, d) {return d},\n      peg$c110 = function(doc, tex, type, varname, varexpr, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'with',\n      \t\t\twith: {\n      \t\t\t\t_type: 'defv',\n      \t\t\t\tisParam: false,\n      \t\t\t\tdoc: doc ? doc[0] : null,\n      \t\t\t\ttex: tex ? tex[0] : null,\n      \t\t\t\tsealed: false,\n      \t\t\t\ttype,\n      \t\t\t\tname: varname,\n      \t\t\t\texpr: varexpr,\n      \t\t\t\tlocation: location()\n      \t\t\t},\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c111 = function(name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'def$',\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t};\n      \t},\n      peg$c112 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: false,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c113 = function(head, t) {return t},\n      peg$c114 = \"->\",\n      peg$c115 = peg$literalExpectation(\"->\", false),\n      peg$c116 = function(from, to) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: true,\n      \t\t\tfrom,\n      \t\t\tto,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c117 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '@',\n      \t\t\tname: name.slice(1),\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c118 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '$',\n      \t\t\tname: name,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c119 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: 'normal',\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c120 = \"@discouraged\",\n      peg$c121 = peg$literalExpectation(\"@discouraged\", false),\n      peg$c122 = \"@deprecated\",\n      peg$c123 = peg$literalExpectation(\"@deprecated\", false),\n      peg$c124 = /^[a-zA-Z0-9_]/,\n      peg$c125 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c126 = \"$\",\n      peg$c127 = peg$literalExpectation(\"$\", false),\n      peg$c128 = \"\\\"\",\n      peg$c129 = peg$literalExpectation(\"\\\"\", false),\n      peg$c130 = peg$anyExpectation(),\n      peg$c131 = function(a) {return a},\n      peg$c132 = function(b) {\n      \t\treturn b.replace(/\\r\\n|\\r/g, '\\n');\n      \t},\n      peg$c133 = \"precedence=\",\n      peg$c134 = peg$literalExpectation(\"precedence=\", false),\n      peg$c135 = /^[0-9]/,\n      peg$c136 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c137 = function(precedence) {\n      \t\treturn {\n      \t\t\tprecedence: precedence * 1\n      \t\t}\n      \t},\n      peg$c138 = \"//\",\n      peg$c139 = peg$literalExpectation(\"//\", false),\n      peg$c140 = \"/*\",\n      peg$c141 = peg$literalExpectation(\"/*\", false),\n      peg$c142 = \"*/\",\n      peg$c143 = peg$literalExpectation(\"*/\", false),\n      peg$c144 = \"\\r\\n\",\n      peg$c145 = peg$literalExpectation(\"\\r\\n\", false),\n      peg$c146 = \"\\r\",\n      peg$c147 = peg$literalExpectation(\"\\r\", false),\n      peg$c148 = \"\\n\",\n      peg$c149 = peg$literalExpectation(\"\\n\", false),\n      peg$c150 = /^[ \\t\\n\\r]/,\n      peg$c151 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$resultsCache = {},\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 0,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseimport();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c0(s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseimport();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c0(s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parseline();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c1(s2, s5);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parseline();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c1(s2, s5);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 1,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable() {\n    var s0, s1, s2, s3;\n\n    var key    = peg$currPos * 43 + 2,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseevaluable_internal();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable_internal() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 3,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseexpr_internal_3();\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseimport() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 4,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesem();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c6(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetypedef() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 5,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c7) {\n        s2 = peg$c7;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s7 = peg$c9;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseftype();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s6;\n                      s7 = peg$c11(s1, s4, s9);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefv() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    var key    = peg$currPos * 43 + 6,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c13) {\n          s4 = peg$c13;\n          peg$currPos += 6;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetype();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 61) {\n                    s9 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseobjectexpr();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parsesem();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c15(s1, s2, s3, s4, s6, s11);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parsesem();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c16(s1, s2, s3, s4, s6);\n                    }\n                    s8 = s9;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s1, s2, s3, s4, s6, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefparam() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 7,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschemaparam() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 8,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s7 = peg$c19;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 64) {\n                    s9 = peg$c21;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = [];\n                    if (peg$c23.test(input.charAt(peg$currPos))) {\n                      s12 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s12 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                    }\n                    if (s12 !== peg$FAILED) {\n                      while (s12 !== peg$FAILED) {\n                        s11.push(s12);\n                        if (peg$c23.test(input.charAt(peg$currPos))) {\n                          s12 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                        }\n                      }\n                    } else {\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s10 = input.substring(s10, peg$currPos);\n                    } else {\n                      s10 = s11;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s5;\n                      s6 = peg$c25(s1, s2, s4, s10);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c26(s1, s2, s4, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefun() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 9,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex_attributes();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetex();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c13) {\n            s5 = peg$c13;\n            peg$currPos += 6;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetype();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefparam();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parsedefparam();\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parsedefparam();\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c32(s1, s2, s3, s4, s5, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s9;\n                              s10 = peg$c35(s1, s2, s3, s4, s5, s7, s12);\n                              s9 = s10;\n                            } else {\n                              peg$currPos = s9;\n                              s9 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 123) {\n                        s11 = peg$c36;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 125) {\n                                s15 = peg$c38;\n                                peg$currPos++;\n                              } else {\n                                s15 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                              }\n                              if (s15 !== peg$FAILED) {\n                                peg$savedPos = s10;\n                                s11 = peg$c40(s1, s2, s3, s4, s5, s7, s9, s13);\n                                s10 = s11;\n                              } else {\n                                peg$currPos = s10;\n                                s10 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s10;\n                              s10 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s10;\n                            s10 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 === peg$FAILED) {\n                        s10 = peg$currPos;\n                        s11 = peg$parsesem();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c41(s1, s2, s3, s4, s5, s7, s9);\n                        }\n                        s10 = s11;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c42(s1, s2, s3, s4, s5, s7, s9, s10);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschema() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    var key    = peg$currPos * 43 + 10,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseannotation();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c43(s1, s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseannotation();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c43(s1, s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c44) {\n          s3 = peg$c44;\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c45); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c46) {\n            s3 = peg$c46;\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c47); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c48) {\n              s3 = peg$c48;\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c49); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = peg$parsedefschemaparam();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        s13 = [];\n                        s14 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s15 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s15 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parsedefschemaparam();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                peg$savedPos = s14;\n                                s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                s14 = s15;\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s14;\n                          s14 = peg$FAILED;\n                        }\n                        while (s14 !== peg$FAILED) {\n                          s13.push(s14);\n                          s14 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s15 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s15 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parsedefschemaparam();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  peg$savedPos = s14;\n                                  s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                  s14 = s15;\n                                } else {\n                                  peg$currPos = s14;\n                                  s14 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        }\n                        if (s13 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c51(s1, s2, s3, s5, s11, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 === peg$FAILED) {\n                      s10 = null;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s11 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c52(s1, s2, s3, s5, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s9 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$currPos;\n                      s12 = peg$parseident();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parse_();\n                        if (s13 !== peg$FAILED) {\n                          s14 = [];\n                          s15 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s16 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s16 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parse_();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parseident();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parse_();\n                                if (s19 !== peg$FAILED) {\n                                  peg$savedPos = s15;\n                                  s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                  s15 = s16;\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s15;\n                            s15 = peg$FAILED;\n                          }\n                          while (s15 !== peg$FAILED) {\n                            s14.push(s15);\n                            s15 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s16 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s16 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parse_();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parseident();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parse_();\n                                  if (s19 !== peg$FAILED) {\n                                    peg$savedPos = s15;\n                                    s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                    s15 = s16;\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          }\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s11;\n                            s12 = peg$c56(s1, s2, s3, s5, s7, s12, s14);\n                            s11 = s12;\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c57(s1, s2, s3, s5, s7, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                      s9 = peg$c36;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefdollar();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s12;\n                            s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                            s12 = s13;\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$currPos;\n                          s13 = peg$parsedefdollar();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseexpr_internal_3();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c38;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c59(s1, s2, s3, s5, s7, s8, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsereduction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 11,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseexpr_internal_2();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c60(s2);\n    }\n    s1 = s2;\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c61;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c62); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_3();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s9 = peg$c63;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c64); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parseexpr_internal_3();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c65(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s9 = peg$c63;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                }\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseexpr_internal_3();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c65(s5, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c66(s5, s7);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c67;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c68); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c69(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s5 = peg$c70;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c71); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseschemacall();\n            if (s7 === peg$FAILED) {\n              s7 = peg$parsevar();\n              if (s7 === peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseexpr_internal_3();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s12 = peg$c33;\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c72(s1, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$currPos;\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s10 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parse_();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$currPos;\n                    s13 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 63) {\n                      s14 = peg$c73;\n                      peg$currPos++;\n                    } else {\n                      s14 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                    }\n                    if (s14 !== peg$FAILED) {\n                      peg$savedPos = s13;\n                      s14 = peg$c75(s1, s7);\n                    }\n                    s13 = s14;\n                    if (s13 === peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                    }\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        s15 = [];\n                        s16 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s17 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s17 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s17 !== peg$FAILED) {\n                          s18 = peg$parse_();\n                          if (s18 !== peg$FAILED) {\n                            s19 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 63) {\n                              s20 = peg$c73;\n                              peg$currPos++;\n                            } else {\n                              s20 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                            }\n                            if (s20 !== peg$FAILED) {\n                              peg$savedPos = s19;\n                              s20 = peg$c76(s1, s7, s13);\n                            }\n                            s19 = s20;\n                            if (s19 === peg$FAILED) {\n                              s19 = peg$parseobjectexpr();\n                            }\n                            if (s19 !== peg$FAILED) {\n                              s20 = peg$parse_();\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s16;\n                                s17 = peg$c77(s1, s7, s13, s19);\n                                s16 = s17;\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s16;\n                          s16 = peg$FAILED;\n                        }\n                        while (s16 !== peg$FAILED) {\n                          s15.push(s16);\n                          s16 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s17 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s17 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s17 !== peg$FAILED) {\n                            s18 = peg$parse_();\n                            if (s18 !== peg$FAILED) {\n                              s19 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 63) {\n                                s20 = peg$c73;\n                                peg$currPos++;\n                              } else {\n                                s20 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                              }\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s19;\n                                s20 = peg$c76(s1, s7, s13);\n                              }\n                              s19 = s20;\n                              if (s19 === peg$FAILED) {\n                                s19 = peg$parseobjectexpr();\n                              }\n                              if (s19 !== peg$FAILED) {\n                                s20 = peg$parse_();\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s16;\n                                  s17 = peg$c77(s1, s7, s13, s19);\n                                  s16 = s17;\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          peg$savedPos = s12;\n                          s13 = peg$c78(s1, s7, s13, s15);\n                          s12 = s13;\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s12;\n                      s12 = peg$FAILED;\n                    }\n                    if (s12 === peg$FAILED) {\n                      s12 = null;\n                    }\n                    if (s12 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s13 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s13 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c79(s1, s7, s12);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              if (s8 === peg$FAILED) {\n                s8 = null;\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$currPos;\n                s10 = peg$parse__();\n                if (s10 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c80) {\n                    s11 = peg$c80;\n                    peg$currPos += 2;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse__();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseexpr_internal_2();\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s9;\n                        s10 = peg$c82(s1, s7, s8, s13);\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                if (s9 === peg$FAILED) {\n                  s9 = null;\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c83(s1, s7, s8, s9);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 62) {\n              s5 = peg$c70;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c71); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseschemacall();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parsevar();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s8 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse_();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseexpr_internal_3();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parse_();\n                          if (s11 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 41) {\n                              s12 = peg$c33;\n                              peg$currPos++;\n                            } else {\n                              s12 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                            }\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s7;\n                              s8 = peg$c72(s1, s10);\n                              s7 = s8;\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 63) {\n                          s14 = peg$c73;\n                          peg$currPos++;\n                        } else {\n                          s14 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                        }\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s13;\n                          s14 = peg$c75(s1, s7);\n                        }\n                        s13 = s14;\n                        if (s13 === peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                        }\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 63) {\n                                  s20 = peg$c73;\n                                  peg$currPos++;\n                                } else {\n                                  s20 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                }\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s19;\n                                  s20 = peg$c76(s1, s7, s13);\n                                }\n                                s19 = s20;\n                                if (s19 === peg$FAILED) {\n                                  s19 = peg$parseobjectexpr();\n                                }\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c77(s1, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 63) {\n                                    s20 = peg$c73;\n                                    peg$currPos++;\n                                  } else {\n                                    s20 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                  }\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s19;\n                                    s20 = peg$c76(s1, s7, s13);\n                                  }\n                                  s19 = s20;\n                                  if (s19 === peg$FAILED) {\n                                    s19 = peg$parseobjectexpr();\n                                  }\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c77(s1, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c78(s1, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c79(s1, s7, s12);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c80) {\n                        s11 = peg$c80;\n                        peg$currPos += 2;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseexpr_internal_2();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s9;\n                            s10 = peg$c82(s1, s7, s8, s13);\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c83(s1, s7, s8, s9);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemacall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 12,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr_internal_3();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefuncall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 13,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c89(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefunexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 14,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseobjectexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s9 = peg$c38;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s4;\n                      s5 = peg$c94(s1, s7);\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c95(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemaexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 15,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_1();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c96(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c97(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c97(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c98(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c99(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetee() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    var key    = peg$currPos * 43 + 16,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    s3 = peg$parseexpr_internal_1();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s7 = peg$c29;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n        if (s7 !== peg$FAILED) {\n          s8 = peg$parse_();\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parseexpr_internal_1();\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                peg$savedPos = s6;\n                s7 = peg$c65(s3, s9);\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s7 = peg$c29;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parseexpr_internal_1();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c65(s3, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c66(s3, s5);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c100(s2);\n    }\n    s1 = s2;\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c101) {\n        s2 = peg$c101;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_2();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c103(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c104(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c104(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c105(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c106(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsewith() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;\n\n    var key    = peg$currPos * 43 + 17,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c107) {\n      s1 = peg$c107;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c27;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parsedocumentation();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parsetex();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 61) {\n                          s11 = peg$c9;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseobjectexpr();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 41) {\n                                  s15 = peg$c33;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse_();\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 123) {\n                                      s17 = peg$c36;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse_();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = [];\n                                        s20 = peg$currPos;\n                                        s21 = peg$parsedefdollar();\n                                        if (s21 !== peg$FAILED) {\n                                          s22 = peg$parse_();\n                                          if (s22 !== peg$FAILED) {\n                                            peg$savedPos = s20;\n                                            s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                            s20 = s21;\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s20;\n                                          s20 = peg$FAILED;\n                                        }\n                                        while (s20 !== peg$FAILED) {\n                                          s19.push(s20);\n                                          s20 = peg$currPos;\n                                          s21 = peg$parsedefdollar();\n                                          if (s21 !== peg$FAILED) {\n                                            s22 = peg$parse_();\n                                            if (s22 !== peg$FAILED) {\n                                              peg$savedPos = s20;\n                                              s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                              s20 = s21;\n                                            } else {\n                                              peg$currPos = s20;\n                                              s20 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse_();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseexpr_internal_3();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse_();\n                                              if (s22 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                  s23 = peg$c38;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s23 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c110(s5, s6, s7, s9, s13, s19, s21);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_3() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 18,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsereduction();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_2();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_2() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 19,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetee();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_1();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_1() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 20,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseschemacall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseschemaexpr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewith();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s1 = peg$c27;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseexpr_internal_3();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse_();\n                  if (s4 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s5 = peg$c33;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c3(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseobjectexpr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 21,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsefuncall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsefunexpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevar();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c27;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseobjectexpr();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s5 = peg$c33;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c3(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefdollar() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 22,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c9;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_internal_3();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c111(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetype() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 23,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsestype();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseftype();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsestype() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 24,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c112(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseftype() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 25,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetype();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$currPos;\n          s7 = peg$parse_();\n          if (s7 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s8 = peg$c29;\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parsetype();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c113(s4, s10);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$currPos;\n            s7 = peg$parse_();\n            if (s7 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s8 = peg$c29;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parse_();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsetype();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s7 = peg$c113(s4, s10);\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c66(s4, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c114) {\n              s5 = peg$c114;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c115); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c67;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c116(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsevar() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 26,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseat_var();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedollar_var();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseplain_var();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 27,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseat_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c117(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 28,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c118(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseplain_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 29,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c119(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsekeyword() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 30,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c80) {\n      s0 = peg$c80;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c44) {\n        s0 = peg$c44;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c4) {\n          s0 = peg$c4;\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c48) {\n            s0 = peg$c48;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c49); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c13) {\n              s0 = peg$c13;\n              peg$currPos += 6;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7) === peg$c46) {\n                s0 = peg$c46;\n                peg$currPos += 7;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c7) {\n                  s0 = peg$c7;\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s0 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 4) === peg$c107) {\n                      s0 = peg$c107;\n                      peg$currPos += 4;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseannotation() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 31,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 12) === peg$c120) {\n      s0 = peg$c120;\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 11) === peg$c122) {\n        s0 = peg$c122;\n        peg$currPos += 11;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c123); }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 32,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    peg$silentFails++;\n    s3 = peg$currPos;\n    s4 = peg$parsekeyword();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s6 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        s4 = [s4, s5];\n        s3 = s4;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s3 === peg$FAILED) {\n      s2 = void 0;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 33,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s2 = peg$c21;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 34,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c126;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedocumentation() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 35,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c128;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s6 = peg$c128;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c129); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c128;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c128;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex_attributes() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 36,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c133) {\n          s3 = peg$c133;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = [];\n            if (peg$c135.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c136); }\n            }\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                if (peg$c135.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c136); }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = input.substring(s5, peg$currPos);\n            } else {\n              s5 = s6;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s7 = peg$c67;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 37,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s1 = peg$c126;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 36) {\n        s6 = peg$c126;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c127); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s6 = peg$c126;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s3 = peg$c126;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 38,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c138) {\n      s1 = peg$c138;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parsenewline();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsenewline();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c140) {\n        s1 = peg$c140;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c142) {\n          s5 = peg$c142;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s5 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c130); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s3 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsenewline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 39,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c144) {\n      s0 = peg$c144;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s0 = peg$c146;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c148;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c149); }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 40,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c150.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c151); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 41,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c150.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsesem() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 42,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c63;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c64); }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { evaluable: peg$parseevaluable },\n      peg$startRuleFunction  = peg$parseevaluable,\n\n      peg$c0 = function(i) {return i},\n      peg$c1 = function(imports, a) {return a},\n      peg$c2 = function(imports, lines) {return imports.concat(lines)},\n      peg$c3 = function(e) {return e},\n      peg$c4 = \"import\",\n      peg$c5 = peg$literalExpectation(\"import\", false),\n      peg$c6 = function(filename) {\n      \t\treturn {\n      \t\t\t_type: 'import',\n      \t\t\tfilename,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c7 = \"type\",\n      peg$c8 = peg$literalExpectation(\"type\", false),\n      peg$c9 = \"=\",\n      peg$c10 = peg$literalExpectation(\"=\", false),\n      peg$c11 = function(doc, name, o) {return o},\n      peg$c12 = function(doc, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'typedef',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\texpr,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c13 = \"sealed\",\n      peg$c14 = peg$literalExpectation(\"sealed\", false),\n      peg$c15 = function(doc, tex, sealed, type, name, expr) {return expr},\n      peg$c16 = function(doc, tex, sealed, type, name) {return null},\n      peg$c17 = function(doc, tex, sealed, type, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: false,\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c18 = function(tex, type, name) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c19 = \":\",\n      peg$c20 = peg$literalExpectation(\":\", false),\n      peg$c21 = \"@\",\n      peg$c22 = peg$literalExpectation(\"@\", false),\n      peg$c23 = /^[a-z0-9_]/,\n      peg$c24 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c25 = function(tex, type, name, g) {return g},\n      peg$c26 = function(tex, type, name, selector) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tselector,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c27 = \"(\",\n      peg$c28 = peg$literalExpectation(\"(\", false),\n      peg$c29 = \",\",\n      peg$c30 = peg$literalExpectation(\",\", false),\n      peg$c31 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tv) {return tv},\n      peg$c32 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tail) {return [head].concat(tail)},\n      peg$c33 = \")\",\n      peg$c34 = peg$literalExpectation(\")\", false),\n      peg$c35 = function(doc, tex_attributes, tex, sealed, rettype, name, p) {return p || []},\n      peg$c36 = \"{\",\n      peg$c37 = peg$literalExpectation(\"{\", false),\n      peg$c38 = \"}\",\n      peg$c39 = peg$literalExpectation(\"}\", false),\n      peg$c40 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {return expr},\n      peg$c41 = function(doc, tex_attributes, tex, sealed, rettype, name, params) {return null},\n      peg$c42 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defun',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex_attributes: tex_attributes ? tex_attributes[0] : {\n      \t\t\t\tprecedence: false\n      \t\t\t},\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\trettype,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c43 = function(doc, a) {return a},\n      peg$c44 = \"axiom\",\n      peg$c45 = peg$literalExpectation(\"axiom\", false),\n      peg$c46 = \"theorem\",\n      peg$c47 = peg$literalExpectation(\"theorem\", false),\n      peg$c48 = \"schema\",\n      peg$c49 = peg$literalExpectation(\"schema\", false),\n      peg$c50 = function(doc, annotations, schemaType, name, head, tv) {return tv},\n      peg$c51 = function(doc, annotations, schemaType, name, head, tail) {return [head].concat(tail)},\n      peg$c52 = function(doc, annotations, schemaType, name, p) {return p || []},\n      peg$c53 = \"using\",\n      peg$c54 = peg$literalExpectation(\"using\", false),\n      peg$c55 = function(doc, annotations, schemaType, name, params, head, n) {return n},\n      peg$c56 = function(doc, annotations, schemaType, name, params, head, tail) {return [head].concat(tail)},\n      peg$c57 = function(doc, annotations, schemaType, name, params, x) {return x},\n      peg$c58 = function(doc, annotations, schemaType, name, params, using, d) {return d},\n      peg$c59 = function(doc, annotations, schemaType, name, params, using, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defschema',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\tannotations,\n      \t\t\tschemaType,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\tusing: using || [],\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c60 = function(a) {return [a]},\n      peg$c61 = \"[\",\n      peg$c62 = peg$literalExpectation(\"[\", false),\n      peg$c63 = \";\",\n      peg$c64 = peg$literalExpectation(\";\", false),\n      peg$c65 = function(head, e) {return e},\n      peg$c66 = function(head, tail) {return [head].concat(tail)},\n      peg$c67 = \"]\",\n      peg$c68 = peg$literalExpectation(\"]\", false),\n      peg$c69 = function(b) {return b || []},\n      peg$c70 = \">\",\n      peg$c71 = peg$literalExpectation(\">\", false),\n      peg$c72 = function(antecedents, e) {return e},\n      peg$c73 = \"?\",\n      peg$c74 = peg$literalExpectation(\"?\", false),\n      peg$c75 = function(antecedents, subject) {return null},\n      peg$c76 = function(antecedents, subject, head) {return null},\n      peg$c77 = function(antecedents, subject, head, e) {return e},\n      peg$c78 = function(antecedents, subject, head, tail) {return [head].concat(tail)},\n      peg$c79 = function(antecedents, subject, a) {return a || []},\n      peg$c80 = \"as\",\n      peg$c81 = peg$literalExpectation(\"as\", false),\n      peg$c82 = function(antecedents, subject, args, m) {return m},\n      peg$c83 = function(antecedents, subject, args, as_) {return {subject, args, as_: as_ || null};},\n      peg$c84 = function(antecedents, right) {\n      \t\tvar ret = {\n      \t\t\t_type: 'reduction',\n      \t\t\tsubject: right[0].subject,\n      \t\t\targs: right[0].args,\n      \t\t\tantecedents,\n      \t\t\tas: right[0].as_,\n      \t\t\tlocation: location()\n      \t\t};\n\n      \t\tfor (var i = 1; i < right.length; i++) {\n      \t\t\tret = {\n      \t\t\t\t_type: 'reduction',\n      \t\t\t\tsubject: right[i].subject,\n      \t\t\t\targs: right[i].args,\n      \t\t\t\tantecedents: [ret],\n      \t\t\t\tas: right[i].as_,\n      \t\t\t\tlocation: location()\n      \t\t\t}\n      \t\t}\n      \t\t\n      \t\treturn ret;\n      \t},\n      peg$c85 = function(schema, head, e) {return e},\n      peg$c86 = function(schema, head, tail) {return [head].concat(tail)},\n      peg$c87 = function(schema, a) {return a || []},\n      peg$c88 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'schemacall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c89 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'funcall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c90 = function(head, tv) {return tv},\n      peg$c91 = function(p) {return p || []},\n      peg$c92 = \"=>\",\n      peg$c93 = peg$literalExpectation(\"=>\", false),\n      peg$c94 = function(params, e) {return e},\n      peg$c95 = function(params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'funexpr',\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c96 = function(params, expr) {return {defdollars: [], expr}},\n      peg$c97 = function(params, d) {return d},\n      peg$c98 = function(params, defdollars, expr) {return {defdollars, expr}},\n      peg$c99 = function(params, foo) {\n      \t\treturn {\n      \t\t\t_type: 'schemaexpr',\n      \t\t\tparams,\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\texpr: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c100 = function(l) {return l || []},\n      peg$c101 = \"|-\",\n      peg$c102 = peg$literalExpectation(\"|-\", false),\n      peg$c103 = function(left, expr) {return {defdollars: [], expr}},\n      peg$c104 = function(left, d) {return d},\n      peg$c105 = function(left, defdollars, expr) {return {defdollars, expr}},\n      peg$c106 = function(left, foo) {\n      \t\treturn {\n      \t\t\t_type: 'tee',\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\tleft,\n      \t\t\tright: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c107 = \"with\",\n      peg$c108 = peg$literalExpectation(\"with\", false),\n      peg$c109 = function(doc, tex, type, varname, varexpr, d) {return d},\n      peg$c110 = function(doc, tex, type, varname, varexpr, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'with',\n      \t\t\twith: {\n      \t\t\t\t_type: 'defv',\n      \t\t\t\tisParam: false,\n      \t\t\t\tdoc: doc ? doc[0] : null,\n      \t\t\t\ttex: tex ? tex[0] : null,\n      \t\t\t\tsealed: false,\n      \t\t\t\ttype,\n      \t\t\t\tname: varname,\n      \t\t\t\texpr: varexpr,\n      \t\t\t\tlocation: location()\n      \t\t\t},\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c111 = function(name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'def$',\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t};\n      \t},\n      peg$c112 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: false,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c113 = function(head, t) {return t},\n      peg$c114 = \"->\",\n      peg$c115 = peg$literalExpectation(\"->\", false),\n      peg$c116 = function(from, to) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: true,\n      \t\t\tfrom,\n      \t\t\tto,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c117 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '@',\n      \t\t\tname: name.slice(1),\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c118 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '$',\n      \t\t\tname: name,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c119 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: 'normal',\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c120 = \"@discouraged\",\n      peg$c121 = peg$literalExpectation(\"@discouraged\", false),\n      peg$c122 = \"@deprecated\",\n      peg$c123 = peg$literalExpectation(\"@deprecated\", false),\n      peg$c124 = /^[a-zA-Z0-9_]/,\n      peg$c125 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c126 = \"$\",\n      peg$c127 = peg$literalExpectation(\"$\", false),\n      peg$c128 = \"\\\"\",\n      peg$c129 = peg$literalExpectation(\"\\\"\", false),\n      peg$c130 = peg$anyExpectation(),\n      peg$c131 = function(a) {return a},\n      peg$c132 = function(b) {\n      \t\treturn b.replace(/\\r\\n|\\r/g, '\\n');\n      \t},\n      peg$c133 = \"precedence=\",\n      peg$c134 = peg$literalExpectation(\"precedence=\", false),\n      peg$c135 = /^[0-9]/,\n      peg$c136 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c137 = function(precedence) {\n      \t\treturn {\n      \t\t\tprecedence: precedence * 1\n      \t\t}\n      \t},\n      peg$c138 = \"//\",\n      peg$c139 = peg$literalExpectation(\"//\", false),\n      peg$c140 = \"/*\",\n      peg$c141 = peg$literalExpectation(\"/*\", false),\n      peg$c142 = \"*/\",\n      peg$c143 = peg$literalExpectation(\"*/\", false),\n      peg$c144 = \"\\r\\n\",\n      peg$c145 = peg$literalExpectation(\"\\r\\n\", false),\n      peg$c146 = \"\\r\",\n      peg$c147 = peg$literalExpectation(\"\\r\", false),\n      peg$c148 = \"\\n\",\n      peg$c149 = peg$literalExpectation(\"\\n\", false),\n      peg$c150 = /^[ \\t\\n\\r]/,\n      peg$c151 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$resultsCache = {},\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 0,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseimport();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c0(s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseimport();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c0(s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parseline();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c1(s2, s5);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parseline();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c1(s2, s5);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 1,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable() {\n    var s0, s1, s2, s3;\n\n    var key    = peg$currPos * 43 + 2,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseevaluable_internal();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable_internal() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 3,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseexpr_internal_3();\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseimport() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 4,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesem();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c6(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetypedef() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 5,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c7) {\n        s2 = peg$c7;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s7 = peg$c9;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseftype();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s6;\n                      s7 = peg$c11(s1, s4, s9);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefv() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    var key    = peg$currPos * 43 + 6,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c13) {\n          s4 = peg$c13;\n          peg$currPos += 6;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetype();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 61) {\n                    s9 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseobjectexpr();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parsesem();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c15(s1, s2, s3, s4, s6, s11);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parsesem();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c16(s1, s2, s3, s4, s6);\n                    }\n                    s8 = s9;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s1, s2, s3, s4, s6, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefparam() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 7,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschemaparam() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 8,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s7 = peg$c19;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 64) {\n                    s9 = peg$c21;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = [];\n                    if (peg$c23.test(input.charAt(peg$currPos))) {\n                      s12 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s12 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                    }\n                    if (s12 !== peg$FAILED) {\n                      while (s12 !== peg$FAILED) {\n                        s11.push(s12);\n                        if (peg$c23.test(input.charAt(peg$currPos))) {\n                          s12 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                        }\n                      }\n                    } else {\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s10 = input.substring(s10, peg$currPos);\n                    } else {\n                      s10 = s11;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s5;\n                      s6 = peg$c25(s1, s2, s4, s10);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c26(s1, s2, s4, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefun() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 9,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex_attributes();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetex();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c13) {\n            s5 = peg$c13;\n            peg$currPos += 6;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetype();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefparam();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parsedefparam();\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parsedefparam();\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c32(s1, s2, s3, s4, s5, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s9;\n                              s10 = peg$c35(s1, s2, s3, s4, s5, s7, s12);\n                              s9 = s10;\n                            } else {\n                              peg$currPos = s9;\n                              s9 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 123) {\n                        s11 = peg$c36;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 125) {\n                                s15 = peg$c38;\n                                peg$currPos++;\n                              } else {\n                                s15 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                              }\n                              if (s15 !== peg$FAILED) {\n                                peg$savedPos = s10;\n                                s11 = peg$c40(s1, s2, s3, s4, s5, s7, s9, s13);\n                                s10 = s11;\n                              } else {\n                                peg$currPos = s10;\n                                s10 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s10;\n                              s10 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s10;\n                            s10 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 === peg$FAILED) {\n                        s10 = peg$currPos;\n                        s11 = peg$parsesem();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c41(s1, s2, s3, s4, s5, s7, s9);\n                        }\n                        s10 = s11;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c42(s1, s2, s3, s4, s5, s7, s9, s10);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschema() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    var key    = peg$currPos * 43 + 10,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseannotation();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c43(s1, s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseannotation();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c43(s1, s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c44) {\n          s3 = peg$c44;\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c45); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c46) {\n            s3 = peg$c46;\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c47); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c48) {\n              s3 = peg$c48;\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c49); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = peg$parsedefschemaparam();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        s13 = [];\n                        s14 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s15 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s15 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parsedefschemaparam();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                peg$savedPos = s14;\n                                s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                s14 = s15;\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s14;\n                          s14 = peg$FAILED;\n                        }\n                        while (s14 !== peg$FAILED) {\n                          s13.push(s14);\n                          s14 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s15 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s15 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parsedefschemaparam();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  peg$savedPos = s14;\n                                  s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                  s14 = s15;\n                                } else {\n                                  peg$currPos = s14;\n                                  s14 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        }\n                        if (s13 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c51(s1, s2, s3, s5, s11, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 === peg$FAILED) {\n                      s10 = null;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s11 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c52(s1, s2, s3, s5, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s9 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$currPos;\n                      s12 = peg$parseident();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parse_();\n                        if (s13 !== peg$FAILED) {\n                          s14 = [];\n                          s15 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s16 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s16 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parse_();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parseident();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parse_();\n                                if (s19 !== peg$FAILED) {\n                                  peg$savedPos = s15;\n                                  s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                  s15 = s16;\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s15;\n                            s15 = peg$FAILED;\n                          }\n                          while (s15 !== peg$FAILED) {\n                            s14.push(s15);\n                            s15 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s16 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s16 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parse_();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parseident();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parse_();\n                                  if (s19 !== peg$FAILED) {\n                                    peg$savedPos = s15;\n                                    s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                    s15 = s16;\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          }\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s11;\n                            s12 = peg$c56(s1, s2, s3, s5, s7, s12, s14);\n                            s11 = s12;\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c57(s1, s2, s3, s5, s7, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                      s9 = peg$c36;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefdollar();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s12;\n                            s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                            s12 = s13;\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$currPos;\n                          s13 = peg$parsedefdollar();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseexpr_internal_3();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c38;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c59(s1, s2, s3, s5, s7, s8, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsereduction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 11,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseexpr_internal_2();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c60(s2);\n    }\n    s1 = s2;\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c61;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c62); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_3();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s9 = peg$c63;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c64); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parseexpr_internal_3();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c65(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s9 = peg$c63;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                }\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseexpr_internal_3();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c65(s5, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c66(s5, s7);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c67;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c68); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c69(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s5 = peg$c70;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c71); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseschemacall();\n            if (s7 === peg$FAILED) {\n              s7 = peg$parsevar();\n              if (s7 === peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseexpr_internal_3();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s12 = peg$c33;\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c72(s1, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$currPos;\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s10 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parse_();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$currPos;\n                    s13 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 63) {\n                      s14 = peg$c73;\n                      peg$currPos++;\n                    } else {\n                      s14 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                    }\n                    if (s14 !== peg$FAILED) {\n                      peg$savedPos = s13;\n                      s14 = peg$c75(s1, s7);\n                    }\n                    s13 = s14;\n                    if (s13 === peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                    }\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        s15 = [];\n                        s16 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s17 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s17 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s17 !== peg$FAILED) {\n                          s18 = peg$parse_();\n                          if (s18 !== peg$FAILED) {\n                            s19 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 63) {\n                              s20 = peg$c73;\n                              peg$currPos++;\n                            } else {\n                              s20 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                            }\n                            if (s20 !== peg$FAILED) {\n                              peg$savedPos = s19;\n                              s20 = peg$c76(s1, s7, s13);\n                            }\n                            s19 = s20;\n                            if (s19 === peg$FAILED) {\n                              s19 = peg$parseobjectexpr();\n                            }\n                            if (s19 !== peg$FAILED) {\n                              s20 = peg$parse_();\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s16;\n                                s17 = peg$c77(s1, s7, s13, s19);\n                                s16 = s17;\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s16;\n                          s16 = peg$FAILED;\n                        }\n                        while (s16 !== peg$FAILED) {\n                          s15.push(s16);\n                          s16 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s17 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s17 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s17 !== peg$FAILED) {\n                            s18 = peg$parse_();\n                            if (s18 !== peg$FAILED) {\n                              s19 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 63) {\n                                s20 = peg$c73;\n                                peg$currPos++;\n                              } else {\n                                s20 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                              }\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s19;\n                                s20 = peg$c76(s1, s7, s13);\n                              }\n                              s19 = s20;\n                              if (s19 === peg$FAILED) {\n                                s19 = peg$parseobjectexpr();\n                              }\n                              if (s19 !== peg$FAILED) {\n                                s20 = peg$parse_();\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s16;\n                                  s17 = peg$c77(s1, s7, s13, s19);\n                                  s16 = s17;\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          peg$savedPos = s12;\n                          s13 = peg$c78(s1, s7, s13, s15);\n                          s12 = s13;\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s12;\n                      s12 = peg$FAILED;\n                    }\n                    if (s12 === peg$FAILED) {\n                      s12 = null;\n                    }\n                    if (s12 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s13 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s13 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c79(s1, s7, s12);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              if (s8 === peg$FAILED) {\n                s8 = null;\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$currPos;\n                s10 = peg$parse__();\n                if (s10 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c80) {\n                    s11 = peg$c80;\n                    peg$currPos += 2;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse__();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseexpr_internal_2();\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s9;\n                        s10 = peg$c82(s1, s7, s8, s13);\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                if (s9 === peg$FAILED) {\n                  s9 = null;\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c83(s1, s7, s8, s9);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 62) {\n              s5 = peg$c70;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c71); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseschemacall();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parsevar();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s8 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse_();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseexpr_internal_3();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parse_();\n                          if (s11 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 41) {\n                              s12 = peg$c33;\n                              peg$currPos++;\n                            } else {\n                              s12 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                            }\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s7;\n                              s8 = peg$c72(s1, s10);\n                              s7 = s8;\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 63) {\n                          s14 = peg$c73;\n                          peg$currPos++;\n                        } else {\n                          s14 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                        }\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s13;\n                          s14 = peg$c75(s1, s7);\n                        }\n                        s13 = s14;\n                        if (s13 === peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                        }\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 63) {\n                                  s20 = peg$c73;\n                                  peg$currPos++;\n                                } else {\n                                  s20 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                }\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s19;\n                                  s20 = peg$c76(s1, s7, s13);\n                                }\n                                s19 = s20;\n                                if (s19 === peg$FAILED) {\n                                  s19 = peg$parseobjectexpr();\n                                }\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c77(s1, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 63) {\n                                    s20 = peg$c73;\n                                    peg$currPos++;\n                                  } else {\n                                    s20 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                  }\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s19;\n                                    s20 = peg$c76(s1, s7, s13);\n                                  }\n                                  s19 = s20;\n                                  if (s19 === peg$FAILED) {\n                                    s19 = peg$parseobjectexpr();\n                                  }\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c77(s1, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c78(s1, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c79(s1, s7, s12);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c80) {\n                        s11 = peg$c80;\n                        peg$currPos += 2;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseexpr_internal_2();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s9;\n                            s10 = peg$c82(s1, s7, s8, s13);\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c83(s1, s7, s8, s9);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemacall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 12,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr_internal_3();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefuncall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 13,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c89(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefunexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 14,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseobjectexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s9 = peg$c38;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s4;\n                      s5 = peg$c94(s1, s7);\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c95(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemaexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 15,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_1();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c96(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c97(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c97(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c98(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c99(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetee() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    var key    = peg$currPos * 43 + 16,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    s3 = peg$parseexpr_internal_1();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s7 = peg$c29;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n        if (s7 !== peg$FAILED) {\n          s8 = peg$parse_();\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parseexpr_internal_1();\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                peg$savedPos = s6;\n                s7 = peg$c65(s3, s9);\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s7 = peg$c29;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parseexpr_internal_1();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c65(s3, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c66(s3, s5);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c100(s2);\n    }\n    s1 = s2;\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c101) {\n        s2 = peg$c101;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_2();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c103(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c104(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c104(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c105(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c106(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsewith() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;\n\n    var key    = peg$currPos * 43 + 17,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c107) {\n      s1 = peg$c107;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c27;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parsedocumentation();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parsetex();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 61) {\n                          s11 = peg$c9;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseobjectexpr();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 41) {\n                                  s15 = peg$c33;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse_();\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 123) {\n                                      s17 = peg$c36;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse_();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = [];\n                                        s20 = peg$currPos;\n                                        s21 = peg$parsedefdollar();\n                                        if (s21 !== peg$FAILED) {\n                                          s22 = peg$parse_();\n                                          if (s22 !== peg$FAILED) {\n                                            peg$savedPos = s20;\n                                            s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                            s20 = s21;\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s20;\n                                          s20 = peg$FAILED;\n                                        }\n                                        while (s20 !== peg$FAILED) {\n                                          s19.push(s20);\n                                          s20 = peg$currPos;\n                                          s21 = peg$parsedefdollar();\n                                          if (s21 !== peg$FAILED) {\n                                            s22 = peg$parse_();\n                                            if (s22 !== peg$FAILED) {\n                                              peg$savedPos = s20;\n                                              s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                              s20 = s21;\n                                            } else {\n                                              peg$currPos = s20;\n                                              s20 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse_();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseexpr_internal_3();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse_();\n                                              if (s22 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                  s23 = peg$c38;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s23 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c110(s5, s6, s7, s9, s13, s19, s21);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_3() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 18,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsereduction();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_2();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_2() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 19,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetee();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_1();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_1() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 20,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseschemacall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseschemaexpr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewith();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s1 = peg$c27;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseexpr_internal_3();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse_();\n                  if (s4 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s5 = peg$c33;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c3(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseobjectexpr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 21,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsefuncall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsefunexpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevar();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c27;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseobjectexpr();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s5 = peg$c33;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c3(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefdollar() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 22,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c9;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_internal_3();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c111(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetype() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 23,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsestype();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseftype();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsestype() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 24,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c112(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseftype() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 25,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetype();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$currPos;\n          s7 = peg$parse_();\n          if (s7 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s8 = peg$c29;\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parsetype();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c113(s4, s10);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$currPos;\n            s7 = peg$parse_();\n            if (s7 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s8 = peg$c29;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parse_();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsetype();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s7 = peg$c113(s4, s10);\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c66(s4, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c114) {\n              s5 = peg$c114;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c115); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c67;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c116(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsevar() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 26,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseat_var();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedollar_var();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseplain_var();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 27,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseat_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c117(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 28,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c118(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseplain_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 29,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c119(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsekeyword() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 30,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c80) {\n      s0 = peg$c80;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c44) {\n        s0 = peg$c44;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c4) {\n          s0 = peg$c4;\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c48) {\n            s0 = peg$c48;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c49); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c13) {\n              s0 = peg$c13;\n              peg$currPos += 6;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7) === peg$c46) {\n                s0 = peg$c46;\n                peg$currPos += 7;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c7) {\n                  s0 = peg$c7;\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s0 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 4) === peg$c107) {\n                      s0 = peg$c107;\n                      peg$currPos += 4;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseannotation() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 31,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 12) === peg$c120) {\n      s0 = peg$c120;\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 11) === peg$c122) {\n        s0 = peg$c122;\n        peg$currPos += 11;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c123); }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 32,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    peg$silentFails++;\n    s3 = peg$currPos;\n    s4 = peg$parsekeyword();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s6 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        s4 = [s4, s5];\n        s3 = s4;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s3 === peg$FAILED) {\n      s2 = void 0;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 33,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s2 = peg$c21;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 34,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c126;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedocumentation() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 35,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c128;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s6 = peg$c128;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c129); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c128;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c128;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex_attributes() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 36,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c133) {\n          s3 = peg$c133;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = [];\n            if (peg$c135.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c136); }\n            }\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                if (peg$c135.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c136); }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = input.substring(s5, peg$currPos);\n            } else {\n              s5 = s6;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s7 = peg$c67;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 37,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s1 = peg$c126;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 36) {\n        s6 = peg$c126;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c127); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s6 = peg$c126;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s3 = peg$c126;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 38,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c138) {\n      s1 = peg$c138;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parsenewline();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsenewline();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c140) {\n        s1 = peg$c140;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c142) {\n          s5 = peg$c142;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s5 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c130); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s3 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsenewline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 39,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c144) {\n      s0 = peg$c144;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s0 = peg$c146;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c148;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c149); }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 40,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c150.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c151); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 41,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c150.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsesem() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 42,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c63;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c64); }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"],"sourceRoot":""}