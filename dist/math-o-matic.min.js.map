{"version":3,"sources":["webpack://MathOMatic/webpack/universalModuleDefinition","webpack://MathOMatic/webpack/bootstrap","webpack://MathOMatic/./src/exprs/Expr.ts","webpack://MathOMatic/./src/exprs/types.ts","webpack://MathOMatic/./src/exprs/Fun.ts","webpack://MathOMatic/./src/exprs/Schema.ts","webpack://MathOMatic/./src/exprs/Variable.ts","webpack://MathOMatic/./src/exprs/$Variable.ts","webpack://MathOMatic/./src/exprs/Parameter.ts","webpack://MathOMatic/./src/exprs/Funcall.ts","webpack://MathOMatic/./src/exprs/ObjectFun.ts","webpack://MathOMatic/./src/ExecutionContext.ts","webpack://MathOMatic/./src/UniversalCounter.ts","webpack://MathOMatic/./src/exprs/Nameable.ts","webpack://MathOMatic/./src/exprs/Tee.ts","webpack://MathOMatic/./src/Program.ts","webpack://MathOMatic/./src/PegInterface.ts","webpack://MathOMatic/./src/exprs/Reduction.ts","webpack://MathOMatic/./src/exprs/With.ts","webpack://MathOMatic/./src/ProofExplorer.ts","webpack://MathOMatic/./src/Counter.ts","webpack://MathOMatic/./src/Scope.ts","webpack://MathOMatic/./src/StackTrace.ts","webpack://MathOMatic/./build_tmp/parser.js","webpack://MathOMatic/./build_tmp/evalParser.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","EqualsPriority","Expr","doc","precedence","tex","type","trace","_id","next","error","andFuncalls","expandMetaCache","expandMetaInternal","obj","context","equals","getEqualsPriority","equalsInternal","hypotheses","length","isProvedInternal","hypnumMap","$Map","ctr","has","_type","num","expr","getProofInternal","toIndentedString","message","Error","prec","Array","console","log","my","normalizePrecedence","your","replace","regex","RegExp","join","match","capitalize","charCodeAt","commandName","toLowerCase","toUpperCase","substring","escapeTeX","id","args","ret","shouldConsolidate","g1","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","Type","TeeType","left","right","SimpleObjectType","FunctionalObjectType","FunctionalMetaType","from","to","super","indent","ObjectType","resolve","toTeXString","isFunctional","map","f","e","Fun","annotations","rettype","params","variable","isProved","ONE","isCallable","placeholders","types","push","selector","usedMacrosList","thisCall","fun","objCall","concat","Map","set","substitute","start","peek","$lines","def$s","forEach","$","lines","getProof","$num","Schema","schemaType","isProvedCache","some","expandMeta","_context","repeat","proved","toTeXStringWithId","Variable","sealed","canUse","ZERO","FOUR","tmp","toString","makeTeXName","$Variable","FIVE","Parameter","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","used","expanded","calleeExpanded","expandOnce","THREE","T","q","thisIsExpandable","objIsExpandable","every","_","schema","schemalines","funcallToTeXString","ObjectFun","makeTeX","ExecutionContext","usingList","includes","Tee","lef","TWO","leftlines","rightlines","flat","parser","evalParser","Program","scopeMap","filename","loader","loadingModules","scope","loadModuleInternal","loadingModuleIndex","indexOf","cycle","slice","fileUri","code","feed","pop","parse","line","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","hasSchema","addSchema","tee","reduction","schemacall","metavar","ktx","m42kup","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","getVariable","objectexpr","isParam","tex_attributes","tvo","tv","hasOwnVariable","with","funcall","hypnum","Number","has$","get$","getSchema","$v","def$","hasOwn$","add$","scopeRight","oldContext","using","subject","g","antecedents","as","Reduction","derefs","guess","antecedentTypes","requiredAntecedents","antecedentEqualsResults","fill","antecedentsExpanded","preFormatConsequent","rightEqualsResult","consequent","antecedentLinesList","antecedentNums","ref","of","subjectlines","subjectnum","reduced","pattern","instance","recurse","ptr","test","With","var","ProofExplorer","REPEAT","SE","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","ncols","exprToHtml","expand","tree","innertree","Math","max","html","tree2html","newleft","render","v","Counter","Scope","parent","typedefMap","defMap","schemaMap","child","h","values","hasOwnType","filter","hasOwnSchema","StackTrace","stack","element","column","peg$SyntaxError","expected","found","captureStackTrace","peg$subclass","ctor","constructor","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","end","other","description","hex","ch","describeExpected","j","descriptions","sort","describeFound","SyntaxError","peg$parse","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c1","imports","peg$c4","peg$c5","peg$literalExpectation","peg$c7","peg$c8","peg$c9","peg$c10","peg$c13","peg$c14","peg$c20","peg$c22","peg$c23","peg$c24","peg$classExpectation","peg$c27","peg$c28","peg$c29","peg$c30","peg$c31","head","peg$c33","peg$c34","peg$c36","peg$c37","peg$c38","peg$c39","peg$c43","peg$c44","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$c50","peg$c53","peg$c54","peg$c55","peg$c58","peg$c61","peg$c62","peg$c64","peg$c65","peg$c66","tail","peg$c67","peg$c68","peg$c71","peg$c72","peg$c73","peg$c74","peg$c77","peg$c78","peg$c79","peg$c80","peg$c81","peg$c82","peg$c83","as_","peg$c85","peg$c86","peg$c87","peg$c90","peg$c91","peg$c92","peg$c93","peg$c97","peg$c102","peg$c104","peg$c107","peg$c108","peg$c109","varname","varexpr","peg$c113","peg$c115","peg$c120","peg$c121","peg$c122","peg$c123","peg$c124","peg$c125","peg$c126","peg$c127","peg$c128","peg$c129","peg$c130","peg$c132","b","peg$c133","peg$c134","peg$c135","peg$c136","peg$c139","peg$c141","peg$c142","peg$c143","peg$c145","peg$c147","peg$c149","peg$c150","peg$c151","peg$currPos","peg$savedPos","peg$posDetailsCache","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$resultsCache","startRule","peg$computeLocation","ignoreCase","peg$computePosDetails","pos","details","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","peg$buildStructuredError","s0","s2","s3","s4","s5","cached","nextPos","result","peg$parse_","peg$parseimport","peg$parseline","peg$parsetypedef","peg$parsedefv","peg$parsedefun","peg$parsedefschema","s1","substr","peg$parse__","peg$parseident","peg$parsesem","s6","s7","s9","peg$parsedocumentation","peg$parseftype","s8","s11","peg$parsetex","peg$parsetype","peg$parseobjectexpr","peg$c17","peg$parsedefparam","peg$parsedefschemaparam","s10","s12","charAt","s13","s15","s16","s17","s19","peg$parsetex_attributes","peg$c42","s14","s18","defdollars","peg$parseannotation","peg$c56","peg$parsedefdollar","peg$parseexpr_internal_3","peg$parsereduction","s20","peg$parseexpr_internal_2","peg$parseschemacall","peg$parsevar","peg$c84","peg$parsefuncall","peg$parsefunexpr","peg$parseschemaexpr","foo","peg$parseexpr_internal_1","peg$c98","peg$parsetee","peg$c105","peg$parsewith","s21","s23","peg$parsedollar_ident","peg$parsestype","peg$parseat_var","peg$parseat_ident","peg$parsedollar_var","peg$parseplain_var","peg$parsekeyword","peg$parsecomment","peg$parsenewline","evaluable","peg$parseevaluable","peg$parseevaluable_internal"],"mappings":"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","file":"math-o-matic.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MathOMatic\"] = factory();\n\telse\n\t\troot[\"MathOMatic\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport UniversalCounter from \"../UniversalCounter\";\nimport Fun from \"./Fun\";\nimport { Type } from \"./types\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable (primitive) */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** Variable (macro) */\n\tFOUR,\n\t/** $Variable, Reduction */\n\tFIVE\n}\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Expr {\n\t\n\tpublic readonly _id: number;\n\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic readonly trace: StackTrace;\n\tpublic precedence: Precedence;\n\n\tpublic readonly type: Type;\n\tprivate expandMetaCache: Expr;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (doc: string, precedence: Precedence, tex: string, type: Type, trace: StackTrace) {\n\t\tthis._id = UniversalCounter.next();\n\t\tthis.doc = doc;\n\t\tthis.precedence = precedence;\n\t\tthis.tex = tex;\n\n\t\tif (!type) throw Expr.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\n\t\tthis.trace = trace;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr>): Expr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic expandMeta(andFuncalls: boolean): Expr {\n\t\tif (this.expandMetaCache) return this.expandMetaCache;\n\t\treturn this.expandMetaCache = this.expandMetaInternal(andFuncalls);\n\t}\n\n\tprotected abstract expandMetaInternal(andFuncalls: boolean): Expr;\n\n\t/**\n\t * \n\t * @return 같지 않으면 `false`. 같으면 같음을 보이는 데 사용한 매크로들의 목록.\n\t */\n\tpublic equals(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\t// console.log(`${this}\\n\\n${obj}`);\n\t\t// var ret = (() => {\n\t\t\n\t\tif (this === obj) return [];\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority(context) > this.getEqualsPriority(context))\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\n\t\t// })();\n\t\t// console.log(`${this}\\n\\n${obj}\\n\\nresult:`, ret);\n\t\t// return ret;\n\t}\n\n\t/**\n\t * \n\t * @return 같지 않으면 `false`. 같으면 같음을 보이는 데 사용한 매크로들의 목록.\n\t */\n\tprotected abstract equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false;\n\n\tprotected abstract getEqualsPriority(context: ExecutionContext): EqualsPriority;\n\n\tpublic isProved(hypotheses?: Expr[]): boolean {\n\t\thypotheses = hypotheses || [];\n\n\t\tfor (var i = 0; i < hypotheses.length; i++) {\n\t\t\tif (hypotheses[i] == this) return true;\n\t\t}\n\n\t\treturn this.isProvedInternal(hypotheses);\n\t}\n\n\tprotected abstract isProvedInternal(hypotheses: Expr[]): boolean;\n\n\tpublic getProof(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (hypnumMap.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: hypnumMap.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: $Map.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\treturn this.getProofInternal(hypnumMap, $Map, ctr, root);\n\t}\n\n\tprotected abstract getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot?: boolean): ProofType[];\n\t\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Expr.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec || false;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence): boolean {\n\t\tvar my = Expr.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Expr.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic static escapeTeX(s: string): string {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static makeTeXName(name: string): string {\n\t\tvar alphabet = [\n\t\t\t\"alpha\", \"beta\", \"gamma\", \"delta\",\n\t\t\t\"epsilon\", \"zeta\", \"eta\", \"theta\",\n\t\t\t\"iota\", \"kappa\", \"lambda\", \"mu\",\n\t\t\t\"nu\", \"xi\", \"omicron\", \"pi\",\n\t\t\t\"rho\", \"sigma\", \"tau\", \"upsilon\",\n\t\t\t\"phi\", \"chi\", \"psi\", \"omega\"\n\t\t];\n\n\t\tvar regex = new RegExp(`^(?:([a-z])|(${alphabet.join('|')}))([0-9]*)$`, 'i');\n\t\tvar match = name.match(regex);\n\n\t\tif (match) {\n\t\t\tvar letter = (() => {\n\t\t\t\tif (match[1]) return match[1];\n\t\t\t\t\n\t\t\t\tvar capitalize = match[2].charCodeAt(0) <= 'Z'.charCodeAt(0);\n\t\t\t\tvar commandName = match[2].toLowerCase();\n\n\t\t\t\tif (capitalize) {\n\t\t\t\t\tcommandName = commandName[0].toUpperCase() + commandName.substring(1);\n\t\t\t\t}\n\n\t\t\t\treturn '\\\\' + commandName;\n\t\t\t})();\n\n\t\t\tvar subscript = (() => {\n\t\t\t\tif (!match[3]) return '';\n\t\t\t\tif (match[3].length == 1) return '_' + match[3];\n\t\t\t\treturn `_{${match[3]}}`;\n\t\t\t})();\n\n\t\t\treturn letter + subscript;\n\t\t}\n\n\t\tif (name.length == 1) {\n\t\t\treturn Expr.escapeTeX(name);\n\t\t}\n\n\t\treturn `\\\\mathrm{${Expr.escapeTeX(name)}}`;\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport UniversalCounter from \"../UniversalCounter\";\nimport Nameable from \"./Nameable\";\n\nexport abstract class Type {\n\n\tpublic readonly _id: number;\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\n\tconstructor (doc: string, trace: StackTrace) {\n\t\tthis._id = UniversalCounter.next();\n\t\tthis.doc = doc;\n\t\tthis.trace = trace;\n\t}\n\n\tpublic abstract resolve(): Type;\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number): string;\n\n\tpublic abstract isFunctional(): boolean;\n\n\tpublic equals(t: Type): boolean {\n\t\tif (this === t) return true;\n\n\t\tif (!(t instanceof Type)) return false;\n\n\t\tif ((this instanceof TeeType) != (t instanceof TeeType)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this instanceof TeeType && t instanceof TeeType) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\treturn this.right.equals(t.right);\n\t\t}\n\n\t\tif (this instanceof SimpleObjectType && this.expr) {\n\t\t\treturn this.expr.equals(t);\n\t\t}\n\n\t\tif (t instanceof SimpleObjectType && t.expr) {\n\t\t\treturn this.equals(t.expr);\n\t\t}\n\n\t\tif (this instanceof SimpleObjectType || t instanceof SimpleObjectType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((this instanceof FunctionalObjectType || this instanceof FunctionalMetaType)\n\t\t\t\t&& (t instanceof FunctionalObjectType || t instanceof FunctionalMetaType)) {\n\t\t\tif (this.from.length != t.from.length) return false;\n\n\t\t\tfor (var i = 0; i < this.from.length; i++) {\n\t\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\t\t\t}\n\n\t\t\treturn this.to.equals(t.to);\n\t\t}\n\n\t\tthrow Error('Unknown type format');\n\t}\n}\n\ninterface TeeTypeArgumentType {\n\tleft: Type[];\n\tright: Type;\n}\n\nexport class TeeType extends Type {\n\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\n\tconstructor ({left, right}: TeeTypeArgumentType, trace: StackTrace) {\n\t\tsuper(null, trace);\n\n\t\tif (!left || !right) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn `[${this.left.join(', ')} |- ${this.right}]`;\n\t}\n\n\tpublic resolve(): Type {\n\t\treturn this;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\treturn false;\n\t}\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfrom: ObjectType[];\n\tto: Type;\n}\n\nexport class FunctionalMetaType extends Type {\n\t\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: Type;\n\n\tconstructor ({from, to}: FunctionalMetaTypeArgumentType, trace: StackTrace) {\n\t\tsuper(null, trace);\n\n\t\tif (!from || !to) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic resolve(): FunctionalMetaType {\n\t\treturn this;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport abstract class ObjectType extends Type {\n\n\tconstructor (doc: string, trace: StackTrace) {\n\t\tsuper(doc, trace);\n\t}\n\n\tpublic abstract resolve(): ObjectType;\n\n\tpublic abstract toTeXString(root?: boolean): string;\n}\n\ninterface SimpleObjectTypeArgumentType {\n\tdoc: string;\n\tname: string;\n\texpr: ObjectType;\n}\n\nexport class SimpleObjectType extends ObjectType implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: ObjectType;\n\n\tconstructor ({doc, name, expr}: SimpleObjectTypeArgumentType, trace: StackTrace) {\n\t\tsuper(doc, trace);\n\n\t\tif (!name) throw Error('duh');\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.expr ? this.expr.resolve() : this;\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn this.name;\n\t}\n\n\tpublic toTeXString(root?: boolean): string {\n\t\tvar name = `\\\\href{#type-${this.name}}{\\\\mathsf{${this.name}}}`;\n\n\t\tif (root && this.expr) {\n\t\t\treturn name + `\\\\coloneqq${this.expr.toTeXString()}`;\n\t\t}\n\n\t\treturn name;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\tif (this.expr) return this.expr.isFunctional();\n\n\t\treturn false;\n\t}\n}\n\ninterface FunctionalObjectTypeArgumentType {\n\tfrom: ObjectType[];\n\tto: ObjectType;\n}\n\nexport class FunctionalObjectType extends ObjectType {\n\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor ({from, to}: FunctionalObjectTypeArgumentType, trace: StackTrace) {\n\t\tsuper(null, trace);\n\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\n\tpublic resolve(): FunctionalObjectType {\n\t\treturn new FunctionalObjectType({\n\t\t\tfrom: this.from.map(f => f.resolve()),\n\t\t\tto: this.to.resolve()\n\t\t}, this.trace);\n\t}\n\n\tpublic toIndentedString(indent: number): string {\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean): string {\n\t\treturn `\\\\left[${this.from.map(e => e.toTeXString()).join('\\\\times ')}`\n\t\t\t+ ` \\\\to ${this.to.toTeXString()}\\\\right]`;\n\t}\n\n\tpublic isFunctional(): boolean {\n\t\treturn true;\n\t}\n}","import Nameable from './Nameable';\nimport Expr, { EqualsPriority, Precedence } from './Expr';\n\nexport default abstract class Fun extends Expr implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly name: string;\n\tpublic readonly params: Parameter[];\n\tpublic readonly expr: Expr;\n\n\tconstructor ({doc, precedence, tex, annotations, rettype, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Expr.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (rettype && expr) {\n\t\t\tif (!rettype.equals(expr.type)) {\n\t\t\t\tthrow Expr.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (!rettype && !expr) {\n\t\t\tthrow Expr.error('Cannot guess the return type of a primitive fun', trace);\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\tdoc, precedence, tex,\n\t\t\tnew ((rettype || expr.type) instanceof ObjectType ? FunctionalObjectType : FunctionalMetaType)({\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: rettype || expr.type as any\n\t\t\t}, trace),\n\t\t\ttrace\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\t/**\n\t * 매개변수의 개수.\n\t */\n\tget length(): number {\n\t\treturn this.params.length;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.expr && this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!this.isCallable(context)\n\t\t\t\t&& !(obj instanceof Fun && obj.isCallable(context))) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as FunctionalObjectType | FunctionalMetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Parameter({\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i,\n\t\t\t\tselector: null\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar usedMacrosList = [];\n\n\t\tvar thisCall = this.isCallable(context)\n\t\t\t? (this.name && usedMacrosList.push(this), this.call(placeholders))\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.isCallable(context)\n\t\t\t? (obj.name && usedMacrosList.push(obj), obj.call(placeholders))\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\tvar ret = thisCall.equals(objCall, context);\n\t\treturn ret && ret.concat(usedMacrosList);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr[]): Expr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Arguments length mismatch');\n\t\t}\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tif (!this.params[i].type.equals(args[i].type)) {\n\t\t\t\tthrow Error('Illegal type');\n\t\t\t}\n\t\t}\n\n\t\tvar map: Map<Variable, Expr> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (this instanceof Schema && this.name && !root) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RS',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!this.expr) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\t$Map = new Map($Map);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar $lines: ProofType[] = [];\n\t\t\n\t\tif (this instanceof Schema) {\n\t\t\tthis.def$s.forEach($ => {\n\t\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t$Map.set($, $num);\n\t\t\t});\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'V',\n\t\t\t$lines,\n\t\t\tlines: this.expr.getProof(hypnumMap, $Map, ctr),\n\t\t\tparams: this.params,\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\nimport Counter from '../Counter';\nimport { ProofType } from '../ProofType';\nimport Schema from './Schema';\nimport Parameter from './Parameter';\nimport { ObjectType, FunctionalObjectType, FunctionalMetaType, Type } from './types';\n\ninterface FunArgumentType {\n\tdoc: string;\n\tprecedence: Precedence;\n\ttex: string;\n\tannotations: string[];\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr;\n}","import Fun from \"./Fun\";\n\nexport type SchemaType = 'axiom' | 'theorem' | 'schema';\n\nexport default class Schema extends Fun {\n\n\tpublic readonly schemaType: SchemaType;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, schemaType, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Expr.error('wut', trace);\n\t\t}\n\n\t\tif (schemaType != 'schema' && !name) {\n\t\t\tthrow Expr.error(`wut`, trace);\n\t\t}\n\n\t\tvar precedence = name ? false : Expr.PREC_FUNEXPR;\n\n\t\tsuper({doc, precedence, tex, annotations, rettype: null, name, params, expr}, trace);\n\t\t\n\t\tthis.schemaType = schemaType;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\n\t\tif (schemaType == 'theorem') {\n\t\t\tif (!this.isProved()) {\n\t\t\t\tthrow Expr.error(`Schema ${name} is marked as a theorem but it is not proved`, trace);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\tif (this.isProvedCache) return true;\n\n\t\tif (hypotheses.length == 0 && typeof this.isProvedCache == 'boolean') {\n\t\t\treturn this.isProvedCache;\n\t\t}\n\n\t\tvar ret = this.schemaType == 'axiom' || this.expr.isProved(hypotheses);\n\t\tif (!hypotheses.length) this.isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = 'def-' + this.name,\n\t\t\tproved = this.isProved() ? 'p' : 'np';\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Expr.escapeTeX(this.name)}}}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Expr.escapeTeX(this.name)}}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Expr.PREC_COMMA) + (e.selector ? `: \\\\texttt{@${e.selector}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr, { Precedence } from \"./Expr\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport Parameter from \"./Parameter\";\nimport { ObjectType } from \"./types\";\n\ninterface SchemaArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tschemaType: SchemaType;\n\tname: string;\n\tparams: Parameter[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Expr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Fun from './Fun';\nimport Expr, { EqualsPriority, Precedence } from './Expr';\nimport Nameable from './Nameable';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tsealed: boolean;\n\ttype: ObjectType;\n\tname: string;\n\texpr: Expr;\n}\n\nexport default class Variable extends Expr implements Nameable {\n\n\tpublic readonly sealed: boolean;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr | null;\n\n\tconstructor ({doc, tex, sealed, type, name, expr}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(doc, false, tex, type, trace);\n\t\t\n\t\tif (typeof name != 'string')\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Expr.error('Cannot seal a primitive fun', trace);\n\t\t}\n\n\t\tif (expr && !type.equals(expr.type)) {\n\t\t\tthrow Expr.error(`Expression type ${expr.type} failed to match the type ${type} of variable ${name}`, trace);\n\t\t}\n\n\t\tthis.sealed = sealed;\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (map.has(this)) return map.get(this);\n\n\t\t// 매크로 변수는 스코프 밖에서 보이지 않으므로 치환될 것을 갖지 않는다는\n\t\t// 생각이 들어 있다.\n\t\treturn this;\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\treturn this.expr && (!this.sealed || context.canUse(this))\n\t\t\t? EqualsPriority.FOUR\n\t\t\t: EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!this.expr) return false;\n\n\t\tif (!this.sealed || context.canUse(this)) {\n\t\t\tvar tmp = this.expr.equals(obj, context);\n\t\t\tif (!tmp) return tmp;\n\t\t\treturn tmp.push(this), tmp;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\treturn [{\n\t\t\t_type: 'NP',\n\t\t\tctr: ctr.next(),\n\t\t\texpr: this\n\t\t}];\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this instanceof Parameter ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex || Expr.makeTeXName(this.name);\n\t\t\n\t\tvar expr = root && this.expr\n\t\t\t? `\\\\coloneqq ${this.expr.toTeXString(Expr.PREC_COLONEQQ)}`\n\t\t\t: '';\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}${expr}`;\n\t}\n}\n\nimport Parameter from './Parameter';\nimport { ObjectType } from './types';\n","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Fun from \"./Fun\";\nimport Expr, { EqualsPriority, Precedence } from \"./Expr\";\nimport Nameable from \"./Nameable\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Expr;\n}\n\nexport default class $Variable extends Expr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(null, false, null, expr.type, trace);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tif (!$Map.has(this)) {\n\t\t\tthrow Error(`${this.name} is not defined`);\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'R',\n\t\t\tctr: ctr.next(),\n\t\t\tnum: $Map.get(this),\n\t\t\texpr: this.expr\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Expr.escapeTeX(this.name)}}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport { Precedence } from \"./Expr\";\nimport { ObjectType } from \"./types\";\nimport Variable from \"./Variable\";\n\ninterface ParameterArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tselector: string;\n}\n\nexport default class Parameter extends Variable {\n\n\tpublic readonly selector: string;\n\n\tconstructor ({doc, tex, type, name, selector}: ParameterArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, sealed: false, type, name, expr: null}, trace);\n\n\t\tthis.selector = selector;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import Expr, { EqualsPriority, Precedence } from './Expr';\n\ninterface FuncallArgumentType {\n\tfun: Expr;\n\targs: Expr[];\n}\n\nexport default class Funcall extends Expr {\n\t\n\tpublic readonly fun: Expr;\n\tpublic readonly args: Expr[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (!fun.type.isFunctional()) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Expr.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Expr).some(e => !e))\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as FunctionalObjectType | FunctionalMetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Expr.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Expr.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(null, false, null, resolvedType.to, trace);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.fun.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Expr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Variable && callee.expr) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): {expanded: Expr, used: (Fun | Variable)[]} {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar used: (Fun | Variable)[] = [];\n\n\t\tvar callee: Expr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Variable && callee.expr) {\n\t\t\tused.push(callee);\n\n\t\t\treturn {\n\t\t\t\texpanded: new Funcall({\n\t\t\t\t\tfun: callee.expr,\n\t\t\t\t\targs: this.args\n\t\t\t\t}, this.trace),\n\t\t\t\tused\n\t\t\t};\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\tvar calleeExpanded = callee.expandOnce(context);\n\t\t\tused.push(...calleeExpanded.used);\n\t\t\treturn {\n\t\t\t\texpanded: new Funcall({\n\t\t\t\t\tfun: calleeExpanded.expanded,\n\t\t\t\t\targs: this.args\n\t\t\t\t}, this.trace),\n\t\t\t\tused\n\t\t\t};\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tif (callee.name) used.push(callee);\n\n\t\treturn {\n\t\t\texpanded: callee.call(this.args),\n\t\t\tused\n\t\t};\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\t\t\t\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar usedMacrosList: (Fun | Variable)[] = [],\n\t\t\tT = (q: (Fun | Variable)[] | false) => { if (q) usedMacrosList.push(...q); return q; };\n\n\t\tif (this.fun == obj.fun || T(this.fun.equals(obj.fun, context))) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!T(this.args[i].equals(obj.args[i], context))) return false;\n\t\t\t}\n\n\t\t\treturn usedMacrosList;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\tvar {expanded, used} = obj.expandOnce(context);\n\t\t\tvar ret = this.equals(expanded, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!T(this.args[i].equals(obj.args[i], context))) return false;\n\t\t\t\t}\n\n\t\t\t\treturn usedMacrosList;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn T(this.args[i].equals(obj.args[i], context));\n\t\t\t})) {\n\t\t\t\treturn usedMacrosList;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar {expanded, used} = obj.expandOnce(context);\n\t\tvar ret = this.equals(expanded, context);\n\t\treturn ret && ret.concat(used);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\n\t\tif (hypnumMap.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'SE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: hypnumMap.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'SE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: $Map.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (this.fun instanceof Schema && this.fun.name) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!(this.fun instanceof Schema)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tvar schemalines = this.fun.getProof(hypnumMap, $Map, ctr);\n\n\t\treturn [\n\t\t\t...schemalines,\n\t\t\t{\n\t\t\t\t_type: 'SE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#def-${this.fun.name}}{\\\\htmlData{proved=${this.fun.isProved() ? 'p' : 'np'}}{\\\\textsf{${Expr.escapeTeX(this.fun.name)}}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Expr.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Expr.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: Expr.makeTeXName(this.fun.name)\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}\n\nimport Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Fun from './Fun';\nimport { isNameable } from './Nameable';\nimport ObjectFun from './ObjectFun';\nimport Schema from './Schema';\nimport Variable from './Variable';\nimport { FunctionalMetaType, FunctionalObjectType } from './types';\n","import Fun from \"./Fun\";\n\nexport default class ObjectFun extends Fun {\n\n\tpublic readonly sealed: boolean;\n\t\n\tconstructor ({doc, precedence, tex, annotations, sealed, rettype, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, precedence, tex, annotations, rettype, name, params, expr}, trace);\n\n\t\tif (sealed && !expr) {\n\t\t\tthrow Expr.error('Cannot seal a primitive fun', trace);\n\t\t}\n\n\t\tthis.sealed = sealed;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\tprecedence: false,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\tprecedence: false,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.canUse(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Expr.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}{${Expr.makeTeXName(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Expr.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Expr.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Expr.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${Expr.makeTeXName(this.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}\n\nimport ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr, { Precedence } from \"./Expr\";\nimport Variable from \"./Variable\";\nimport Parameter from \"./Parameter\";\nimport { Type, ObjectType } from \"./types\";\n\ninterface ObjectFunArgumentType {\n\tdoc: string;\n\tprecedence: number | false;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr;\n}","import ObjectFun from \"./exprs/ObjectFun\";\nimport Variable from \"./exprs/Variable\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: (Variable | ObjectFun)[];\n\n\tconstructor (usingList?: (Variable | ObjectFun)[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic canUse(fun: Variable | ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","var n: number = 0;\n\nexport default {\n\tpeek(): number {\n\t\treturn n;\n\t},\n\tnext(): number {\n\t\treturn ++n;\n\t}\n};","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Fun from './Fun';\nimport Expr, { EqualsPriority, Precedence } from './Expr';\nimport { ObjectType, Type, TeeType } from './types';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Expr[];\n\tdef$s: $Variable[];\n\tright: Expr;\n}\n\nexport default class Tee extends Expr {\n\n\tpublic readonly left: Expr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Expr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof Type;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof Type)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tsuper(null, false, null, new TeeType({\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}, trace), trace);\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Expr.PREC_COMMA;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.right.isProved(hypotheses.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft,\n\t\t\tdef$s: null,\n\t\t\tright\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, def$s: null, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\thypnumMap = new Map(hypnumMap);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar leftlines: ProofType[] = this.left.map(l => {\n\t\t\thypnumMap.set(l, ctr.next());\n\t\t\t\n\t\t\treturn {\n\t\t\t\t_type: 'H',\n\t\t\t\tctr: ctr.peek(),\n\t\t\t\texpr: l\n\t\t\t};\n\t\t});\n\n\t\t$Map = new Map($Map);\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [{\n\t\t\t_type: 'T',\n\t\t\tleftlines: leftlines as any,\n\t\t\trightlines: $lines.concat(this.right.getProof(hypnumMap, $Map, ctr)),\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Expr.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","import { SimpleObjectType } from './exprs/types';\nimport PegInterface from './PegInterface';\nimport { EvaluableObject, ImportOrLineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\nlet parser: ParserType, evalParser: EvalParserType;\n\nif (process.env.__webpack__) {\n\tparser = require('../build_tmp/parser');\n\tevalParser = require('../build_tmp/evalParser');\n} else {\n\tlet fs = require('fs');\n\tlet path = require('path');\n\tlet pegjs = require('pegjs');\n\n\tlet grammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n\tparser = pegjs.generate(grammar, {cache: true});\n\tevalParser = pegjs.generate(grammar, {cache: true, allowedStartRules: ['evaluable']});\n}\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport type ParserType = {\n\tparse: (code: string) => ImportOrLineObject[];\n};\n\nexport type EvalParserType = {\n\tparse: (code: string) => EvaluableObject;\n}\n\nexport default class Program {\n\t\n\tpublic scope: Scope;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\t\n\tpublic static parser: ParserType = parser;\n\tpublic static evalParser: EvalParserType = evalParser;\n\n\t/**\n\t * A temporary list used by {@link loadModuleInternal} method.\n\t * \n\t * This is the list of filenames of the files with a temporary mark during a\n\t * depth-first topological sort. Note that the file is considered to be\n\t * marked with a permanent mark if {@code this.scopeMap} has the filename.\n\t * \n\t * See https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search.\n\t */\n\tprivate loadingModules: string[];\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tthis.loadingModules = [];\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\t// the file has a permanent mark\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar loadingModuleIndex = this.loadingModules.indexOf(filename);\n\n\t\t// the file has a temporary mark\n\t\tif (loadingModuleIndex >= 0) {\n\t\t\tif (loadingModuleIndex == this.loadingModules.length - 1) {\n\t\t\t\tthrow Error(`Cannot self import (${filename})`);\n\t\t\t}\n\n\t\t\tvar cycle = this.loadingModules.slice(loadingModuleIndex).concat(filename);\n\n\t\t\tthrow Error(`Circular import detected (${cycle.join(' -> ')}). Sadly, circular import is currently not supported.`);\n\t\t}\n\n\t\t// mark the file with a temporary mark\n\t\tthis.loadingModules.push(filename);\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\n\t\tawait this.feed(code, scope, loader);\n\n\t\t// remove temporary mark\n\t\tif (this.loadingModules.pop() != filename) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\t// mark the file with a permanent mark\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(code: string, scope: Scope=this.scope, loader: LoaderType) {\n\t\tvar lines = parser.parse(code);\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope) as SimpleObjectType;\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(code: string) {\n\t\tvar line = evalParser.parse(code);\n\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx, m42kup) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx, m42kup);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './exprs/$Variable';\nimport Fun from './exprs/Fun';\nimport Funcall from './exprs/Funcall';\nimport Expr from './exprs/Expr';\nimport ObjectFun from './exprs/ObjectFun';\nimport Parameter from './exprs/Parameter';\nimport Reduction from './exprs/Reduction';\nimport Schema, { SchemaType } from './exprs/Schema';\nimport Tee from './exprs/Tee';\nimport { ObjectType, SimpleObjectType } from './exprs/types';\nimport Variable from './exprs/Variable';\nimport With from './exprs/With';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, ObjectExprObject, FuncallObject, FunexprObject, ExprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject, WithObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar expr: ObjectType = obj.expr ? scope.getType(typeObjToNestedArr(obj.expr)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\n\t\tif (expr) {\n\t\t\treturn new SimpleObjectType({\n\t\t\t\tdoc,\n\t\t\t\tname,\n\t\t\t\texpr\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new SimpleObjectType({\n\t\t\tdoc,\n\t\t\tname,\n\t\t\texpr: null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\tvar expr = obj.expr ? PI.objectexpr(obj.expr, scope) : null;\n\n\t\tif (obj.isParam) {\n\t\t\treturn new Parameter({\n\t\t\t\tdoc: obj.doc,\n\t\t\t\ttex: obj.tex,\n\t\t\t\ttype,\n\t\t\t\tname: obj.name,\n\t\t\t\tselector: obj.selector || null\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new Variable({\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex,\n\t\t\tsealed: !!obj.sealed,\n\t\t\ttype,\n\t\t\tname: obj.name,\n\t\t\texpr: expr || null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('fun', obj._type == 'defun' ? obj.name : '<anonymous>', obj.location);\n\n\t\tvar doc = null,\n\t\t\tprecedence : false | number = false,\n\t\t\ttex = null,\n\t\t\tsealed = false,\n\t\t\trettype: ObjectType = null,\n\t\t\tname = null,\n\t\t\texpr = null;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tdoc = obj.doc;\n\t\t\tprecedence = obj.tex_attributes.precedence;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t\t\n\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype))) {\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\t\t\t}\n\n\t\t\trettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\t\t\tname = obj.name;\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tif (obj.expr) {\n\t\t\texpr = PI.objectexpr(obj.expr, scope);\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, rettype, name, params, expr, doc, precedence, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.objectexpr(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.objectexpr(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static expr(obj: ExprObject, parentScope: Scope, context: ExecutionContext): Expr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var', 'with'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tcase 'with':\n\t\t\t\treturn PI.with(obj, scope, context);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static objectexpr(obj: ObjectExprObject, parentScope: Scope): Expr {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Expr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static with(obj: WithObject, parentScope: Scope, context: ExecutionContext): With {\n\t\tif (obj._type != 'with') {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('with', null, obj.location);\n\n\t\tvar tv = PI.variable(obj.with, scope);\n\n\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\n\t\tif (!(tv instanceof Variable)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tscope.addVariable(tv);\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.expr(obj.expr, scope, context);\n\n\t\treturn new With({\n\t\t\tvariable: tv,\n\t\t\tdef$s,\n\t\t\texpr\n\t\t}, scope.trace);\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.expr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.expr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.expr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar schemaType: SchemaType = 'schema',\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\tschemaType = obj.schemaType;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: (Variable | ObjectFun)[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!fun.expr) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.expr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, tex: null, annotations, schemaType, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.objectexpr(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.expr(obj.subject, scope, context);\n\n\t\tvar args = !obj.args\n\t\t\t? null\n\t\t\t: obj.args.map(g => {\n\t\t\t\treturn g && PI.objectexpr(g, scope);\n\t\t\t});\n\n\t\tvar antecedents = obj.antecedents.map(obj => {\n\t\t\treturn PI.expr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.expr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\targs,\n\t\t\tantecedents,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Fun from \"./Fun\";\nimport Funcall from \"./Funcall\";\nimport Expr, { EqualsPriority, Precedence } from \"./Expr\";\nimport { isNameable } from \"./Nameable\";\nimport Parameter from \"./Parameter\";\nimport Schema from \"./Schema\";\nimport Tee from \"./Tee\";\nimport { FunctionalObjectType, FunctionalMetaType, TeeType } from \"./types\";\nimport Variable from \"./Variable\";\n\ninterface ReductionArgumentType {\n\tantecedents: Expr[];\n\tsubject: Expr;\n\targs: (Expr | null)[];\n\tas: Expr;\n}\n\nexport default class Reduction extends Expr {\n\t\n\tpublic readonly antecedents: Expr[];\n\tpublic readonly requiredAntecedents: Expr[];\n\tpublic readonly subject: Expr;\n\tpublic readonly args: (Expr | null)[];\n\tpublic readonly preFormatConsequent: Expr;\n\tpublic readonly consequent: Expr;\n\tprivate readonly antecedentEqualsResults: (Fun | Variable)[][];\n\tprivate readonly rightEqualsResult: (Fun | Variable)[];\n\n\tconstructor ({antecedents, subject, args, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (args) {\n\t\t\tlet resolvedType = subject.type.resolve() as FunctionalObjectType | FunctionalMetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = args.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Expr.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Expr.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(args && args[i]) && !p.selector) {\n\t\t\t\t\tthrow Expr.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (args && args[i]) return args[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false);\n\n\t\t\t\tif (!(tee instanceof Tee)) throw Error('wut');\n\t\n\t\t\t\treturn Reduction.guess(\n\t\t\t\t\tp.selector,\n\t\t\t\t\ttee.left, antecedents,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (args) {\n\t\t\tthrow Expr.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof TeeType))\n\t\t\tthrow Expr.error('Subject is not reducible', trace);\n\t\n\t\tif (!(antecedents instanceof Array)\n\t\t\t\t|| antecedents.map(e => e instanceof Expr).some(e => !e))\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tantecedentTypes = antecedents.map(e => e.type);\n\n\t\tif (paramTypes.length != antecedentTypes.length)\n\t\t\tthrow Expr.error(`Invalid number of arguments (expected ${paramTypes.length}): ${antecedentTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(antecedentTypes[i]))\n\t\t\t\tthrow Expr.error(`Illegal argument type (expected ${paramTypes[i]}): ${antecedentTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(null, false, null, subject.type.right, trace);\n\n\t\tthis.subject = subject;\n\t\tthis.antecedents = antecedents;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Expr.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.requiredAntecedents = tee.left;\n\t\tthis.antecedentEqualsResults = Array(tee.left.length).fill(0).map(() => []);\n\n\t\tvar antecedentsExpanded = antecedents.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tvar tmp = tee.left[i].equals(antecedentsExpanded[i], context);\n\t\t\tif (!tmp) {\n\t\t\t\tthrow Expr.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${antecedents[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.antecedentEqualsResults[i] = tmp;\n\t\t}\n\n\t\tthis.preFormatConsequent = tee.right;\n\n\t\tif (as) {\n\t\t\tvar tmp = tee.right.equals(as, context);\n\t\t\tif (!tmp) {\n\t\t\t\tthrow Expr.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.rightEqualsResult = tmp;\n\t\t\tthis.consequent = as;\n\t\t} else {\n\t\t\tthis.consequent = tee.right;\n\t\t}\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.subject.isProved(hypotheses)\n\t\t\t&& this.antecedents.every(l => l.isProved(hypotheses));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\treturn this.consequent.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\treturn this.consequent.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\treturn this.consequent.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Expr, number>,\n\t\t\t$Map: Map<Expr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tvar antecedentLinesList: ProofType[][] = [];\n\t\tvar antecedentNums: (number | [number, number])[] = this.antecedents.map((l, i) => {\n\t\t\tif (!this.antecedentEqualsResults[i].length) {\n\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\t\tif ($Map.has(l)) return $Map.get(l);\n\t\t\t}\n\n\t\t\tvar ref = hypnumMap.has(l)\n\t\t\t\t? hypnumMap.get(l)\n\t\t\t\t: $Map.has(l)\n\t\t\t\t\t? $Map.get(l)\n\t\t\t\t\t: null;\n\t\t\tvar lines = ref ? [] : l.getProof(hypnumMap, $Map, ctr);\n\n\t\t\tif (this.antecedentEqualsResults[i].length) {\n\t\t\t\tlines.push({\n\t\t\t\t\t_type: 'bydef',\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\tref: ref || lines[lines.length - 1].ctr,\n\t\t\t\t\texpr: this.requiredAntecedents[i],\n\t\t\t\t\tof: this.antecedentEqualsResults[i]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tantecedentLinesList.push(lines);\n\t\t\treturn this.antecedentEqualsResults[i].length\n\t\t\t\t? ctr.peek()\n\t\t\t\t: lines[lines.length - 1].ctr;\n\t\t});\n\t\t\n\t\tvar args: Expr[] = null;\n\t\tvar subjectlines: ProofType[] = [];\n\t\tvar subjectnum = hypnumMap.get(this.subject)\n\t\t\t|| $Map.get(this.subject)\n\t\t\t|| (\n\t\t\t\tthis.subject instanceof Funcall && $Map.has(this.subject.fun)\n\t\t\t\t\t? (args = this.subject.args, $Map.get(this.subject.fun))\n\t\t\t\t\t: false\n\t\t\t)\n\t\t\t|| (\n\t\t\t\t(s => {\n\t\t\t\t\treturn s instanceof Fun && s.name\n\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name;\n\t\t\t\t})(this.subject)\n\t\t\t\t\t? this.subject\n\t\t\t\t\t: (subjectlines = this.subject.getProof(hypnumMap, $Map, ctr))[subjectlines.length-1].ctr\n\t\t\t);\n\n\t\tvar ret: ProofType[] = [\n\t\t\t...antecedentLinesList.flat(),\n\t\t\t...subjectlines\n\t\t];\n\n\t\tif (this.rightEqualsResult && this.rightEqualsResult.length) {\n\t\t\tret.push(\n\t\t\t\t{\n\t\t\t\t\t_type: 'TE',\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\tsubject: subjectnum,\n\t\t\t\t\targs,\n\t\t\t\t\tantecedents: antecedentNums,\n\t\t\t\t\treduced: this.preFormatConsequent\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t_type: 'bydef',\n\t\t\t\t\tref: ctr.peek(),\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\texpr: this.consequent,\n\t\t\t\t\tof: this.rightEqualsResult\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tret.push({\n\t\t\t\t_type: 'TE',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tsubject: subjectnum,\n\t\t\t\targs,\n\t\t\t\tantecedents: antecedentNums,\n\t\t\t\treduced: this.consequent\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n\n\tpublic static guess(\n\t\t\tselector: string,\n\t\t\trequiredAntecedents: Expr[], antecedents: Expr[],\n\t\t\tright: Expr, as: Expr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace): Expr {\n\t\t\n\t\tif (selector.length == 0) throw Expr.error('wut', trace);\n\n\t\tvar pattern: Expr, instance: Expr;\n\n\t\tif (selector[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at 0): expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tpattern = right;\n\t\t\tinstance = as;\n\t\t} else {\n\t\t\tvar n = Number(selector[0]);\n\n\t\t\tif (!(1 <= n && n <= antecedents.length))\n\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at 0): antecedent index out of range`, trace);\n\n\t\t\tpattern = requiredAntecedents[n - 1];\n\t\t\tinstance = antecedents[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tptr: number,\n\t\t\t\tpattern: Expr, instance: Expr,\n\t\t\t\tparams: Parameter[]): Expr {\n\t\t\t\n\t\t\tinstance = instance.expandMeta(true);\n\t\t\t\n\t\t\tif (selector.length <= ptr) return instance;\n\n\t\t\tif (/^[0-9]$/.test(selector[ptr])) {\n\t\t\t\tvar n = Number(selector[ptr]);\n\n\t\t\t\tif (pattern instanceof Tee && instance instanceof Tee) {\n\t\t\t\t\tif (pattern.left.length != instance.left.length) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= instance.left.length)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(ptr + 1, pattern.left[n - 1], instance.left[n - 1], params);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\twhile (instance instanceof Variable && instance.expr) {\n\t\t\t\t\t\tinstance = instance.expr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(pattern instanceof Funcall && instance instanceof Funcall)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pattern.fun.equals(instance.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!instance.isExpandable(context)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): ${instance}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tinstance = instance.expandOnce(context).expanded;\n\t\t\t\t}\n\n\t\t\t\tif (!(1 <= n && n <= instance.args.length))\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\n\t\t\t\treturn recurse(ptr + 1, pattern.args[n - 1], instance.args[n - 1], params);\n\t\t\t} else if (selector[ptr] == 'r') {\n\t\t\t\tif (!(pattern instanceof Tee && instance instanceof Tee)) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t}\n\n\t\t\t\treturn recurse(ptr + 1, pattern.right, instance.right, params);\n\t\t\t} else if (selector[ptr] == 'c') {\n\t\t\t\tif (!(\n\t\t\t\t\tpattern instanceof Fun && !pattern.name\n\t\t\t\t\t&& instance instanceof Fun && !instance.name\n\t\t\t\t)) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t}\n\n\t\t\t\tif (pattern.length != instance.length) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): parameter length mismatch`, trace);\n\t\t\t\t}\n\n\t\t\t\tvar placeholders = [];\n\n\t\t\t\tfor (var i = 0; i < pattern.length; i++) {\n\t\t\t\t\tif (!pattern.params[i].type.equals(instance.params[i].type)) {\n\t\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): parameter type mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tplaceholders.push(new Parameter({\n\t\t\t\t\t\ttex: instance.params[i].tex,\n\t\t\t\t\t\ttype: pattern.params[i].type,\n\t\t\t\t\t\tname: instance.params[i].name,\n\t\t\t\t\t\tselector: null\n\t\t\t\t\t}, trace));\n\t\t\t\t}\n\n\t\t\t\treturn recurse(ptr + 1, pattern.call(placeholders), instance.call(placeholders), placeholders.concat(params));\n\t\t\t} else if (selector[ptr] == 'f') {\n\t\t\t\tif (ptr != selector.length - 1) {\n\t\t\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): invalid selector`, trace);\n\t\t\t\t}\n\n\t\t\t\t// (($0, $1) => f($0, $1)) -> f\n\t\t\t\tif (instance instanceof Funcall\n\t\t\t\t\t\t&& instance.args.length == params.length\n\t\t\t\t\t\t&& instance.args.every((arg, i) => arg == params[i])) {\n\t\t\t\t\treturn instance.fun;\n\t\t\t\t}\n\n\t\t\t\treturn new Schema({\n\t\t\t\t\tdoc: null,\n\t\t\t\t\ttex: null,\n\t\t\t\t\tannotations: [],\n\t\t\t\t\tschemaType: 'schema',\n\t\t\t\t\tname: null,\n\t\t\t\t\tparams,\n\t\t\t\t\tcontext: new ExecutionContext(),\n\t\t\t\t\tdef$s: [],\n\t\t\t\t\texpr: instance\n\t\t\t\t}, trace);\n\t\t\t}\n\n\t\t\tthrow Expr.error(`Cannot dereference @${selector} (at ${ptr}): invalid selector`, trace);\n\t\t})(1, pattern, instance, []);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar antecedents = this.antecedents.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (antecedents.join('').length <= 50) {\n\t\t\tantecedents = this.antecedents.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tantecedents.join(', '),\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\n\t\treturn [\n\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t'\\t' + antecedents.join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t']'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.antecedents.map(e => e.toTeXString(Expr.PREC_COMMA)).join(', ')}]`;\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport $Variable from \"./$Variable\";\nimport Fun from \"./Fun\";\nimport Expr, { EqualsPriority, Precedence } from \"./Expr\";\nimport Variable from \"./Variable\";\n\ninterface WithArgumentType {\n\tvariable: Variable;\n\tdef$s: $Variable[];\n\texpr: Expr;\n}\n\nexport default class With extends Expr {\n\n\tpublic readonly variable: Variable;\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly expr: Expr;\n\n\tconstructor({variable, def$s, expr}: WithArgumentType, trace: StackTrace) {\n\t\tsuper(null, false, null, expr.type, trace);\n\n\t\tthis.variable = variable;\n\t\tthis.def$s = def$s;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr>): Expr {\n\t\tif (map.has(this.variable))\n\t\t\tthrow Error('Parameter collision');\n\t\t\n\t\tmap = new Map(map);\n\n\t\treturn this.expandMeta(false).substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Expr {\n\t\tvar map = new Map<Variable, Expr>();\n\t\tmap.set(this.variable, this.variable.expr);\n\n\t\treturn this.expr.substitute(map).expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected equalsInternal(obj: Expr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected isProvedInternal(hypotheses: Expr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getProofInternal(hypnumMap: Map<Expr, number>, $Map: Map<Expr, number | [number, number]>, ctr: Counter, root?: boolean): ProofType[] {\n\n\t\t$Map = new Map($Map);\n\n\t\tvar def: ProofType = {\n\t\t\t_type: 'def',\n\t\t\tctr: ctr.next(),\n\t\t\tvar: this.variable\n\t\t};\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [\n\t\t\tdef,\n\t\t\t...$lines,\n\t\t\t...this.expr.getProof(hypnumMap, $Map, ctr)\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}","import Counter from \"./Counter\";\nimport Expr from \"./exprs/Expr\";\nimport Schema from \"./exprs/Schema\";\nimport Variable from \"./exprs/Variable\";\nimport { ProofType } from \"./ProofType\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx, m42kup): string {\n\t\tvar REPEAT = '<b>R</b>',\n\t\t\tTE = '<b>⊢E</b>',\n\t\t\tSE = '<b>↦E</b>';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar expr = scope.getSchema(name);\n\n\t\tif (!(expr instanceof Schema)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map((e, i) => `<td${i == 0 ? ' style=\"text-align:center\"' : ''}>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr: number | [number, number] | Expr, expand?: boolean): string {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true, true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true, true));\n\t\t}\n\n\t\tvar tree = expr.getProof(new Map(), new Map(), new Counter(), true);\n\n\t\tvar innertree: ProofType[] = (tree[0] as any).$lines.concat((tree[0] as any).lines);\n\n\t\tvar ncols = (function recurse(tree: ProofType[]): number {\n\t\t\treturn Math.max(...tree.map(t => {\n\t\t\t\tswitch (t._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.lines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.leftlines),\n\t\t\t\t\t\t\trecurse(t.rightlines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}));\n\t\t})(innertree);\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expression</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines: ProofType[], left: Variable[][]) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\t\tvar params = line.params.slice();\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[REPEAT, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[REPEAT, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[SE, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'SE':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[SE, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'TE':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[TE, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.antecedents.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'def':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\tline.var.doc ? `<p>${exprToHtml(line.var)}</p>${m42kup.render(line.var.doc)}` : exprToHtml(line.var),\n\t\t\t\t\t\t\t'definition'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'bydef':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr),\n\t\t\t\t\t\t\t`by definition of ${line.of.map(v => {\n\t\t\t\t\t\t\t\treturn exprToHtml(v);\n\t\t\t\t\t\t\t}).join(', ')} [${exprToHtml(line.ref)}]`\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow Error(`Unknown type ${(line as any)._type}`);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(innertree, []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","export default class Counter {\n\n\tprivate n: number;\n\n\tconstructor (start: number=0) {\n\t\tthis.n = start;\n\t}\n\n\tpublic peek(): number {\n\t\treturn this.n;\n\t}\n\n\tpublic next(): number {\n\t\treturn ++this.n;\n\t}\n}","import $Variable from './exprs/$Variable';\nimport Fun from './exprs/Fun';\nimport Expr from './exprs/Expr';\nimport ObjectFun from './exprs/ObjectFun';\nimport Schema from './exprs/Schema';\nimport { FunctionalObjectType, ObjectType, SimpleObjectType } from './exprs/types';\nimport Variable from './exprs/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Expr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\n\t/** 파일 경로. 예를 들어 `/propositional.math`이다. 파일과 일대일대응이어야 한다. */\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: SimpleObjectType): SimpleObjectType {\n\t\tif (!(type instanceof SimpleObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new FunctionalObjectType({\n\t\t\tfrom,\n\t\t\tto\n\t\t}, this.trace);\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(i) {return i},\n      peg$c1 = function(imports, a) {return a},\n      peg$c2 = function(imports, lines) {return imports.concat(lines)},\n      peg$c3 = function(e) {return e},\n      peg$c4 = \"import\",\n      peg$c5 = peg$literalExpectation(\"import\", false),\n      peg$c6 = function(filename) {\n      \t\treturn {\n      \t\t\t_type: 'import',\n      \t\t\tfilename,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c7 = \"type\",\n      peg$c8 = peg$literalExpectation(\"type\", false),\n      peg$c9 = \"=\",\n      peg$c10 = peg$literalExpectation(\"=\", false),\n      peg$c11 = function(doc, name, o) {return o},\n      peg$c12 = function(doc, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'typedef',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\texpr,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c13 = \"sealed\",\n      peg$c14 = peg$literalExpectation(\"sealed\", false),\n      peg$c15 = function(doc, tex, sealed, type, name, expr) {return expr},\n      peg$c16 = function(doc, tex, sealed, type, name) {return null},\n      peg$c17 = function(doc, tex, sealed, type, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: false,\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c18 = function(tex, type, name) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c19 = \":\",\n      peg$c20 = peg$literalExpectation(\":\", false),\n      peg$c21 = \"@\",\n      peg$c22 = peg$literalExpectation(\"@\", false),\n      peg$c23 = /^[a-z0-9_]/,\n      peg$c24 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c25 = function(tex, type, name, g) {return g},\n      peg$c26 = function(tex, type, name, selector) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tselector,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c27 = \"(\",\n      peg$c28 = peg$literalExpectation(\"(\", false),\n      peg$c29 = \",\",\n      peg$c30 = peg$literalExpectation(\",\", false),\n      peg$c31 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tv) {return tv},\n      peg$c32 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tail) {return [head].concat(tail)},\n      peg$c33 = \")\",\n      peg$c34 = peg$literalExpectation(\")\", false),\n      peg$c35 = function(doc, tex_attributes, tex, sealed, rettype, name, p) {return p || []},\n      peg$c36 = \"{\",\n      peg$c37 = peg$literalExpectation(\"{\", false),\n      peg$c38 = \"}\",\n      peg$c39 = peg$literalExpectation(\"}\", false),\n      peg$c40 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {return expr},\n      peg$c41 = function(doc, tex_attributes, tex, sealed, rettype, name, params) {return null},\n      peg$c42 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defun',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex_attributes: tex_attributes ? tex_attributes[0] : {\n      \t\t\t\tprecedence: false\n      \t\t\t},\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\trettype,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c43 = function(doc, a) {return a},\n      peg$c44 = \"axiom\",\n      peg$c45 = peg$literalExpectation(\"axiom\", false),\n      peg$c46 = \"theorem\",\n      peg$c47 = peg$literalExpectation(\"theorem\", false),\n      peg$c48 = \"schema\",\n      peg$c49 = peg$literalExpectation(\"schema\", false),\n      peg$c50 = function(doc, annotations, schemaType, name, head, tv) {return tv},\n      peg$c51 = function(doc, annotations, schemaType, name, head, tail) {return [head].concat(tail)},\n      peg$c52 = function(doc, annotations, schemaType, name, p) {return p || []},\n      peg$c53 = \"using\",\n      peg$c54 = peg$literalExpectation(\"using\", false),\n      peg$c55 = function(doc, annotations, schemaType, name, params, head, n) {return n},\n      peg$c56 = function(doc, annotations, schemaType, name, params, head, tail) {return [head].concat(tail)},\n      peg$c57 = function(doc, annotations, schemaType, name, params, x) {return x},\n      peg$c58 = function(doc, annotations, schemaType, name, params, using, d) {return d},\n      peg$c59 = function(doc, annotations, schemaType, name, params, using, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defschema',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\tannotations,\n      \t\t\tschemaType,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\tusing: using || [],\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c60 = function(a) {return [a]},\n      peg$c61 = \"[\",\n      peg$c62 = peg$literalExpectation(\"[\", false),\n      peg$c63 = \";\",\n      peg$c64 = peg$literalExpectation(\";\", false),\n      peg$c65 = function(head, e) {return e},\n      peg$c66 = function(head, tail) {return [head].concat(tail)},\n      peg$c67 = \"]\",\n      peg$c68 = peg$literalExpectation(\"]\", false),\n      peg$c69 = function(b) {return b || []},\n      peg$c70 = \">\",\n      peg$c71 = peg$literalExpectation(\">\", false),\n      peg$c72 = function(antecedents, e) {return e},\n      peg$c73 = \"?\",\n      peg$c74 = peg$literalExpectation(\"?\", false),\n      peg$c75 = function(antecedents, subject) {return null},\n      peg$c76 = function(antecedents, subject, head) {return null},\n      peg$c77 = function(antecedents, subject, head, e) {return e},\n      peg$c78 = function(antecedents, subject, head, tail) {return [head].concat(tail)},\n      peg$c79 = function(antecedents, subject, a) {return a || []},\n      peg$c80 = \"as\",\n      peg$c81 = peg$literalExpectation(\"as\", false),\n      peg$c82 = function(antecedents, subject, args, m) {return m},\n      peg$c83 = function(antecedents, subject, args, as_) {return {subject, args, as_: as_ || null};},\n      peg$c84 = function(antecedents, right) {\n      \t\tvar ret = {\n      \t\t\t_type: 'reduction',\n      \t\t\tsubject: right[0].subject,\n      \t\t\targs: right[0].args,\n      \t\t\tantecedents,\n      \t\t\tas: right[0].as_,\n      \t\t\tlocation: location()\n      \t\t};\n\n      \t\tfor (var i = 1; i < right.length; i++) {\n      \t\t\tret = {\n      \t\t\t\t_type: 'reduction',\n      \t\t\t\tsubject: right[i].subject,\n      \t\t\t\targs: right[i].args,\n      \t\t\t\tantecedents: [ret],\n      \t\t\t\tas: right[i].as_,\n      \t\t\t\tlocation: location()\n      \t\t\t}\n      \t\t}\n      \t\t\n      \t\treturn ret;\n      \t},\n      peg$c85 = function(schema, head, e) {return e},\n      peg$c86 = function(schema, head, tail) {return [head].concat(tail)},\n      peg$c87 = function(schema, a) {return a || []},\n      peg$c88 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'schemacall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c89 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'funcall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c90 = function(head, tv) {return tv},\n      peg$c91 = function(p) {return p || []},\n      peg$c92 = \"=>\",\n      peg$c93 = peg$literalExpectation(\"=>\", false),\n      peg$c94 = function(params, e) {return e},\n      peg$c95 = function(params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'funexpr',\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c96 = function(params, expr) {return {defdollars: [], expr}},\n      peg$c97 = function(params, d) {return d},\n      peg$c98 = function(params, defdollars, expr) {return {defdollars, expr}},\n      peg$c99 = function(params, foo) {\n      \t\treturn {\n      \t\t\t_type: 'schemaexpr',\n      \t\t\tparams,\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\texpr: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c100 = function(l) {return l || []},\n      peg$c101 = \"|-\",\n      peg$c102 = peg$literalExpectation(\"|-\", false),\n      peg$c103 = function(left, expr) {return {defdollars: [], expr}},\n      peg$c104 = function(left, d) {return d},\n      peg$c105 = function(left, defdollars, expr) {return {defdollars, expr}},\n      peg$c106 = function(left, foo) {\n      \t\treturn {\n      \t\t\t_type: 'tee',\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\tleft,\n      \t\t\tright: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c107 = \"with\",\n      peg$c108 = peg$literalExpectation(\"with\", false),\n      peg$c109 = function(doc, tex, type, varname, varexpr, d) {return d},\n      peg$c110 = function(doc, tex, type, varname, varexpr, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'with',\n      \t\t\twith: {\n      \t\t\t\t_type: 'defv',\n      \t\t\t\tisParam: false,\n      \t\t\t\tdoc: doc ? doc[0] : null,\n      \t\t\t\ttex: tex ? tex[0] : null,\n      \t\t\t\tsealed: false,\n      \t\t\t\ttype,\n      \t\t\t\tname: varname,\n      \t\t\t\texpr: varexpr,\n      \t\t\t\tlocation: location()\n      \t\t\t},\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c111 = function(name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'def$',\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t};\n      \t},\n      peg$c112 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: false,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c113 = function(head, t) {return t},\n      peg$c114 = \"->\",\n      peg$c115 = peg$literalExpectation(\"->\", false),\n      peg$c116 = function(from, to) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: true,\n      \t\t\tfrom,\n      \t\t\tto,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c117 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '@',\n      \t\t\tname: name.slice(1),\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c118 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '$',\n      \t\t\tname: name,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c119 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: 'normal',\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c120 = \"@discouraged\",\n      peg$c121 = peg$literalExpectation(\"@discouraged\", false),\n      peg$c122 = \"@deprecated\",\n      peg$c123 = peg$literalExpectation(\"@deprecated\", false),\n      peg$c124 = /^[a-zA-Z0-9_]/,\n      peg$c125 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c126 = \"$\",\n      peg$c127 = peg$literalExpectation(\"$\", false),\n      peg$c128 = \"\\\"\",\n      peg$c129 = peg$literalExpectation(\"\\\"\", false),\n      peg$c130 = peg$anyExpectation(),\n      peg$c131 = function(a) {return a},\n      peg$c132 = function(b) {\n      \t\treturn b.replace(/\\r\\n|\\r/g, '\\n');\n      \t},\n      peg$c133 = \"precedence=\",\n      peg$c134 = peg$literalExpectation(\"precedence=\", false),\n      peg$c135 = /^[0-9]/,\n      peg$c136 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c137 = function(precedence) {\n      \t\treturn {\n      \t\t\tprecedence: precedence * 1\n      \t\t}\n      \t},\n      peg$c138 = \"//\",\n      peg$c139 = peg$literalExpectation(\"//\", false),\n      peg$c140 = \"/*\",\n      peg$c141 = peg$literalExpectation(\"/*\", false),\n      peg$c142 = \"*/\",\n      peg$c143 = peg$literalExpectation(\"*/\", false),\n      peg$c144 = \"\\r\\n\",\n      peg$c145 = peg$literalExpectation(\"\\r\\n\", false),\n      peg$c146 = \"\\r\",\n      peg$c147 = peg$literalExpectation(\"\\r\", false),\n      peg$c148 = \"\\n\",\n      peg$c149 = peg$literalExpectation(\"\\n\", false),\n      peg$c150 = /^[ \\t\\n\\r]/,\n      peg$c151 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$resultsCache = {},\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 0,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseimport();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c0(s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseimport();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c0(s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parseline();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c1(s2, s5);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parseline();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c1(s2, s5);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 1,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable() {\n    var s0, s1, s2, s3;\n\n    var key    = peg$currPos * 43 + 2,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseevaluable_internal();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable_internal() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 3,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseexpr_internal_3();\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseimport() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 4,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesem();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c6(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetypedef() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 5,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c7) {\n        s2 = peg$c7;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s7 = peg$c9;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseftype();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s6;\n                      s7 = peg$c11(s1, s4, s9);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefv() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    var key    = peg$currPos * 43 + 6,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c13) {\n          s4 = peg$c13;\n          peg$currPos += 6;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetype();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 61) {\n                    s9 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseobjectexpr();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parsesem();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c15(s1, s2, s3, s4, s6, s11);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parsesem();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c16(s1, s2, s3, s4, s6);\n                    }\n                    s8 = s9;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s1, s2, s3, s4, s6, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefparam() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 7,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschemaparam() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 8,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s7 = peg$c19;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 64) {\n                    s9 = peg$c21;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = [];\n                    if (peg$c23.test(input.charAt(peg$currPos))) {\n                      s12 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s12 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                    }\n                    if (s12 !== peg$FAILED) {\n                      while (s12 !== peg$FAILED) {\n                        s11.push(s12);\n                        if (peg$c23.test(input.charAt(peg$currPos))) {\n                          s12 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                        }\n                      }\n                    } else {\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s10 = input.substring(s10, peg$currPos);\n                    } else {\n                      s10 = s11;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s5;\n                      s6 = peg$c25(s1, s2, s4, s10);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c26(s1, s2, s4, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefun() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 9,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex_attributes();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetex();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c13) {\n            s5 = peg$c13;\n            peg$currPos += 6;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetype();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefparam();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parsedefparam();\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parsedefparam();\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c32(s1, s2, s3, s4, s5, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s9;\n                              s10 = peg$c35(s1, s2, s3, s4, s5, s7, s12);\n                              s9 = s10;\n                            } else {\n                              peg$currPos = s9;\n                              s9 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 123) {\n                        s11 = peg$c36;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 125) {\n                                s15 = peg$c38;\n                                peg$currPos++;\n                              } else {\n                                s15 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                              }\n                              if (s15 !== peg$FAILED) {\n                                peg$savedPos = s10;\n                                s11 = peg$c40(s1, s2, s3, s4, s5, s7, s9, s13);\n                                s10 = s11;\n                              } else {\n                                peg$currPos = s10;\n                                s10 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s10;\n                              s10 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s10;\n                            s10 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 === peg$FAILED) {\n                        s10 = peg$currPos;\n                        s11 = peg$parsesem();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c41(s1, s2, s3, s4, s5, s7, s9);\n                        }\n                        s10 = s11;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c42(s1, s2, s3, s4, s5, s7, s9, s10);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschema() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    var key    = peg$currPos * 43 + 10,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseannotation();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c43(s1, s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseannotation();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c43(s1, s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c44) {\n          s3 = peg$c44;\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c45); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c46) {\n            s3 = peg$c46;\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c47); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c48) {\n              s3 = peg$c48;\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c49); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = peg$parsedefschemaparam();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        s13 = [];\n                        s14 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s15 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s15 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parsedefschemaparam();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                peg$savedPos = s14;\n                                s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                s14 = s15;\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s14;\n                          s14 = peg$FAILED;\n                        }\n                        while (s14 !== peg$FAILED) {\n                          s13.push(s14);\n                          s14 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s15 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s15 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parsedefschemaparam();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  peg$savedPos = s14;\n                                  s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                  s14 = s15;\n                                } else {\n                                  peg$currPos = s14;\n                                  s14 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        }\n                        if (s13 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c51(s1, s2, s3, s5, s11, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 === peg$FAILED) {\n                      s10 = null;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s11 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c52(s1, s2, s3, s5, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s9 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$currPos;\n                      s12 = peg$parseident();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parse_();\n                        if (s13 !== peg$FAILED) {\n                          s14 = [];\n                          s15 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s16 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s16 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parse_();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parseident();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parse_();\n                                if (s19 !== peg$FAILED) {\n                                  peg$savedPos = s15;\n                                  s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                  s15 = s16;\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s15;\n                            s15 = peg$FAILED;\n                          }\n                          while (s15 !== peg$FAILED) {\n                            s14.push(s15);\n                            s15 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s16 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s16 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parse_();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parseident();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parse_();\n                                  if (s19 !== peg$FAILED) {\n                                    peg$savedPos = s15;\n                                    s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                    s15 = s16;\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          }\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s11;\n                            s12 = peg$c56(s1, s2, s3, s5, s7, s12, s14);\n                            s11 = s12;\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c57(s1, s2, s3, s5, s7, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                      s9 = peg$c36;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefdollar();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s12;\n                            s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                            s12 = s13;\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$currPos;\n                          s13 = peg$parsedefdollar();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseexpr_internal_3();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c38;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c59(s1, s2, s3, s5, s7, s8, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsereduction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 11,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseexpr_internal_2();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c60(s2);\n    }\n    s1 = s2;\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c61;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c62); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_3();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s9 = peg$c63;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c64); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parseexpr_internal_3();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c65(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s9 = peg$c63;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                }\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseexpr_internal_3();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c65(s5, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c66(s5, s7);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c67;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c68); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c69(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s5 = peg$c70;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c71); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseschemacall();\n            if (s7 === peg$FAILED) {\n              s7 = peg$parsevar();\n              if (s7 === peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseexpr_internal_3();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s12 = peg$c33;\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c72(s1, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$currPos;\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s10 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parse_();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$currPos;\n                    s13 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 63) {\n                      s14 = peg$c73;\n                      peg$currPos++;\n                    } else {\n                      s14 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                    }\n                    if (s14 !== peg$FAILED) {\n                      peg$savedPos = s13;\n                      s14 = peg$c75(s1, s7);\n                    }\n                    s13 = s14;\n                    if (s13 === peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                    }\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        s15 = [];\n                        s16 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s17 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s17 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s17 !== peg$FAILED) {\n                          s18 = peg$parse_();\n                          if (s18 !== peg$FAILED) {\n                            s19 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 63) {\n                              s20 = peg$c73;\n                              peg$currPos++;\n                            } else {\n                              s20 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                            }\n                            if (s20 !== peg$FAILED) {\n                              peg$savedPos = s19;\n                              s20 = peg$c76(s1, s7, s13);\n                            }\n                            s19 = s20;\n                            if (s19 === peg$FAILED) {\n                              s19 = peg$parseobjectexpr();\n                            }\n                            if (s19 !== peg$FAILED) {\n                              s20 = peg$parse_();\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s16;\n                                s17 = peg$c77(s1, s7, s13, s19);\n                                s16 = s17;\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s16;\n                          s16 = peg$FAILED;\n                        }\n                        while (s16 !== peg$FAILED) {\n                          s15.push(s16);\n                          s16 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s17 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s17 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s17 !== peg$FAILED) {\n                            s18 = peg$parse_();\n                            if (s18 !== peg$FAILED) {\n                              s19 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 63) {\n                                s20 = peg$c73;\n                                peg$currPos++;\n                              } else {\n                                s20 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                              }\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s19;\n                                s20 = peg$c76(s1, s7, s13);\n                              }\n                              s19 = s20;\n                              if (s19 === peg$FAILED) {\n                                s19 = peg$parseobjectexpr();\n                              }\n                              if (s19 !== peg$FAILED) {\n                                s20 = peg$parse_();\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s16;\n                                  s17 = peg$c77(s1, s7, s13, s19);\n                                  s16 = s17;\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          peg$savedPos = s12;\n                          s13 = peg$c78(s1, s7, s13, s15);\n                          s12 = s13;\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s12;\n                      s12 = peg$FAILED;\n                    }\n                    if (s12 === peg$FAILED) {\n                      s12 = null;\n                    }\n                    if (s12 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s13 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s13 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c79(s1, s7, s12);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              if (s8 === peg$FAILED) {\n                s8 = null;\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$currPos;\n                s10 = peg$parse__();\n                if (s10 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c80) {\n                    s11 = peg$c80;\n                    peg$currPos += 2;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse__();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseexpr_internal_2();\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s9;\n                        s10 = peg$c82(s1, s7, s8, s13);\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                if (s9 === peg$FAILED) {\n                  s9 = null;\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c83(s1, s7, s8, s9);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 62) {\n              s5 = peg$c70;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c71); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseschemacall();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parsevar();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s8 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse_();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseexpr_internal_3();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parse_();\n                          if (s11 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 41) {\n                              s12 = peg$c33;\n                              peg$currPos++;\n                            } else {\n                              s12 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                            }\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s7;\n                              s8 = peg$c72(s1, s10);\n                              s7 = s8;\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 63) {\n                          s14 = peg$c73;\n                          peg$currPos++;\n                        } else {\n                          s14 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                        }\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s13;\n                          s14 = peg$c75(s1, s7);\n                        }\n                        s13 = s14;\n                        if (s13 === peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                        }\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 63) {\n                                  s20 = peg$c73;\n                                  peg$currPos++;\n                                } else {\n                                  s20 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                }\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s19;\n                                  s20 = peg$c76(s1, s7, s13);\n                                }\n                                s19 = s20;\n                                if (s19 === peg$FAILED) {\n                                  s19 = peg$parseobjectexpr();\n                                }\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c77(s1, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 63) {\n                                    s20 = peg$c73;\n                                    peg$currPos++;\n                                  } else {\n                                    s20 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                  }\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s19;\n                                    s20 = peg$c76(s1, s7, s13);\n                                  }\n                                  s19 = s20;\n                                  if (s19 === peg$FAILED) {\n                                    s19 = peg$parseobjectexpr();\n                                  }\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c77(s1, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c78(s1, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c79(s1, s7, s12);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c80) {\n                        s11 = peg$c80;\n                        peg$currPos += 2;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseexpr_internal_2();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s9;\n                            s10 = peg$c82(s1, s7, s8, s13);\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c83(s1, s7, s8, s9);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemacall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 12,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr_internal_3();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefuncall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 13,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c89(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefunexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 14,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseobjectexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s9 = peg$c38;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s4;\n                      s5 = peg$c94(s1, s7);\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c95(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemaexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 15,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_1();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c96(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c97(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c97(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c98(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c99(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetee() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    var key    = peg$currPos * 43 + 16,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    s3 = peg$parseexpr_internal_1();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s7 = peg$c29;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n        if (s7 !== peg$FAILED) {\n          s8 = peg$parse_();\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parseexpr_internal_1();\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                peg$savedPos = s6;\n                s7 = peg$c65(s3, s9);\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s7 = peg$c29;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parseexpr_internal_1();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c65(s3, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c66(s3, s5);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c100(s2);\n    }\n    s1 = s2;\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c101) {\n        s2 = peg$c101;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_2();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c103(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c104(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c104(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c105(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c106(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsewith() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;\n\n    var key    = peg$currPos * 43 + 17,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c107) {\n      s1 = peg$c107;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c27;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parsedocumentation();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parsetex();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 61) {\n                          s11 = peg$c9;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseobjectexpr();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 41) {\n                                  s15 = peg$c33;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse_();\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 123) {\n                                      s17 = peg$c36;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse_();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = [];\n                                        s20 = peg$currPos;\n                                        s21 = peg$parsedefdollar();\n                                        if (s21 !== peg$FAILED) {\n                                          s22 = peg$parse_();\n                                          if (s22 !== peg$FAILED) {\n                                            peg$savedPos = s20;\n                                            s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                            s20 = s21;\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s20;\n                                          s20 = peg$FAILED;\n                                        }\n                                        while (s20 !== peg$FAILED) {\n                                          s19.push(s20);\n                                          s20 = peg$currPos;\n                                          s21 = peg$parsedefdollar();\n                                          if (s21 !== peg$FAILED) {\n                                            s22 = peg$parse_();\n                                            if (s22 !== peg$FAILED) {\n                                              peg$savedPos = s20;\n                                              s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                              s20 = s21;\n                                            } else {\n                                              peg$currPos = s20;\n                                              s20 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse_();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseexpr_internal_3();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse_();\n                                              if (s22 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                  s23 = peg$c38;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s23 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c110(s5, s6, s7, s9, s13, s19, s21);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_3() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 18,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsereduction();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_2();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_2() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 19,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetee();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_1();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_1() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 20,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseschemacall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseschemaexpr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewith();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s1 = peg$c27;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseexpr_internal_3();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse_();\n                  if (s4 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s5 = peg$c33;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c3(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseobjectexpr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 21,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsefuncall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsefunexpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevar();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c27;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseobjectexpr();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s5 = peg$c33;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c3(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefdollar() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 22,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c9;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_internal_3();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c111(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetype() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 23,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsestype();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseftype();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsestype() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 24,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c112(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseftype() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 25,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetype();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$currPos;\n          s7 = peg$parse_();\n          if (s7 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s8 = peg$c29;\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parsetype();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c113(s4, s10);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$currPos;\n            s7 = peg$parse_();\n            if (s7 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s8 = peg$c29;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parse_();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsetype();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s7 = peg$c113(s4, s10);\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c66(s4, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c114) {\n              s5 = peg$c114;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c115); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c67;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c116(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsevar() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 26,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseat_var();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedollar_var();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseplain_var();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 27,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseat_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c117(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 28,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c118(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseplain_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 29,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c119(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsekeyword() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 30,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c80) {\n      s0 = peg$c80;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c44) {\n        s0 = peg$c44;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c4) {\n          s0 = peg$c4;\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c48) {\n            s0 = peg$c48;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c49); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c13) {\n              s0 = peg$c13;\n              peg$currPos += 6;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7) === peg$c46) {\n                s0 = peg$c46;\n                peg$currPos += 7;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c7) {\n                  s0 = peg$c7;\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s0 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 4) === peg$c107) {\n                      s0 = peg$c107;\n                      peg$currPos += 4;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseannotation() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 31,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 12) === peg$c120) {\n      s0 = peg$c120;\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 11) === peg$c122) {\n        s0 = peg$c122;\n        peg$currPos += 11;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c123); }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 32,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    peg$silentFails++;\n    s3 = peg$currPos;\n    s4 = peg$parsekeyword();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s6 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        s4 = [s4, s5];\n        s3 = s4;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s3 === peg$FAILED) {\n      s2 = void 0;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 33,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s2 = peg$c21;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 34,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c126;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedocumentation() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 35,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c128;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s6 = peg$c128;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c129); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c128;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c128;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex_attributes() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 36,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c133) {\n          s3 = peg$c133;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = [];\n            if (peg$c135.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c136); }\n            }\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                if (peg$c135.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c136); }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = input.substring(s5, peg$currPos);\n            } else {\n              s5 = s6;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s7 = peg$c67;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 37,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s1 = peg$c126;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 36) {\n        s6 = peg$c126;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c127); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s6 = peg$c126;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s3 = peg$c126;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 38,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c138) {\n      s1 = peg$c138;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parsenewline();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsenewline();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c140) {\n        s1 = peg$c140;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c142) {\n          s5 = peg$c142;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s5 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c130); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s3 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsenewline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 39,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c144) {\n      s0 = peg$c144;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s0 = peg$c146;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c148;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c149); }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 40,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c150.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c151); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 41,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c150.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsesem() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 42,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c63;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c64); }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { evaluable: peg$parseevaluable },\n      peg$startRuleFunction  = peg$parseevaluable,\n\n      peg$c0 = function(i) {return i},\n      peg$c1 = function(imports, a) {return a},\n      peg$c2 = function(imports, lines) {return imports.concat(lines)},\n      peg$c3 = function(e) {return e},\n      peg$c4 = \"import\",\n      peg$c5 = peg$literalExpectation(\"import\", false),\n      peg$c6 = function(filename) {\n      \t\treturn {\n      \t\t\t_type: 'import',\n      \t\t\tfilename,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c7 = \"type\",\n      peg$c8 = peg$literalExpectation(\"type\", false),\n      peg$c9 = \"=\",\n      peg$c10 = peg$literalExpectation(\"=\", false),\n      peg$c11 = function(doc, name, o) {return o},\n      peg$c12 = function(doc, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'typedef',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\texpr,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c13 = \"sealed\",\n      peg$c14 = peg$literalExpectation(\"sealed\", false),\n      peg$c15 = function(doc, tex, sealed, type, name, expr) {return expr},\n      peg$c16 = function(doc, tex, sealed, type, name) {return null},\n      peg$c17 = function(doc, tex, sealed, type, name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: false,\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c18 = function(tex, type, name) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c19 = \":\",\n      peg$c20 = peg$literalExpectation(\":\", false),\n      peg$c21 = \"@\",\n      peg$c22 = peg$literalExpectation(\"@\", false),\n      peg$c23 = /^[a-z0-9_]/,\n      peg$c24 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c25 = function(tex, type, name, g) {return g},\n      peg$c26 = function(tex, type, name, selector) {\n      \t\treturn {\n      \t\t\t_type: 'defv',\n      \t\t\tisParam: true,\n      \t\t\tdoc: null,\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\ttype,\n      \t\t\tname,\n      \t\t\tselector,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c27 = \"(\",\n      peg$c28 = peg$literalExpectation(\"(\", false),\n      peg$c29 = \",\",\n      peg$c30 = peg$literalExpectation(\",\", false),\n      peg$c31 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tv) {return tv},\n      peg$c32 = function(doc, tex_attributes, tex, sealed, rettype, name, head, tail) {return [head].concat(tail)},\n      peg$c33 = \")\",\n      peg$c34 = peg$literalExpectation(\")\", false),\n      peg$c35 = function(doc, tex_attributes, tex, sealed, rettype, name, p) {return p || []},\n      peg$c36 = \"{\",\n      peg$c37 = peg$literalExpectation(\"{\", false),\n      peg$c38 = \"}\",\n      peg$c39 = peg$literalExpectation(\"}\", false),\n      peg$c40 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {return expr},\n      peg$c41 = function(doc, tex_attributes, tex, sealed, rettype, name, params) {return null},\n      peg$c42 = function(doc, tex_attributes, tex, sealed, rettype, name, params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defun',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\ttex_attributes: tex_attributes ? tex_attributes[0] : {\n      \t\t\t\tprecedence: false\n      \t\t\t},\n      \t\t\ttex: tex ? tex[0] : null,\n      \t\t\tsealed: !!sealed,\n      \t\t\trettype,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c43 = function(doc, a) {return a},\n      peg$c44 = \"axiom\",\n      peg$c45 = peg$literalExpectation(\"axiom\", false),\n      peg$c46 = \"theorem\",\n      peg$c47 = peg$literalExpectation(\"theorem\", false),\n      peg$c48 = \"schema\",\n      peg$c49 = peg$literalExpectation(\"schema\", false),\n      peg$c50 = function(doc, annotations, schemaType, name, head, tv) {return tv},\n      peg$c51 = function(doc, annotations, schemaType, name, head, tail) {return [head].concat(tail)},\n      peg$c52 = function(doc, annotations, schemaType, name, p) {return p || []},\n      peg$c53 = \"using\",\n      peg$c54 = peg$literalExpectation(\"using\", false),\n      peg$c55 = function(doc, annotations, schemaType, name, params, head, n) {return n},\n      peg$c56 = function(doc, annotations, schemaType, name, params, head, tail) {return [head].concat(tail)},\n      peg$c57 = function(doc, annotations, schemaType, name, params, x) {return x},\n      peg$c58 = function(doc, annotations, schemaType, name, params, using, d) {return d},\n      peg$c59 = function(doc, annotations, schemaType, name, params, using, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'defschema',\n      \t\t\tdoc: doc ? doc[0] : null,\n      \t\t\tannotations,\n      \t\t\tschemaType,\n      \t\t\tname,\n      \t\t\tparams,\n      \t\t\tusing: using || [],\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c60 = function(a) {return [a]},\n      peg$c61 = \"[\",\n      peg$c62 = peg$literalExpectation(\"[\", false),\n      peg$c63 = \";\",\n      peg$c64 = peg$literalExpectation(\";\", false),\n      peg$c65 = function(head, e) {return e},\n      peg$c66 = function(head, tail) {return [head].concat(tail)},\n      peg$c67 = \"]\",\n      peg$c68 = peg$literalExpectation(\"]\", false),\n      peg$c69 = function(b) {return b || []},\n      peg$c70 = \">\",\n      peg$c71 = peg$literalExpectation(\">\", false),\n      peg$c72 = function(antecedents, e) {return e},\n      peg$c73 = \"?\",\n      peg$c74 = peg$literalExpectation(\"?\", false),\n      peg$c75 = function(antecedents, subject) {return null},\n      peg$c76 = function(antecedents, subject, head) {return null},\n      peg$c77 = function(antecedents, subject, head, e) {return e},\n      peg$c78 = function(antecedents, subject, head, tail) {return [head].concat(tail)},\n      peg$c79 = function(antecedents, subject, a) {return a || []},\n      peg$c80 = \"as\",\n      peg$c81 = peg$literalExpectation(\"as\", false),\n      peg$c82 = function(antecedents, subject, args, m) {return m},\n      peg$c83 = function(antecedents, subject, args, as_) {return {subject, args, as_: as_ || null};},\n      peg$c84 = function(antecedents, right) {\n      \t\tvar ret = {\n      \t\t\t_type: 'reduction',\n      \t\t\tsubject: right[0].subject,\n      \t\t\targs: right[0].args,\n      \t\t\tantecedents,\n      \t\t\tas: right[0].as_,\n      \t\t\tlocation: location()\n      \t\t};\n\n      \t\tfor (var i = 1; i < right.length; i++) {\n      \t\t\tret = {\n      \t\t\t\t_type: 'reduction',\n      \t\t\t\tsubject: right[i].subject,\n      \t\t\t\targs: right[i].args,\n      \t\t\t\tantecedents: [ret],\n      \t\t\t\tas: right[i].as_,\n      \t\t\t\tlocation: location()\n      \t\t\t}\n      \t\t}\n      \t\t\n      \t\treturn ret;\n      \t},\n      peg$c85 = function(schema, head, e) {return e},\n      peg$c86 = function(schema, head, tail) {return [head].concat(tail)},\n      peg$c87 = function(schema, a) {return a || []},\n      peg$c88 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'schemacall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c89 = function(schema, args) {\n      \t\treturn {\n      \t\t\t_type: 'funcall',\n      \t\t\tschema,\n      \t\t\targs,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c90 = function(head, tv) {return tv},\n      peg$c91 = function(p) {return p || []},\n      peg$c92 = \"=>\",\n      peg$c93 = peg$literalExpectation(\"=>\", false),\n      peg$c94 = function(params, e) {return e},\n      peg$c95 = function(params, expr) {\n      \t\treturn {\n      \t\t\t_type: 'funexpr',\n      \t\t\tparams,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c96 = function(params, expr) {return {defdollars: [], expr}},\n      peg$c97 = function(params, d) {return d},\n      peg$c98 = function(params, defdollars, expr) {return {defdollars, expr}},\n      peg$c99 = function(params, foo) {\n      \t\treturn {\n      \t\t\t_type: 'schemaexpr',\n      \t\t\tparams,\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\texpr: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c100 = function(l) {return l || []},\n      peg$c101 = \"|-\",\n      peg$c102 = peg$literalExpectation(\"|-\", false),\n      peg$c103 = function(left, expr) {return {defdollars: [], expr}},\n      peg$c104 = function(left, d) {return d},\n      peg$c105 = function(left, defdollars, expr) {return {defdollars, expr}},\n      peg$c106 = function(left, foo) {\n      \t\treturn {\n      \t\t\t_type: 'tee',\n      \t\t\tdef$s: foo.defdollars,\n      \t\t\tleft,\n      \t\t\tright: foo.expr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c107 = \"with\",\n      peg$c108 = peg$literalExpectation(\"with\", false),\n      peg$c109 = function(doc, tex, type, varname, varexpr, d) {return d},\n      peg$c110 = function(doc, tex, type, varname, varexpr, defdollars, expr) {\n      \t\treturn {\n      \t\t\t_type: 'with',\n      \t\t\twith: {\n      \t\t\t\t_type: 'defv',\n      \t\t\t\tisParam: false,\n      \t\t\t\tdoc: doc ? doc[0] : null,\n      \t\t\t\ttex: tex ? tex[0] : null,\n      \t\t\t\tsealed: false,\n      \t\t\t\ttype,\n      \t\t\t\tname: varname,\n      \t\t\t\texpr: varexpr,\n      \t\t\t\tlocation: location()\n      \t\t\t},\n      \t\t\tdef$s: defdollars,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c111 = function(name, expr) {\n      \t\treturn {\n      \t\t\t_type: 'def$',\n      \t\t\tname,\n      \t\t\texpr,\n      \t\t\tlocation: location()\n      \t\t};\n      \t},\n      peg$c112 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: false,\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c113 = function(head, t) {return t},\n      peg$c114 = \"->\",\n      peg$c115 = peg$literalExpectation(\"->\", false),\n      peg$c116 = function(from, to) {\n      \t\treturn {\n      \t\t\t_type: 'type',\n      \t\t\tftype: true,\n      \t\t\tfrom,\n      \t\t\tto,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c117 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '@',\n      \t\t\tname: name.slice(1),\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c118 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: '$',\n      \t\t\tname: name,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c119 = function(name) {\n      \t\treturn {\n      \t\t\t_type: 'var',\n      \t\t\ttype: 'normal',\n      \t\t\tname,\n      \t\t\tlocation: location()\n      \t\t}\n      \t},\n      peg$c120 = \"@discouraged\",\n      peg$c121 = peg$literalExpectation(\"@discouraged\", false),\n      peg$c122 = \"@deprecated\",\n      peg$c123 = peg$literalExpectation(\"@deprecated\", false),\n      peg$c124 = /^[a-zA-Z0-9_]/,\n      peg$c125 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c126 = \"$\",\n      peg$c127 = peg$literalExpectation(\"$\", false),\n      peg$c128 = \"\\\"\",\n      peg$c129 = peg$literalExpectation(\"\\\"\", false),\n      peg$c130 = peg$anyExpectation(),\n      peg$c131 = function(a) {return a},\n      peg$c132 = function(b) {\n      \t\treturn b.replace(/\\r\\n|\\r/g, '\\n');\n      \t},\n      peg$c133 = \"precedence=\",\n      peg$c134 = peg$literalExpectation(\"precedence=\", false),\n      peg$c135 = /^[0-9]/,\n      peg$c136 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c137 = function(precedence) {\n      \t\treturn {\n      \t\t\tprecedence: precedence * 1\n      \t\t}\n      \t},\n      peg$c138 = \"//\",\n      peg$c139 = peg$literalExpectation(\"//\", false),\n      peg$c140 = \"/*\",\n      peg$c141 = peg$literalExpectation(\"/*\", false),\n      peg$c142 = \"*/\",\n      peg$c143 = peg$literalExpectation(\"*/\", false),\n      peg$c144 = \"\\r\\n\",\n      peg$c145 = peg$literalExpectation(\"\\r\\n\", false),\n      peg$c146 = \"\\r\",\n      peg$c147 = peg$literalExpectation(\"\\r\", false),\n      peg$c148 = \"\\n\",\n      peg$c149 = peg$literalExpectation(\"\\n\", false),\n      peg$c150 = /^[ \\t\\n\\r]/,\n      peg$c151 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$resultsCache = {},\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 0,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseimport();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse_();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c0(s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseimport();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c0(s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parseline();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c1(s2, s5);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parseline();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c1(s2, s5);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 1,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable() {\n    var s0, s1, s2, s3;\n\n    var key    = peg$currPos * 43 + 2,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse_();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseevaluable_internal();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseevaluable_internal() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 3,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetypedef();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedefv();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedefun();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedefschema();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseexpr_internal_3();\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseimport() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 4,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c4) {\n      s1 = peg$c4;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesem();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c6(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetypedef() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 5,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 4) === peg$c7) {\n        s2 = peg$c7;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s7 = peg$c9;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseftype();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s6;\n                      s7 = peg$c11(s1, s4, s9);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c12(s1, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefv() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    var key    = peg$currPos * 43 + 6,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.substr(peg$currPos, 6) === peg$c13) {\n          s4 = peg$c13;\n          peg$currPos += 6;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetype();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 61) {\n                    s9 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseobjectexpr();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parsesem();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c15(s1, s2, s3, s4, s6, s11);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parsesem();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c16(s1, s2, s3, s4, s6);\n                    }\n                    s8 = s9;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s1, s2, s3, s4, s6, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefparam() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 7,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschemaparam() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 8,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsetex();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetype();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseident();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s7 = peg$c19;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 64) {\n                    s9 = peg$c21;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c22); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = [];\n                    if (peg$c23.test(input.charAt(peg$currPos))) {\n                      s12 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s12 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                    }\n                    if (s12 !== peg$FAILED) {\n                      while (s12 !== peg$FAILED) {\n                        s11.push(s12);\n                        if (peg$c23.test(input.charAt(peg$currPos))) {\n                          s12 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n                        }\n                      }\n                    } else {\n                      s11 = peg$FAILED;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s10 = input.substring(s10, peg$currPos);\n                    } else {\n                      s10 = s11;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s5;\n                      s6 = peg$c25(s1, s2, s4, s10);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c26(s1, s2, s4, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefun() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 9,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parsetex_attributes();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetex();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          if (input.substr(peg$currPos, 6) === peg$c13) {\n            s5 = peg$c13;\n            peg$currPos += 6;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetype();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefparam();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parsedefparam();\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parsedefparam();\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c31(s1, s2, s3, s4, s5, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c32(s1, s2, s3, s4, s5, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s9;\n                              s10 = peg$c35(s1, s2, s3, s4, s5, s7, s12);\n                              s9 = s10;\n                            } else {\n                              peg$currPos = s9;\n                              s9 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 123) {\n                        s11 = peg$c36;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 125) {\n                                s15 = peg$c38;\n                                peg$currPos++;\n                              } else {\n                                s15 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                              }\n                              if (s15 !== peg$FAILED) {\n                                peg$savedPos = s10;\n                                s11 = peg$c40(s1, s2, s3, s4, s5, s7, s9, s13);\n                                s10 = s11;\n                              } else {\n                                peg$currPos = s10;\n                                s10 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s10;\n                              s10 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s10;\n                            s10 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                      if (s10 === peg$FAILED) {\n                        s10 = peg$currPos;\n                        s11 = peg$parsesem();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c41(s1, s2, s3, s4, s5, s7, s9);\n                        }\n                        s10 = s11;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c42(s1, s2, s3, s4, s5, s7, s9, s10);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefschema() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    var key    = peg$currPos * 43 + 10,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsedocumentation();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseannotation();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c43(s1, s4);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseannotation();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c43(s1, s4);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c44) {\n          s3 = peg$c44;\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c45); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c46) {\n            s3 = peg$c46;\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c47); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c48) {\n              s3 = peg$c48;\n              peg$currPos += 6;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c49); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$currPos;\n                    s11 = peg$parsedefschemaparam();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        s13 = [];\n                        s14 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s15 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s15 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          s16 = peg$parse_();\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parsedefschemaparam();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                peg$savedPos = s14;\n                                s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                s14 = s15;\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s14;\n                          s14 = peg$FAILED;\n                        }\n                        while (s14 !== peg$FAILED) {\n                          s13.push(s14);\n                          s14 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s15 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s15 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s15 !== peg$FAILED) {\n                            s16 = peg$parse_();\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parsedefschemaparam();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  peg$savedPos = s14;\n                                  s15 = peg$c50(s1, s2, s3, s5, s11, s17);\n                                  s14 = s15;\n                                } else {\n                                  peg$currPos = s14;\n                                  s14 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s14;\n                                s14 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s14;\n                              s14 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s14;\n                            s14 = peg$FAILED;\n                          }\n                        }\n                        if (s13 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c51(s1, s2, s3, s5, s11, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 === peg$FAILED) {\n                      s10 = null;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s11 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse_();\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c52(s1, s2, s3, s5, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s9 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$currPos;\n                      s12 = peg$parseident();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parse_();\n                        if (s13 !== peg$FAILED) {\n                          s14 = [];\n                          s15 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s16 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s16 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s16 !== peg$FAILED) {\n                            s17 = peg$parse_();\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parseident();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$parse_();\n                                if (s19 !== peg$FAILED) {\n                                  peg$savedPos = s15;\n                                  s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                  s15 = s16;\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s15;\n                            s15 = peg$FAILED;\n                          }\n                          while (s15 !== peg$FAILED) {\n                            s14.push(s15);\n                            s15 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s16 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s16 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s16 !== peg$FAILED) {\n                              s17 = peg$parse_();\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parseident();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$parse_();\n                                  if (s19 !== peg$FAILED) {\n                                    peg$savedPos = s15;\n                                    s16 = peg$c55(s1, s2, s3, s5, s7, s12, s18);\n                                    s15 = s16;\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s15;\n                                s15 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s15;\n                              s15 = peg$FAILED;\n                            }\n                          }\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s11;\n                            s12 = peg$c56(s1, s2, s3, s5, s7, s12, s14);\n                            s11 = s12;\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c57(s1, s2, s3, s5, s7, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 123) {\n                      s9 = peg$c36;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = [];\n                        s12 = peg$currPos;\n                        s13 = peg$parsedefdollar();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            peg$savedPos = s12;\n                            s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                            s12 = s13;\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        while (s12 !== peg$FAILED) {\n                          s11.push(s12);\n                          s12 = peg$currPos;\n                          s13 = peg$parsedefdollar();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse_();\n                            if (s14 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c58(s1, s2, s3, s5, s7, s8, s13);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseexpr_internal_3();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 125) {\n                                  s15 = peg$c38;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c59(s1, s2, s3, s5, s7, s8, s11, s13);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsereduction() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;\n\n    var key    = peg$currPos * 43 + 11,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseexpr_internal_2();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c60(s2);\n    }\n    s1 = s2;\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c61;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c62); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_3();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s9 = peg$c63;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c64); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parseexpr_internal_3();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c65(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 59) {\n                  s9 = peg$c63;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c64); }\n                }\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseexpr_internal_3();\n                    if (s11 !== peg$FAILED) {\n                      s12 = peg$parse_();\n                      if (s12 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c65(s5, s11);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c66(s5, s7);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c67;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c68); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c69(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 62) {\n          s5 = peg$c70;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c71); }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseschemacall();\n            if (s7 === peg$FAILED) {\n              s7 = peg$parsevar();\n              if (s7 === peg$FAILED) {\n                s7 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s8 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseexpr_internal_3();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 41) {\n                          s12 = peg$c33;\n                          peg$currPos++;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          peg$savedPos = s7;\n                          s8 = peg$c72(s1, s10);\n                          s7 = s8;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$currPos;\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 40) {\n                  s10 = peg$c27;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                }\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parse_();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$currPos;\n                    s13 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 63) {\n                      s14 = peg$c73;\n                      peg$currPos++;\n                    } else {\n                      s14 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                    }\n                    if (s14 !== peg$FAILED) {\n                      peg$savedPos = s13;\n                      s14 = peg$c75(s1, s7);\n                    }\n                    s13 = s14;\n                    if (s13 === peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                    }\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        s15 = [];\n                        s16 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 44) {\n                          s17 = peg$c29;\n                          peg$currPos++;\n                        } else {\n                          s17 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                        }\n                        if (s17 !== peg$FAILED) {\n                          s18 = peg$parse_();\n                          if (s18 !== peg$FAILED) {\n                            s19 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 63) {\n                              s20 = peg$c73;\n                              peg$currPos++;\n                            } else {\n                              s20 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                            }\n                            if (s20 !== peg$FAILED) {\n                              peg$savedPos = s19;\n                              s20 = peg$c76(s1, s7, s13);\n                            }\n                            s19 = s20;\n                            if (s19 === peg$FAILED) {\n                              s19 = peg$parseobjectexpr();\n                            }\n                            if (s19 !== peg$FAILED) {\n                              s20 = peg$parse_();\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s16;\n                                s17 = peg$c77(s1, s7, s13, s19);\n                                s16 = s17;\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s16;\n                          s16 = peg$FAILED;\n                        }\n                        while (s16 !== peg$FAILED) {\n                          s15.push(s16);\n                          s16 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 44) {\n                            s17 = peg$c29;\n                            peg$currPos++;\n                          } else {\n                            s17 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                          }\n                          if (s17 !== peg$FAILED) {\n                            s18 = peg$parse_();\n                            if (s18 !== peg$FAILED) {\n                              s19 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 63) {\n                                s20 = peg$c73;\n                                peg$currPos++;\n                              } else {\n                                s20 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                              }\n                              if (s20 !== peg$FAILED) {\n                                peg$savedPos = s19;\n                                s20 = peg$c76(s1, s7, s13);\n                              }\n                              s19 = s20;\n                              if (s19 === peg$FAILED) {\n                                s19 = peg$parseobjectexpr();\n                              }\n                              if (s19 !== peg$FAILED) {\n                                s20 = peg$parse_();\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s16;\n                                  s17 = peg$c77(s1, s7, s13, s19);\n                                  s16 = s17;\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s16;\n                            s16 = peg$FAILED;\n                          }\n                        }\n                        if (s15 !== peg$FAILED) {\n                          peg$savedPos = s12;\n                          s13 = peg$c78(s1, s7, s13, s15);\n                          s12 = s13;\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s12;\n                        s12 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s12;\n                      s12 = peg$FAILED;\n                    }\n                    if (s12 === peg$FAILED) {\n                      s12 = null;\n                    }\n                    if (s12 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s13 = peg$c33;\n                        peg$currPos++;\n                      } else {\n                        s13 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                      }\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s8;\n                        s9 = peg$c79(s1, s7, s12);\n                        s8 = s9;\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n              if (s8 === peg$FAILED) {\n                s8 = null;\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$currPos;\n                s10 = peg$parse__();\n                if (s10 !== peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c80) {\n                    s11 = peg$c80;\n                    peg$currPos += 2;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse__();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseexpr_internal_2();\n                      if (s13 !== peg$FAILED) {\n                        peg$savedPos = s9;\n                        s10 = peg$c82(s1, s7, s8, s13);\n                        s9 = s10;\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s9;\n                    s9 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$FAILED;\n                }\n                if (s9 === peg$FAILED) {\n                  s9 = null;\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s3;\n                  s4 = peg$c83(s1, s7, s8, s9);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 62) {\n              s5 = peg$c70;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c71); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseschemacall();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parsevar();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s8 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse_();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseexpr_internal_3();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parse_();\n                          if (s11 !== peg$FAILED) {\n                            if (input.charCodeAt(peg$currPos) === 41) {\n                              s12 = peg$c33;\n                              peg$currPos++;\n                            } else {\n                              s12 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                            }\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s7;\n                              s8 = peg$c72(s1, s10);\n                              s7 = s8;\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  s9 = peg$parse_();\n                  if (s9 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 40) {\n                      s10 = peg$c27;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse_();\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$currPos;\n                        s13 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 63) {\n                          s14 = peg$c73;\n                          peg$currPos++;\n                        } else {\n                          s14 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                        }\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s13;\n                          s14 = peg$c75(s1, s7);\n                        }\n                        s13 = s14;\n                        if (s13 === peg$FAILED) {\n                          s13 = peg$parseobjectexpr();\n                        }\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse_();\n                          if (s14 !== peg$FAILED) {\n                            s15 = [];\n                            s16 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 44) {\n                              s17 = peg$c29;\n                              peg$currPos++;\n                            } else {\n                              s17 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                            }\n                            if (s17 !== peg$FAILED) {\n                              s18 = peg$parse_();\n                              if (s18 !== peg$FAILED) {\n                                s19 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 63) {\n                                  s20 = peg$c73;\n                                  peg$currPos++;\n                                } else {\n                                  s20 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                }\n                                if (s20 !== peg$FAILED) {\n                                  peg$savedPos = s19;\n                                  s20 = peg$c76(s1, s7, s13);\n                                }\n                                s19 = s20;\n                                if (s19 === peg$FAILED) {\n                                  s19 = peg$parseobjectexpr();\n                                }\n                                if (s19 !== peg$FAILED) {\n                                  s20 = peg$parse_();\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s16;\n                                    s17 = peg$c77(s1, s7, s13, s19);\n                                    s16 = s17;\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s16;\n                              s16 = peg$FAILED;\n                            }\n                            while (s16 !== peg$FAILED) {\n                              s15.push(s16);\n                              s16 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 44) {\n                                s17 = peg$c29;\n                                peg$currPos++;\n                              } else {\n                                s17 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                              }\n                              if (s17 !== peg$FAILED) {\n                                s18 = peg$parse_();\n                                if (s18 !== peg$FAILED) {\n                                  s19 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 63) {\n                                    s20 = peg$c73;\n                                    peg$currPos++;\n                                  } else {\n                                    s20 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c74); }\n                                  }\n                                  if (s20 !== peg$FAILED) {\n                                    peg$savedPos = s19;\n                                    s20 = peg$c76(s1, s7, s13);\n                                  }\n                                  s19 = s20;\n                                  if (s19 === peg$FAILED) {\n                                    s19 = peg$parseobjectexpr();\n                                  }\n                                  if (s19 !== peg$FAILED) {\n                                    s20 = peg$parse_();\n                                    if (s20 !== peg$FAILED) {\n                                      peg$savedPos = s16;\n                                      s17 = peg$c77(s1, s7, s13, s19);\n                                      s16 = s17;\n                                    } else {\n                                      peg$currPos = s16;\n                                      s16 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s16;\n                                    s16 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s16;\n                                  s16 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s16;\n                                s16 = peg$FAILED;\n                              }\n                            }\n                            if (s15 !== peg$FAILED) {\n                              peg$savedPos = s12;\n                              s13 = peg$c78(s1, s7, s13, s15);\n                              s12 = s13;\n                            } else {\n                              peg$currPos = s12;\n                              s12 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s12;\n                            s12 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s12;\n                          s12 = peg$FAILED;\n                        }\n                        if (s12 === peg$FAILED) {\n                          s12 = null;\n                        }\n                        if (s12 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 41) {\n                            s13 = peg$c33;\n                            peg$currPos++;\n                          } else {\n                            s13 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                          }\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s8;\n                            s9 = peg$c79(s1, s7, s12);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c80) {\n                        s11 = peg$c80;\n                        peg$currPos += 2;\n                      } else {\n                        s11 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseexpr_internal_2();\n                          if (s13 !== peg$FAILED) {\n                            peg$savedPos = s9;\n                            s10 = peg$c82(s1, s7, s8, s13);\n                            s9 = s10;\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s3;\n                      s4 = peg$c83(s1, s7, s8, s9);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c84(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemacall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 12,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseexpr_internal_3();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefuncall() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    var key    = peg$currPos * 43 + 13,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c27;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c28); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c33;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s1;\n                s2 = peg$c3(s4);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s4 = peg$c27;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$currPos;\n            s7 = peg$parseobjectexpr();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse_();\n              if (s8 !== peg$FAILED) {\n                s9 = [];\n                s10 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s11 = peg$c29;\n                  peg$currPos++;\n                } else {\n                  s11 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    s13 = peg$parseobjectexpr();\n                    if (s13 !== peg$FAILED) {\n                      s14 = peg$parse_();\n                      if (s14 !== peg$FAILED) {\n                        peg$savedPos = s10;\n                        s11 = peg$c85(s1, s7, s13);\n                        s10 = s11;\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s10;\n                  s10 = peg$FAILED;\n                }\n                while (s10 !== peg$FAILED) {\n                  s9.push(s10);\n                  s10 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s11 = peg$c29;\n                    peg$currPos++;\n                  } else {\n                    s11 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                  }\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      s13 = peg$parseobjectexpr();\n                      if (s13 !== peg$FAILED) {\n                        s14 = peg$parse_();\n                        if (s14 !== peg$FAILED) {\n                          peg$savedPos = s10;\n                          s11 = peg$c85(s1, s7, s13);\n                          s10 = s11;\n                        } else {\n                          peg$currPos = s10;\n                          s10 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s10;\n                        s10 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s10;\n                      s10 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s10;\n                    s10 = peg$FAILED;\n                  }\n                }\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c86(s1, s7, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 === peg$FAILED) {\n              s6 = null;\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s7 = peg$c33;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c34); }\n              }\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c87(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c89(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsefunexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 14,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseobjectexpr();\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseobjectexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s9 = peg$c38;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s4;\n                      s5 = peg$c94(s1, s7);\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c95(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseschemaexpr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    var key    = peg$currPos * 43 + 15,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c27;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = peg$parsedefparam();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse_();\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s9 = peg$c29;\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                s11 = peg$parsedefparam();\n                if (s11 !== peg$FAILED) {\n                  s12 = peg$parse_();\n                  if (s12 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c90(s5, s11);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n              s8 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s9 = peg$c29;\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  s11 = peg$parsedefparam();\n                  if (s11 !== peg$FAILED) {\n                    s12 = peg$parse_();\n                    if (s12 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c90(s5, s11);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s8;\n                s8 = peg$FAILED;\n              }\n            }\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c66(s5, s7);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 === peg$FAILED) {\n          s4 = null;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s5 = peg$c33;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s1;\n              s2 = peg$c91(s4);\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c92) {\n        s2 = peg$c92;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_1();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c96(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c97(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c97(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c98(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c99(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetee() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    var key    = peg$currPos * 43 + 16,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    s3 = peg$parseexpr_internal_1();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parse_();\n      if (s4 !== peg$FAILED) {\n        s5 = [];\n        s6 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s7 = peg$c29;\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c30); }\n        }\n        if (s7 !== peg$FAILED) {\n          s8 = peg$parse_();\n          if (s8 !== peg$FAILED) {\n            s9 = peg$parseexpr_internal_1();\n            if (s9 !== peg$FAILED) {\n              s10 = peg$parse_();\n              if (s10 !== peg$FAILED) {\n                peg$savedPos = s6;\n                s7 = peg$c65(s3, s9);\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        while (s6 !== peg$FAILED) {\n          s5.push(s6);\n          s6 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s7 = peg$c29;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s7 !== peg$FAILED) {\n            s8 = peg$parse_();\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parseexpr_internal_1();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parse_();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c65(s3, s9);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s2;\n          s3 = peg$c66(s3, s5);\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = s1;\n      s2 = peg$c100(s2);\n    }\n    s1 = s2;\n    if (s1 !== peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c101) {\n        s2 = peg$c101;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseexpr_internal_2();\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c103(s1, s5);\n          }\n          s4 = s5;\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s5 = peg$c36;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c37); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$currPos;\n                s9 = peg$parsedefdollar();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse_();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s8;\n                    s9 = peg$c104(s1, s9);\n                    s8 = s9;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$FAILED;\n                }\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$currPos;\n                  s9 = peg$parsedefdollar();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$savedPos = s8;\n                      s9 = peg$c104(s1, s9);\n                      s8 = s9;\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$FAILED;\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_internal_3();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s11 = peg$c38;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s4;\n                          s5 = peg$c105(s1, s7, s9);\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c106(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsewith() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23;\n\n    var key    = peg$currPos * 43 + 17,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c107) {\n      s1 = peg$c107;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c27;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parsedocumentation();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parsetex();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 61) {\n                          s11 = peg$c9;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseobjectexpr();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse_();\n                              if (s14 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 41) {\n                                  s15 = peg$c33;\n                                  peg$currPos++;\n                                } else {\n                                  s15 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse_();\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 123) {\n                                      s17 = peg$c36;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse_();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = [];\n                                        s20 = peg$currPos;\n                                        s21 = peg$parsedefdollar();\n                                        if (s21 !== peg$FAILED) {\n                                          s22 = peg$parse_();\n                                          if (s22 !== peg$FAILED) {\n                                            peg$savedPos = s20;\n                                            s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                            s20 = s21;\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s20;\n                                          s20 = peg$FAILED;\n                                        }\n                                        while (s20 !== peg$FAILED) {\n                                          s19.push(s20);\n                                          s20 = peg$currPos;\n                                          s21 = peg$parsedefdollar();\n                                          if (s21 !== peg$FAILED) {\n                                            s22 = peg$parse_();\n                                            if (s22 !== peg$FAILED) {\n                                              peg$savedPos = s20;\n                                              s21 = peg$c109(s5, s6, s7, s9, s13, s21);\n                                              s20 = s21;\n                                            } else {\n                                              peg$currPos = s20;\n                                              s20 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s20;\n                                            s20 = peg$FAILED;\n                                          }\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse_();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseexpr_internal_3();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse_();\n                                              if (s22 !== peg$FAILED) {\n                                                if (input.charCodeAt(peg$currPos) === 125) {\n                                                  s23 = peg$c38;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s23 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c39); }\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c110(s5, s6, s7, s9, s13, s19, s21);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_3() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 18,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsereduction();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_2();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_2() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 19,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsetee();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexpr_internal_1();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseexpr_internal_1() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 20,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseschemacall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseschemaexpr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewith();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s1 = peg$c27;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c28); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseexpr_internal_3();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse_();\n                  if (s4 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s5 = peg$c33;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c3(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseobjectexpr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 21,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsefuncall();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsefunexpr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsevar();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s1 = peg$c27;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseobjectexpr();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s5 = peg$c33;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c3(s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedefdollar() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 22,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s3 = peg$c9;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c10); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_internal_3();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesem();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c111(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetype() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 23,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parsestype();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseftype();\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsestype() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 24,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c112(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseftype() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    var key    = peg$currPos * 43 + 25,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parsetype();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$currPos;\n          s7 = peg$parse_();\n          if (s7 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s8 = peg$c29;\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c30); }\n            }\n            if (s8 !== peg$FAILED) {\n              s9 = peg$parse_();\n              if (s9 !== peg$FAILED) {\n                s10 = peg$parsetype();\n                if (s10 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c113(s4, s10);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$currPos;\n            s7 = peg$parse_();\n            if (s7 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s8 = peg$c29;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parse_();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parsetype();\n                  if (s10 !== peg$FAILED) {\n                    peg$savedPos = s6;\n                    s7 = peg$c113(s4, s10);\n                    s6 = s7;\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c66(s4, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c114) {\n              s5 = peg$c114;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c115); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetype();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s9 = peg$c67;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c116(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsevar() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 26,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseat_var();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedollar_var();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseplain_var();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 27,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseat_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c117(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 28,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parsedollar_ident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c118(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseplain_var() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 29,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c119(s1);\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsekeyword() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 30,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c80) {\n      s0 = peg$c80;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c81); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 5) === peg$c44) {\n        s0 = peg$c44;\n        peg$currPos += 5;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c45); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6) === peg$c4) {\n          s0 = peg$c4;\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c48) {\n            s0 = peg$c48;\n            peg$currPos += 6;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c49); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 6) === peg$c13) {\n              s0 = peg$c13;\n              peg$currPos += 6;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7) === peg$c46) {\n                s0 = peg$c46;\n                peg$currPos += 7;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c7) {\n                  s0 = peg$c7;\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5) === peg$c53) {\n                    s0 = peg$c53;\n                    peg$currPos += 5;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c54); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 4) === peg$c107) {\n                      s0 = peg$c107;\n                      peg$currPos += 4;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseannotation() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 31,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 12) === peg$c120) {\n      s0 = peg$c120;\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 11) === peg$c122) {\n        s0 = peg$c122;\n        peg$currPos += 11;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c123); }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 32,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    peg$silentFails++;\n    s3 = peg$currPos;\n    s4 = peg$parsekeyword();\n    if (s4 !== peg$FAILED) {\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s6 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        s4 = [s4, s5];\n        s3 = s4;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s3 === peg$FAILED) {\n      s2 = void 0;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseat_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 33,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s2 = peg$c21;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedollar_ident() {\n    var s0, s1, s2, s3, s4;\n\n    var key    = peg$currPos * 43 + 34,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s2 = peg$c126;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c124.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c125); }\n      }\n      if (s4 !== peg$FAILED) {\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c124.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c125); }\n          }\n        }\n      } else {\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsedocumentation() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 35,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c128;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s6 = peg$c128;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c129); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s6 = peg$c128;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c128;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c129); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex_attributes() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    var key    = peg$currPos * 43 + 36,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s1 = peg$c61;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse_();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11) === peg$c133) {\n          s3 = peg$c133;\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = [];\n            if (peg$c135.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c136); }\n            }\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                if (peg$c135.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c136); }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = input.substring(s5, peg$currPos);\n            } else {\n              s5 = s6;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s7 = peg$c67;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c68); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c137(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsetex() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    var key    = peg$currPos * 43 + 37,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s1 = peg$c126;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c127); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = [];\n      s4 = peg$currPos;\n      s5 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 36) {\n        s6 = peg$c126;\n        peg$currPos++;\n      } else {\n        s6 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c127); }\n      }\n      peg$silentFails--;\n      if (s6 === peg$FAILED) {\n        s5 = void 0;\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      if (s5 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s6 !== peg$FAILED) {\n          peg$savedPos = s4;\n          s5 = peg$c131(s6);\n          s4 = s5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s6 = peg$c126;\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = void 0;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s6 !== peg$FAILED) {\n            peg$savedPos = s4;\n            s5 = peg$c131(s6);\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = input.substring(s2, peg$currPos);\n      } else {\n        s2 = s3;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 36) {\n          s3 = peg$c126;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c132(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    var key    = peg$currPos * 43 + 38,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c138) {\n      s1 = peg$c138;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c139); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parsenewline();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c130); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parsenewline();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c140) {\n        s1 = peg$c140;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c141); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c142) {\n          s5 = peg$c142;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c143); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c130); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s5 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = void 0;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c130); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c142) {\n            s3 = peg$c142;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c143); }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsenewline() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 39,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.substr(peg$currPos, 2) === peg$c144) {\n      s0 = peg$c144;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s0 = peg$c146;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c147); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s0 = peg$c148;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c149); }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse_() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 40,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c150.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c151); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    var key    = peg$currPos * 43 + 41,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = [];\n    if (peg$c150.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c151); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c150.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c151); }\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsesem() {\n    var s0;\n\n    var key    = peg$currPos * 43 + 42,\n        cached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c63;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c64); }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"],"sourceRoot":""}