{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Parameter.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/PegInterface.ts","webpack://math/./src/ExecutionContext.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/nodes/With.ts","webpack://math/./src/ProofExplorer.ts","webpack://math/./src/Counter.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","trace","doc","tex","_id","toIndentedString","message","error","Error","replace","precedence","code","match","g1","prec","Array","length","console","log","my","normalizePrecedence","your","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","EqualsPriority","Metaexpr","type","super","andFuncalls","expandMetaCache","expandMetaInternal","obj","context","equals","getEqualsPriority","equalsInternal","hypotheses","isProvedInternal","hypnumMap","$Map","has","_type","next","num","expr","getProofInternal","ObjectType","origin","isFunctional","isBaseType","base","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","join","indent","isSimple","toTeXString","Fun","annotations","sealed","rettype","params","parsed","parseTeX","variable","isProved","ONE","placeholders","types","push","selector","thisCall","fun","objCall","Map","set","substitute","start","peek","$lines","def$s","forEach","$","lines","getProof","concat","$num","Variable","canUse","ZERO","FOUR","escapeTeX","$Variable","expandMeta","FIVE","Schema","schemaType","hyps","isProvedCache","cache","_context","repeat","toTeXStringWithId","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","isCallable","expandOnce","THREE","thisIsExpandable","objIsExpandable","every","_","schema","schemalines","funcallToTeXString","Expr0","MetaType","left","right","Parameter","ObjectFun","makeTeX","Type","Tee","lef","TWO","leftlines","rightlines","flat","expanded","grammar","default","Program","parser","scopeMap","filename","loader","scope","loadModuleInternal","fileUri","parse","feed","line","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","hasSchema","addSchema","tee","reduction","schemacall","metavar","ktx","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","includes","getVariable","expr0","isParam","tvo","tv","hasOwnVariable","with","funcall","hypnum","Number","slice","has$","get$","getSchema","$v","def$","hasOwn$","add$","metaexpr","scopeRight","oldContext","using","subject","g","leftargs","as","ExecutionContext","usingList","Reduction","derefs","guess","leftargTypes","leftargsExpanded","reduced","parameter","argument","recurse","ptr","test","leftarglines","leftargnums","subjectlines","subjectnum","With","var","ProofExplorer","DIAMOND","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","pop","ncols","exprToHtml","expand","tree","innertree","Math","max","html","tree2html","newleft","fill","Counter","Scope","parent","typedefMap","defMap","schemaMap","baseType","child","h","values","hasOwnType","broadcast","filter","hasOwnSchema","StackTrace","stack","element","column"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import StackTrace from '../StackTrace';\n\nvar ctr = 0;\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Node {\n\tpublic readonly _id: number;\n\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic precedence: Precedence;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string) {\n\t\tthis._id = ++ctr;\n\t\tthis.trace = trace;\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t}\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Node.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\tpublic static escapeTeX(s) {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static parseTeX(tex) {\n\t\tvar precedence: Precedence = false;\n\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\n\t\t\tprecedence = g1 * 1;\n\t\t\treturn '';\n\t\t});\n\n\t\treturn {precedence, code};\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence) {\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Node.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Node from \"./Node\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable (primitive) */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** Variable (macro) */\n\tFOUR,\n\t/** $Variable, Reduction */\n\tFIVE\n}\n\nexport default abstract class Metaexpr extends Node {\n\t\n\tpublic readonly type: Type;\n\tprivate expandMetaCache: Metaexpr;\n\n\tconstructor(trace: StackTrace, doc: string, tex: string, type: Type) {\n\t\tsuper(trace, doc, tex);\n\n\t\tif (!type) throw Node.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (this.expandMetaCache) return this.expandMetaCache;\n\t\treturn this.expandMetaCache = this.expandMetaInternal(andFuncalls);\n\t}\n\n\tprotected abstract expandMetaInternal(andFuncalls: boolean): Metaexpr;\n\n\tpublic equals(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\t// console.log(`${this}\\n\\n${obj}`);\n\t\t// var ret = (() => {\n\t\t\n\t\tif (this === obj) return true;\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority(context) > this.getEqualsPriority(context))\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\n\t\t// })();\n\t\t// console.log(`${this}\\n\\n${obj}\\n\\n${ret}`);\n\t\t// return ret;\n\t}\n\n\tprotected abstract getEqualsPriority(context: ExecutionContext): EqualsPriority;\n\n\tprotected abstract equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean;\n\n\tpublic isProved(hypotheses?: Metaexpr[]): boolean {\n\t\thypotheses = hypotheses || [];\n\n\t\tfor (var i = 0; i < hypotheses.length; i++) {\n\t\t\tif (hypotheses[i] == this) return true;\n\t\t}\n\n\t\treturn this.isProvedInternal(hypotheses);\n\t}\n\n\tprotected abstract isProvedInternal(hypotheses: Metaexpr[]): boolean;\n\n\tpublic getProof(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (hypnumMap.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: hypnumMap.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: $Map.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\treturn this.getProofInternal(hypnumMap, $Map, ctr, root);\n\t}\n\n\tprotected abstract getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot?: boolean): ProofType[];\n}","import Nameable from './Nameable';\nimport Node from './Node';\nimport Type from './Type';\n\nexport default class ObjectType extends Type implements Nameable {\n\n\tpublic readonly isBaseType: boolean;\n\tpublic readonly name: string;\n\tpublic readonly origin: ObjectType;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor (o) {\n\t\tif (o.origin) {\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.name != 'string')\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\tthis.name = o.name;\n\n\t\t\tif (!(o.origin instanceof ObjectType))\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\n\n\t\t\tthis.origin = o.origin;\n\t\t} else {\n\t\t\tsuper(null, o.doc, null, o.functional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.functional != 'boolean')\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\t\tif (!o.functional) {\n\t\t\t\tif (typeof o.name != 'string')\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\t\tthis.name = o.name;\n\t\t\t} else {\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\n\t\t\t\tif (!(o.to instanceof ObjectType))\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\n\n\t\t\t\tthis.from = o.from;\n\t\t\t\tthis.to = o.to;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toSimpleString() {\n\t\tif (this.name) return this.name;\n\n\t\tvar resolved = this.resolve();\n\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\n\t}\n\n\tpublic toIndentedString(indent): string {\n\t\tif (this.isSimple) return this.name;\n\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean) {\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\n\t\tif (!root && this.name) {\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\t\t}\n\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.origin ? this.origin.resolve() : this;\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof ObjectType)) return false;\n\n\t\tif (this.origin) return this.origin.equals(t);\n\t\tif (t.origin) return this.equals(t.origin);\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) return this === t;\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (var i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Expr0 from './Expr0';\nimport Nameable from './Nameable';\n\nexport default abstract class Fun extends Expr0 implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Parameter[];\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (rettype && expr) {\n\t\t\tif (!rettype.equals(expr.type)) {\n\t\t\t\tthrow Node.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (!rettype && !expr) {\n\t\t\tthrow Node.error('Cannot guess the return type of a primitive fun', trace);\n\t\t}\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Node.error('Cannot seal a primitive fun', trace);\n\t\t}\n\t\t\n\t\tvar precedence = false;\n\n\t\tif (tex) {\n\t\t\tvar parsed = Node.parseTeX(tex);\n\t\t\tprecedence = parsed.precedence;\n\t\t\ttex = parsed.code;\n\t\t} else {\n\t\t\ttex = null;\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\ttrace, doc, tex,\n\t\t\tnew ((rettype || expr.type) instanceof ObjectType ? ObjectType : MetaType)({\n\t\t\t\tfunctional: true,\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: rettype || expr.type as any\n\t\t\t})\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.precedence = precedence;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr && this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Parameter({\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i,\n\t\t\t\tselector: null\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? this.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? obj.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\treturn thisCall.equals(objCall, context);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr0[]): Metaexpr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Illegal arguments length');\n\t\t}\n\n\t\tvar map: Map<Variable, Expr0> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (this instanceof Schema && this.name && !root) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RS',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!this.expr) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\t$Map = new Map($Map);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar $lines: ProofType[] = [];\n\t\t\n\t\tif (this instanceof Schema) {\n\t\t\tthis.def$s.forEach($ => {\n\t\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t$Map.set($, $num);\n\t\t\t});\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'V',\n\t\t\t$lines,\n\t\t\tlines: this.expr.getProof(hypnumMap, $Map, ctr),\n\t\t\tparams: this.params,\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\nimport Counter from '../Counter';\nimport { ProofType } from '../ProofType';\nimport Schema from './Schema';\nimport Parameter from './Parameter';\n\ninterface FunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Metaexpr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport Nameable from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tsealed: boolean;\n\ttype: ObjectType;\n\tname: string;\n\texpr: Expr0;\n}\n\nexport default class Variable extends Expr0 implements Nameable {\n\n\tpublic readonly sealed: boolean;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr0;\n\n\tconstructor ({doc, tex, sealed, type, name, expr}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, doc, tex, type);\n\t\t\n\t\tif (typeof name != 'string')\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Node.error('Cannot seal a primitive fun', trace);\n\t\t}\n\n\t\tif (expr && !type.equals(expr.type)) {\n\t\t\tthrow Node.error(`Expression type ${expr.type} failed to match the type ${type} of variable ${name}`, trace);\n\t\t}\n\n\t\tthis.sealed = sealed;\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (map.has(this)) return map.get(this);\n\n\t\t// 매크로 변수는 스코프 밖에서 보이지 않으므로 치환될 것을 갖지 않는다는\n\t\t// 생각이 들어 있다.\n\t\treturn this;\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\treturn this.expr && (!this.sealed || context.canUse(this))\n\t\t\t? EqualsPriority.FOUR\n\t\t\t: EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!this.expr) return false;\n\n\t\tif (!this.sealed || context.canUse(this)) {\n\t\t\treturn this.expr.equals(obj, context);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\treturn [{\n\t\t\t_type: 'NP',\n\t\t\tctr: ctr.next(),\n\t\t\texpr: this\n\t\t}];\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this instanceof Parameter ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex\n\t\t\t|| (\n\t\t\t\tthis.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.name)}}`\n\t\t\t);\n\t\t\n\t\tvar expr = root && this.expr\n\t\t\t? `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`\n\t\t\t: '';\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}${expr}`;\n\t}\n}\n\nimport Parameter from './Parameter';","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport Nameable from \"./Nameable\";\nimport Node, { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Metaexpr;\n}\n\nexport default class $Variable extends Metaexpr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tif (!$Map.has(this)) {\n\t\t\tthrow Error(`${this.name} is not defined`);\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'R',\n\t\t\tctr: ctr.next(),\n\t\t\tnum: $Map.get(this),\n\t\t\texpr: this.expr\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\n\t}\n}","import Fun from \"./Fun\";\n\nexport type SchemaType = 'axiom' | 'theorem' | 'schema';\n\nexport default class Schema extends Fun {\n\n\tpublic readonly schemaType: SchemaType;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, schemaType, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Node.error('wut', trace);\n\t\t}\n\n\t\tif (schemaType != 'schema' && !name) {\n\t\t\tthrow Node.error(`wut`, trace);\n\t\t}\n\n\t\tsuper({doc, tex, annotations, sealed: false, rettype: null, name, params, expr}, trace);\n\t\t\n\t\tthis.schemaType = schemaType;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\n\t\tif (schemaType == 'theorem') {\n\t\t\tif (!this.isProved()) {\n\t\t\t\tthrow Node.error(`Schema ${name} is marked as a theorem but it is not proved`, trace);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic isProved(hyps?) {\n\t\tif (this.isProvedCache) return true;\n\n\t\tif (!hyps && typeof this.isProvedCache == 'boolean') {\n\t\t\treturn this.isProvedCache;\n\t\t}\n\n\t\tvar cache = !hyps || !hyps.length;\n\t\thyps = hyps || [];\n\t\t\n\t\tvar ret = this.schemaType == 'axiom' || super.isProved(hyps);\n\t\tif (cache) this.isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = `schema-${this.isProved() ? 'p' : 'np'}-${this.name}`;\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}\\\\mathsf{${Node.escapeTeX(this.name)}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.selector ? `: \\\\texttt{@${e.selector}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport Parameter from \"./Parameter\";\n\ninterface SchemaArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tschemaType: SchemaType;\n\tname: string;\n\tparams: Parameter[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectFun from './ObjectFun';\nimport ObjectType from './ObjectType';\nimport Schema from './Schema';\nimport Variable from './Variable';\n\ninterface FuncallArgumentType {\n\tfun: Metaexpr;\n\targs: Expr0[];\n}\n\nexport default class Funcall extends Expr0 {\n\t\n\tpublic readonly fun: Metaexpr;\n\tpublic readonly args: Expr0[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (fun.type.isSimple) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Node.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(trace, null, null, resolvedType.to);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.fun.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\twhile (callee instanceof Variable && callee.expr) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): Metaexpr {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\twhile (callee instanceof Variable && callee.expr) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn new Funcall({\n\t\t\t\tfun: callee.expandOnce(context),\n\t\t\t\targs: this.args\n\t\t\t}, this.trace);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\treturn callee.call(this.args);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (this.fun == obj.fun || this.fun.equals(obj.fun, context)) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\treturn this.equals(obj.expandOnce(context), context);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn this.args[i].equals(obj.args[i], context);\n\t\t\t})) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\treturn this.equals(obj.expandOnce(context), context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\n\t\tif (hypnumMap.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: hypnumMap.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: $Map.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (this.fun instanceof Schema && this.fun.name) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RCX',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!(this.fun instanceof Schema)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tvar schemalines = this.fun.getProof(hypnumMap, $Map, ctr);\n\n\t\treturn [\n\t\t\t...schemalines,\n\t\t\t{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: this.fun.name.length == 1\n\t\t\t\t\t? Node.escapeTeX(this.fun.name)\n\t\t\t\t\t: `\\\\mathrm{${Node.escapeTeX(this.fun.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import Metaexpr from \"./Metaexpr\";\n\nexport default abstract class Expr0 extends Metaexpr {\n\t\n}","import Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\n\ninterface SimpleMetaTypeArgumentType {\n\tfunctional: false;\n\tleft: Type[];\n\tright: Type;\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfunctional: true;\n\tfrom: ObjectType[];\n\tto: MetaType;\n}\n\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\n\nexport default class MetaType extends Type {\n\t\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: MetaType;\n\n\tconstructor (o: MetaTypeArgumentType) {\n\t\tsuper(null, null, null, o.functional);\n\n\t\tif (typeof o.functional != 'boolean')\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\tif (o.functional == false) {\n\t\t\tif (!(o.left instanceof Array))\n\t\t\t\tthrow Node.error('left should be an array', null);\n\n\t\t\tthis.left = o.left;\n\t\t\tthis.right = o.right;\n\t\t} else {\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\n\t\t\tif (!(o.to instanceof MetaType))\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\n\n\t\t\tif (o.to.isFunctional)\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\n\n\t\t\tthis.from = o.from;\n\t\t\tthis.to = o.to;\n\t\t}\n\t}\n\n\tpublic resolve(): MetaType {\n\t\treturn this;\n\t}\n\n\tpublic toIndentedString(indent: number) {\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\n\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof MetaType)) return false;\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\tif (!this.right.equals(t.right)) return false;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (let i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\n\ninterface ParameterArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tselector: string;\n}\n\nexport default class Parameter extends Variable {\n\n\tpublic readonly selector: string;\n\n\tconstructor ({doc, tex, type, name, selector}: ParameterArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, sealed: false, type, name, expr: null}, trace);\n\n\t\tthis.selector = selector;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Parameter from \"./Parameter\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\ninterface ObjectFunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr0;\n}\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, rettype, name, params, expr}, trace);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.canUse(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}\\\\mathrm{${Node.escapeTeX(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${this.name.length == 1 ? Node.escapeTeX(this.name) : `\\\\mathrm{${Node.escapeTeX(this.name)}}`}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Node from \"./Node\";\n\nexport default abstract class Type extends Node {\n\tpublic readonly isFunctional: boolean;\n\tpublic readonly isSimple: boolean;\n\t\n\tpublic abstract equals(t: Type): boolean;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string, isFunctional: boolean) {\n\t\tsuper(trace, doc, tex);\n\t\tthis.isFunctional = isFunctional;\n\t\tthis.isSimple = !isFunctional;\n\t}\n\n\tpublic abstract resolve(): Type;\n}","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Metaexpr[];\n\tdef$s: $Variable[];\n\tright: Metaexpr;\n}\n\nexport default class Tee extends Metaexpr {\n\n\tpublic readonly left: Metaexpr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Metaexpr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof MetaType;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (right.type.isFunctional) {\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', trace);\n\t\t}\n\n\t\tsuper(trace, null, null, new MetaType({\n\t\t\tfunctional: false,\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}));\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Node.PREC_COMMA;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.right.isProved(hypotheses.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft,\n\t\t\tdef$s: null,\n\t\t\tright\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, def$s: null, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\thypnumMap = new Map(hypnumMap);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar leftlines: ProofType[] = this.left.map(l => {\n\t\t\thypnumMap.set(l, ctr.next());\n\t\t\t\n\t\t\treturn {\n\t\t\t\t_type: 'H',\n\t\t\t\tctr: ctr.peek(),\n\t\t\t\texpr: l\n\t\t\t};\n\t\t});\n\n\t\t$Map = new Map($Map);\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [{\n\t\t\t_type: 'T',\n\t\t\tleftlines: leftlines as any,\n\t\t\trightlines: $lines.concat(this.right.getProof(hypnumMap, $Map, ctr)),\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","var grammar;\n\nif (process.env.__webpack__) {\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\n} else {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n}\n\nvar Program = require('./Program').default;\n\nmodule.exports = {grammar, Program};","export default \"start =\\n\\t_ lines:(a:line _ {return a})* {return lines}\\n\\nline =\\n\\timport\\n\\t/ typedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\nevaluable =\\n\\t_ e:evaluable_internal _ {return e}\\n\\nevaluable_internal =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\t/ metaexpr\\n\\nimport =\\n\\t'import' __\\n\\tfilename:ident _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'import',\\n\\t\\t\\tfilename,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntypedef =\\n\\tdoc:(documentation __)?\\n\\tbase:(\\\"base\\\" __)?\\n\\t\\\"type\\\" __\\n\\torigin:(o:ftype __ {return o})?\\n\\tname:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'typedef',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tbase: !!base,\\n\\t\\t\\torigin,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefv =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\ttype:type __\\n\\tname:ident _\\n\\texpr:(\\n\\t\\t\\\"=\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\tsem\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: false,\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschemaparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\tselector:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tselector,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n \\ndefun =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\trettype:type __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\texpr:(\\n\\t\\t\\\"{\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defun',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\trettype,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschema =\\n\\tdoc:(documentation __)?\\n\\tannotations: (a:annotation __ {return a})*\\n\\tschemaType:('axiom' / 'theorem' / 'schema') __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defschemaparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\tusing:(\\n\\t\\t'using' __\\n\\t\\tx:(\\n\\t\\t\\thead:ident _\\n\\t\\t\\ttail:(',' _ n:ident _ {return n})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)\\n\\t\\t{return x}\\n\\t)?\\n\\t\\\"{\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t\\\"}\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defschema',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tannotations,\\n\\t\\t\\tschemaType,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\tusing: using || [],\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// var[...]\\n// foo(...)[...]\\n// foo[...][...]\\n// (metaexpr)[...]\\n// schema(?, ...)[...]\\nreduction =\\n\\tsubject:(\\n\\t\\tschemacall\\n\\t\\t/ var\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:metaexpr _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:('?' {return null} / expr0) _\\n\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)?\\n\\tleftargs:(\\n\\t\\t\\\"[\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:metaexpr _\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\"]\\\"\\n\\t\\tb:(\\n\\t\\t\\t_ '[' _\\n\\t\\t\\t'as' __\\n\\t\\t\\tm:metaexpr _\\n\\t\\t\\t']'\\n\\t\\t\\t{return m}\\n\\t\\t)?\\n\\t\\t{return {a: a || [], b: b || null}}\\n\\t)+\\n\\t{\\n\\t\\tvar ret = {\\n\\t\\t\\t_type: 'reduction',\\n\\t\\t\\tsubject,\\n\\t\\t\\targs,\\n\\t\\t\\tleftargs: leftargs[0].a,\\n\\t\\t\\tas: leftargs[0].b,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\n\\t\\tfor (var i = 1; i < leftargs.length; i++) {\\n\\t\\t\\tret = {\\n\\t\\t\\t\\t_type: 'reduction',\\n\\t\\t\\t\\tsubject: ret,\\n\\t\\t\\t\\targs: null,\\n\\t\\t\\t\\tleftargs: leftargs[i].a,\\n\\t\\t\\t\\tas: leftargs[i].b,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t};\\n\\t\\t}\\n\\n\\t\\treturn ret;\\n\\t}\\n\\n// var(...)\\n// (metaexpr)(...)\\nschemacall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemacall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// forall(f, g)\\n// (expr0)(f, g)\\nfuncall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:expr0 _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funcall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => expr0\\n// (T t) => { expr0 }\\nfunexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\texpr:(\\n\\t\\texpr0\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => metaexpr_internal_1\\n// (T t) => { $foo = ...; metaexpr }\\nschemaexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_1\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemaexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\texpr: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nwith =\\n\\t'with' _ '(' _\\n\\ttex:(tex __)?\\n\\ttype:type __\\n\\tvarname:ident _\\n\\t\\\"=\\\" _\\n\\tvarexpr:expr0 _\\n\\t')' _ '{' _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t'}'\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'with',\\n\\t\\t\\twith: {\\n\\t\\t\\t\\t_type: 'defv',\\n\\t\\t\\t\\tisParam: false,\\n\\t\\t\\t\\tdoc: null,\\n\\t\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\t\\tsealed: false,\\n\\t\\t\\t\\ttype,\\n\\t\\t\\t\\tname: varname,\\n\\t\\t\\t\\texpr: varexpr,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t},\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nmetaexpr =\\n\\tleft:(\\n\\t\\tl:(\\n\\t\\t\\thead:metaexpr_internal_1 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)? {return l || []}\\n\\t)\\n\\t\\\"|-\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\tright:metaexpr\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'tee',\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\tleft,\\n\\t\\t\\tright,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\t/ metaexpr_internal_1\\n\\n/*\\n * 다음이 성립하여야 한다.\\n *\\n * - reduction이 schemacall보다 앞이다.\\n * - schemacall이 var보다 앞이다.\\n *\\n */\\nmetaexpr_internal_1 =\\n\\treduction\\n\\t/ schemacall\\n\\t/ var\\n\\t/ schemaexpr\\n\\t/ with\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\n\\nexpr0 =\\n\\tfuncall\\n\\t/ funexpr\\n\\t/ var\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\n\\ndefdollar =\\n\\tname:dollar_ident _\\n\\t'=' _\\n\\texpr:metaexpr _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'def$',\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\t}\\n\\ntype =\\n\\tstype\\n\\t/ ftype\\n\\nstype =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: false,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nftype =\\n\\t\\\"[\\\" _\\n\\tfrom:(\\n\\t\\ttype:type {return [type]}\\n\\t\\t/ (\\n\\t\\t\\ttt:(\\n\\t\\t\\t\\t\\\"(\\\" _\\n\\t\\t\\t\\thead: type\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\n\\t\\t\\t\\t_ \\\")\\\"\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)\\n\\t\\t\\t{return tt}\\n\\t\\t)\\n\\t) _\\n\\t\\\"->\\\" _\\n\\tto:type _\\n\\t\\\"]\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: true,\\n\\t\\t\\tfrom,\\n\\t\\t\\tto,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nvar =\\n\\tat_var\\n\\t/ dollar_var\\n\\t/ plain_var\\n\\nat_var =\\n\\tname:at_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '@',\\n\\t\\t\\tname: name.slice(1),\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndollar_var =\\n\\tname:dollar_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '$',\\n\\t\\t\\tname: name,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nplain_var =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: 'normal',\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nkeyword =\\n\\t'as'\\n\\t/ 'axiom'\\n\\t/ 'base'\\n\\t/ 'import'\\n\\t/ 'schema'\\n\\t/ 'sealed'\\n\\t/ 'type'\\n\\t/ 'using'\\n\\t/ 'with'\\n\\nannotation =\\n\\t'@discouraged'\\n\\t/ '@deprecated'\\n\\nident =\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\n\\nat_ident =\\n\\t$('@' [a-zA-Z0-9_]+)\\n\\ndollar_ident =\\n\\t$('$' [a-zA-Z0-9_]+)\\n\\ndocumentation =\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\n\\t\\treturn b\\n\\t}\\n\\ntex =\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\n\\t\\treturn b\\n\\t}\\n\\ncomment =\\n\\t\\\"#\\\" (!newline .)*\\n\\t/ \\\"//\\\" (!newline .)*\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\n\\nnewline =\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\n\\n// optional whitespace\\n_ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\n\\n// mandatory whitespace\\n__ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\n\\nsem =\\n\\t\\\";\\\"\";","import PegInterface from './PegInterface';\nimport { EvaluableObject, LineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport default class Program {\n\tpublic scope: Scope;\n\tpublic readonly parser;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\t\n\tconstructor (parser) {\n\t\tif (!parser) throw Error('no');\n\t\tthis.parser = parser;\n\t}\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\t\tvar parsed = this.parser.parse(code);\n\n\t\tawait this.feed(parsed, scope, loader);\n\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(lines: LineObject[], scope: Scope=this.scope, loader) {\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(line: EvaluableObject) {\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './nodes/$Variable';\nimport Expr0 from './nodes/Expr0';\nimport Fun from './nodes/Fun';\nimport Funcall from './nodes/Funcall';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Parameter from './nodes/Parameter';\nimport Reduction from './nodes/Reduction';\nimport Schema, { SchemaType } from './nodes/Schema';\nimport Tee from './nodes/Tee';\nimport Variable from './nodes/Variable';\nimport With from './nodes/With';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject, WithObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\t\tvar base: boolean = obj.base;\n\n\t\tif (base && origin) {\n\t\t\tthrow scope.error('Base type should not be an alias');\n\t\t}\n\n\t\tif (origin) {\n\t\t\treturn new ObjectType({\n\t\t\t\tname,\n\t\t\t\tdoc,\n\t\t\t\tbase,\n\t\t\t\torigin\n\t\t\t});\n\t\t}\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: false,\n\t\t\tname,\n\t\t\tdoc,\n\t\t\tbase\n\t\t});\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\tvar expr = obj.expr ? PI.expr0(obj.expr, scope) : null;\n\n\t\tif (obj.isParam) {\n\t\t\treturn new Parameter({\n\t\t\t\tdoc: obj.doc,\n\t\t\t\ttex: obj.tex,\n\t\t\t\ttype,\n\t\t\t\tname: obj.name,\n\t\t\t\tselector: obj.selector || null\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new Variable({\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex,\n\t\t\tsealed: !!obj.sealed,\n\t\t\ttype,\n\t\t\tname: obj.name,\n\t\t\texpr: expr || null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('fun', obj._type == 'defun' ? obj.name : '<anonymous>', obj.location);\n\n\t\tvar doc = null,\n\t\t\ttex = null,\n\t\t\tsealed = false,\n\t\t\trettype: ObjectType = null,\n\t\t\tname = null,\n\t\t\texpr = null;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tdoc = obj.doc;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t\t\n\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype))) {\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\t\t\t}\n\n\t\t\trettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\t\t\tname = obj.name;\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tif (obj.expr) {\n\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, rettype, name, params, expr, doc, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr0(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.expr0(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope, context: ExecutionContext): Metaexpr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var', 'with'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tcase 'with':\n\t\t\t\treturn PI.with(obj, scope, context);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static with(obj: WithObject, parentScope: Scope, context: ExecutionContext): With {\n\t\tif (obj._type != 'with') {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('with', null, obj.location);\n\n\t\tvar tv = PI.variable(obj.with, scope);\n\n\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\n\t\tif (!(tv instanceof Variable)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tscope.addVariable(tv);\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new With({\n\t\t\tvariable: tv,\n\t\t\tdef$s,\n\t\t\texpr\n\t\t}, scope.trace);\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.metaexpr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar schemaType: SchemaType = 'schema',\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\tschemaType = obj.schemaType;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: (Variable | ObjectFun)[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!fun.expr) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, tex: null, annotations, schemaType, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.metaexpr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.expr0(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.metaexpr(obj.subject, scope, context);\n\n\t\tvar args = !obj.args\n\t\t\t? null\n\t\t\t: obj.args.map(g => {\n\t\t\t\treturn g && PI.expr0(g, scope);\n\t\t\t});\n\n\t\tvar leftargs = obj.leftargs.map(obj => {\n\t\t\treturn PI.metaexpr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.metaexpr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\targs,\n\t\t\tleftargs,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import ObjectFun from \"./nodes/ObjectFun\";\nimport Variable from \"./nodes/Variable\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: (Variable | ObjectFun)[];\n\n\tconstructor (usingList?: (Variable | ObjectFun)[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic canUse(fun: Variable | ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Tee from './Tee';\nimport Variable from './Variable';\n\ninterface ReductionArgumentType {\n\tsubject: Metaexpr;\n\targs: (Expr0 | null)[];\n\tleftargs: Metaexpr[];\n\tas: Metaexpr;\n}\n\nexport default class Reduction extends Metaexpr {\n\t\n\tpublic readonly subject: Metaexpr;\n\tpublic readonly args: (Expr0 | null)[];\n\tpublic readonly leftargs: Metaexpr[];\n\tpublic readonly reduced: Metaexpr;\n\n\tconstructor ({subject, args, leftargs, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (args) {\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = args.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(args && args[i]) && !p.selector) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (args && args[i]) return args[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false) as Tee;\n\t\n\t\t\t\treturn Reduction.guess(\n\t\t\t\t\tp.selector,\n\t\t\t\t\ttee.left, leftargs,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (args) {\n\t\t\tthrow Node.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\n\t\t\tthrow Node.error('Subject is not reducible', trace);\n\t\n\t\tif (!(leftargs instanceof Array)\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tleftargTypes = leftargs.map(e => e.type);\n\n\t\tif (paramTypes.length != leftargTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(trace, null, null, subject.type.right);\n\n\t\tthis.subject = subject;\n\t\tthis.leftargs = leftargs;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tvar leftargsExpanded = leftargs.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tif (!tee.left[i].equals(leftargsExpanded[i], context)) {\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${leftargs[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (as) {\n\t\t\tif (!tee.right.equals(as, context)) {\n\t\t\t\tthrow Node.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.reduced = as;\n\t\t} else {\n\t\t\tthis.reduced = tee.right;\n\t\t}\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.subject.isProved(hypotheses)\n\t\t\t&& this.leftargs.every(l => l.isProved(hypotheses));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.reduced.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.reduced.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.reduced.equals(obj, context);\n\t}\n\n\tpublic static guess(\n\t\t\tselector: string,\n\t\t\tleft: Metaexpr[], leftargs: Metaexpr[],\n\t\t\tright: Metaexpr, as: Metaexpr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace): Metaexpr {\n\t\t\n\t\tif (selector.length == 0) throw Node.error('wut', trace);\n\n\t\tvar parameter: Metaexpr, argument: Metaexpr;\n\n\t\tif (selector[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tparameter = right;\n\t\t\targument = as;\n\t\t} else {\n\t\t\tvar n = Number(selector[0]);\n\n\t\t\tif (!(1 <= n && n <= leftargs.length))\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent index out of range`, trace);\n\n\t\t\tparameter = left[n - 1];\n\t\t\targument = leftargs[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tptr: number,\n\t\t\t\tparameter: Metaexpr, argument: Metaexpr): Metaexpr {\n\t\t\t\n\t\t\targument = argument.expandMeta(true);\n\t\t\t\n\t\t\tif (selector.length <= ptr) return argument;\n\n\t\t\tif (/^[0-9]$/.test(selector[ptr])) {\n\t\t\t\tvar n = Number(selector[ptr]);\n\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\tif (parameter.left.length != argument.left.length) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= argument.left.length)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(ptr + 1, parameter.left[n - 1], argument.left[n - 1]);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\twhile (argument instanceof Variable && argument.expr) {\n\t\t\t\t\t\targument = argument.expr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(parameter instanceof Funcall && argument instanceof Funcall)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parameter.fun.equals(argument.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!argument.isExpandable(context)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\targument = argument.expandOnce(context);\n\t\t\t\t}\n\n\t\t\t\tif (!(1 <= n && n <= argument.args.length))\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\n\t\t\t\treturn recurse(ptr + 1, parameter.args[n - 1], argument.args[n - 1]);\n\t\t\t} else if (selector[ptr] == 'r') {\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\treturn recurse(ptr + 1, parameter.right, argument.right);\n\t\t\t\t}\n\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t}\n\n\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t})(1, parameter, argument);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tvar leftarglines: ProofType[] = [];\n\t\tvar leftargnums: (number | [number, number])[] = this.leftargs.map(l => {\n\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\tif ($Map.has(l)) return $Map.get(l);\n\n\t\t\tvar lines = l.getProof(hypnumMap, $Map, ctr);\n\t\t\tleftarglines = leftarglines.concat(lines);\n\t\t\treturn lines[lines.length - 1].ctr;\n\t\t});\n\t\t\n\t\tvar args: Expr0[] = null;\n\t\tvar subjectlines: ProofType[] = [];\n\t\tvar subjectnum = hypnumMap.get(this.subject)\n\t\t\t|| $Map.get(this.subject)\n\t\t\t|| (this.subject instanceof Funcall && $Map.has(this.subject.fun)\n\t\t\t\t? (args = this.subject.args, $Map.get(this.subject.fun))\n\t\t\t\t: false)\n\t\t\t|| ((s => s instanceof Fun && s.name\n\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(this.subject)\n\t\t\t\t? this.subject\n\t\t\t\t: (subjectlines = this.subject.getProof(hypnumMap, $Map, ctr))[subjectlines.length-1].ctr);\n\n\t\treturn [\n\t\t\t...leftarglines,\n\t\t\t...subjectlines,\n\t\t\t{\n\t\t\t\t_type: 'E',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tsubject: subjectnum,\n\t\t\t\targs,\n\t\t\t\tleftargs: leftargnums,\n\t\t\t\treduced: this.reduced\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar leftargs: any = this.leftargs.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (leftargs.join('').length <= 50) {\n\t\t\tleftargs = this.leftargs.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\tleftargs = leftargs.join(', ');\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tleftargs,\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\t\telse {\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\t'\\t' + leftargs,\n\t\t\t\t']'\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface WithArgumentType {\n\tvariable: Variable;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}\n\nexport default class With extends Metaexpr {\n\n\tpublic readonly variable: Variable;\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor({variable, def$s, expr}: WithArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tthis.variable = variable;\n\t\tthis.def$s = def$s;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (map.has(this.variable))\n\t\t\tthrow Error('Parameter collision');\n\t\t\n\t\tmap = new Map(map);\n\n\t\treturn this.expandMeta(false).substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar map = new Map<Variable, Expr0>();\n\t\tmap.set(this.variable, this.variable.expr);\n\n\t\treturn this.expr.substitute(map).expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getProofInternal(hypnumMap: Map<Metaexpr, number>, $Map: Map<Metaexpr, number | [number, number]>, ctr: Counter, root?: boolean): ProofType[] {\n\n\t\t$Map = new Map($Map);\n\n\t\tvar def: ProofType = {\n\t\t\t_type: 'def',\n\t\t\tctr: ctr.next(),\n\t\t\tvar: this.variable\n\t\t};\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [\n\t\t\tdef,\n\t\t\t...$lines,\n\t\t\t...this.expr.getProof(hypnumMap, $Map, ctr)\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}","import Counter from \"./Counter\";\nimport Metaexpr from \"./nodes/Metaexpr\";\nimport Schema from \"./nodes/Schema\";\nimport Variable from \"./nodes/Variable\";\nimport { ProofType } from \"./ProofType\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx): string {\n\t\tvar DIAMOND = '&#x25C7;',\n\t\t\tDOWN = '&#x25BC;';\n\t\t// var UP = '&#x25B2;';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar expr = scope.getSchema(name);\n\n\t\tif (!(expr instanceof Schema)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr: number | [number, number] | Metaexpr, expand?: boolean): string {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true, true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true, true));\n\t\t}\n\n\t\tvar tree = expr.getProof(new Map(), new Map(), new Counter(), true);\n\n\t\tvar innertree: ProofType[] = (tree[0] as any).$lines.concat((tree[0] as any).lines);\n\n\t\tvar ncols = (function recurse(tree: ProofType[]): number {\n\t\t\treturn Math.max(...tree.map(t => {\n\t\t\t\tswitch (t._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.lines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.leftlines),\n\t\t\t\t\t\t\trecurse(t.rightlines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}));\n\t\t})(innertree);\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines: ProofType[], left: Variable[][]) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\t\tvar params = line.params.slice();\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\tcase 'RCX':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'def':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.var),\n\t\t\t\t\t\t\t'definition'\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow Error(`Unknown type ${(line as any)._type}`);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(innertree, []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","export default class Counter {\n\n\tprivate n: number;\n\n\tconstructor (start: number=0) {\n\t\tthis.n = start;\n\t}\n\n\tpublic peek(): number {\n\t\treturn this.n;\n\t}\n\n\tpublic next(): number {\n\t\treturn ++this.n;\n\t}\n}","import $Variable from './nodes/$Variable';\nimport Fun from './nodes/Fun';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Schema from './nodes/Schema';\nimport Variable from './nodes/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Metaexpr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\tpublic baseType: ObjectType;\n\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\n\t\tthis.baseType = parent ? parent.baseType : null;\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: ObjectType): ObjectType {\n\t\tif (!(type instanceof ObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tif (type.isBaseType) {\n\t\t\tif (this.baseType) {\n\t\t\t\tthrow this.error('A base type already exists');\n\t\t\t}\n\n\t\t\t(function broadcast(scope: Scope) {\n\t\t\t\tscope.baseType = type;\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\n\t\t\t})(this);\n\t\t}\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: true,\n\t\t\tfrom,\n\t\t\tto\n\t\t});\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}"],"sourceRoot":""}