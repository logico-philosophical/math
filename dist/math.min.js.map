{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Parameter.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/ExecutionContext.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/PegInterface.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/nodes/With.ts","webpack://math/./src/ProofExplorer.ts","webpack://math/./src/Counter.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","trace","doc","tex","_id","toIndentedString","message","error","Error","prec","Array","length","console","log","my","normalizePrecedence","precedence","your","replace","code","match","g1","regex","RegExp","join","capitalize","charCodeAt","commandName","toLowerCase","toUpperCase","substring","escapeTeX","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","EqualsPriority","Metaexpr","type","super","andFuncalls","expandMetaCache","expandMetaInternal","obj","context","equals","getEqualsPriority","equalsInternal","hypotheses","isProvedInternal","hypnumMap","$Map","has","_type","next","num","expr","getProofInternal","ObjectType","origin","isFunctional","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","indent","isSimple","toTeXString","Fun","annotations","sealed","rettype","params","parsed","parseTeX","variable","isProved","ONE","placeholders","types","push","selector","usedMacrosList","thisCall","fun","objCall","concat","Map","set","substitute","start","peek","$lines","def$s","forEach","$","lines","getProof","$num","Schema","schemaType","hyps","isProvedCache","cache","expandMeta","_context","repeat","proved","toTeXStringWithId","Variable","canUse","ZERO","FOUR","tmp","makeTeXName","$Variable","FIVE","Parameter","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","isCallable","used","expanded","calleeExpanded","expandOnce","THREE","T","q","thisIsExpandable","objIsExpandable","every","_","schema","schemalines","funcallToTeXString","Expr0","MetaType","left","right","ObjectFun","makeTeX","ExecutionContext","usingList","includes","Type","Tee","lef","TWO","leftlines","rightlines","flat","grammar","default","Program","parser","scopeMap","filename","loader","loadingModules","scope","loadModuleInternal","loadingModuleIndex","indexOf","cycle","slice","fileUri","parse","feed","pop","line","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","hasSchema","addSchema","tee","reduction","schemacall","metavar","ktx","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","getVariable","expr0","isParam","tvo","tv","hasOwnVariable","with","funcall","hypnum","Number","has$","get$","getSchema","$v","def$","hasOwn$","add$","metaexpr","scopeRight","oldContext","using","subject","g","antecedents","as","Reduction","derefs","guess","antecedentTypes","requiredAntecedents","antecedentEqualsResults","fill","antecedentsExpanded","preFormatConsequent","rightEqualsResult","consequent","antecedentLinesList","antecedentNums","ref","of","subjectlines","subjectnum","reduced","pattern","instance","recurse","ptr","test","With","var","ProofExplorer","DIAMOND","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","ncols","exprToHtml","expand","tree","innertree","Math","max","html","tree2html","newleft","v","Counter","Scope","parent","typedefMap","defMap","schemaMap","child","h","values","hasOwnType","filter","hasOwnSchema","StackTrace","stack","element","column"],"mappings":"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","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import StackTrace from '../StackTrace';\n\nvar ctr = 0;\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Node {\n\tpublic readonly _id: number;\n\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic precedence: Precedence;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string) {\n\t\tthis._id = ++ctr;\n\t\tthis.trace = trace;\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t}\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Node.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence): boolean {\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Node.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic static escapeTeX(s: string): string {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static parseTeX(tex: string) {\n\t\tvar precedence: Precedence = false;\n\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\n\t\t\tprecedence = g1 * 1;\n\t\t\treturn '';\n\t\t});\n\n\t\treturn {precedence, code};\n\t}\n\n\tpublic static makeTeXName(name: string): string {\n\t\tvar alphabet = [\n\t\t\t\"alpha\", \"beta\", \"gamma\", \"delta\",\n\t\t\t\"epsilon\", \"zeta\", \"eta\", \"theta\",\n\t\t\t\"iota\", \"kappa\", \"lambda\", \"mu\",\n\t\t\t\"nu\", \"xi\", \"omicron\", \"pi\",\n\t\t\t\"rho\", \"sigma\", \"tau\", \"upsilon\",\n\t\t\t\"phi\", \"chi\", \"psi\", \"omega\"\n\t\t];\n\n\t\tvar regex = new RegExp(`^(?:([a-z])|(${alphabet.join('|')}))([0-9]*)$`, 'i');\n\t\tvar match = name.match(regex);\n\n\t\tif (match) {\n\t\t\tvar letter = (() => {\n\t\t\t\tif (match[1]) return match[1];\n\t\t\t\t\n\t\t\t\tvar capitalize = match[2].charCodeAt(0) <= 'Z'.charCodeAt(0);\n\t\t\t\tvar commandName = match[2].toLowerCase();\n\n\t\t\t\tif (capitalize) {\n\t\t\t\t\tcommandName = commandName[0].toUpperCase() + commandName.substring(1);\n\t\t\t\t}\n\n\t\t\t\treturn '\\\\' + commandName;\n\t\t\t})();\n\n\t\t\tvar subscript = (() => {\n\t\t\t\tif (!match[3]) return '';\n\t\t\t\tif (match[3].length == 1) return '_' + match[3];\n\t\t\t\treturn `_{${match[3]}}`;\n\t\t\t})();\n\n\t\t\treturn letter + subscript;\n\t\t}\n\n\t\tif (name.length == 1) {\n\t\t\treturn Node.escapeTeX(name);\n\t\t}\n\n\t\treturn `\\\\mathrm{${Node.escapeTeX(name)}}`;\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Node from \"./Node\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable (primitive) */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** Variable (macro) */\n\tFOUR,\n\t/** $Variable, Reduction */\n\tFIVE\n}\n\nexport default abstract class Metaexpr extends Node {\n\t\n\tpublic readonly type: Type;\n\tprivate expandMetaCache: Metaexpr;\n\n\tconstructor(trace: StackTrace, doc: string, tex: string, type: Type) {\n\t\tsuper(trace, doc, tex);\n\n\t\tif (!type) throw Node.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (this.expandMetaCache) return this.expandMetaCache;\n\t\treturn this.expandMetaCache = this.expandMetaInternal(andFuncalls);\n\t}\n\n\tprotected abstract expandMetaInternal(andFuncalls: boolean): Metaexpr;\n\n\t/**\n\t * \n\t * @return 같지 않으면 `false`. 같으면 같음을 보이는 데 사용한 매크로들의 목록.\n\t */\n\tpublic equals(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\t// console.log(`${this}\\n\\n${obj}`);\n\t\t// var ret = (() => {\n\t\t\n\t\tif (this === obj) return [];\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority(context) > this.getEqualsPriority(context))\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\n\t\t// })();\n\t\t// console.log(`${this}\\n\\n${obj}\\n\\nresult:`, ret);\n\t\t// return ret;\n\t}\n\n\t/**\n\t * \n\t * @return 같지 않으면 `false`. 같으면 같음을 보이는 데 사용한 매크로들의 목록.\n\t */\n\tprotected abstract equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false;\n\n\tprotected abstract getEqualsPriority(context: ExecutionContext): EqualsPriority;\n\n\tpublic isProved(hypotheses?: Metaexpr[]): boolean {\n\t\thypotheses = hypotheses || [];\n\n\t\tfor (var i = 0; i < hypotheses.length; i++) {\n\t\t\tif (hypotheses[i] == this) return true;\n\t\t}\n\n\t\treturn this.isProvedInternal(hypotheses);\n\t}\n\n\tprotected abstract isProvedInternal(hypotheses: Metaexpr[]): boolean;\n\n\tpublic getProof(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (hypnumMap.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: hypnumMap.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: $Map.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\treturn this.getProofInternal(hypnumMap, $Map, ctr, root);\n\t}\n\n\tprotected abstract getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot?: boolean): ProofType[];\n}","import Nameable from './Nameable';\nimport Node from './Node';\nimport Type from './Type';\n\nexport default class ObjectType extends Type implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly origin: ObjectType;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor (o) {\n\t\tif (o.origin) {\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\n\n\t\t\tif (typeof o.name != 'string')\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\tthis.name = o.name;\n\n\t\t\tif (!(o.origin instanceof ObjectType))\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\n\n\t\t\tthis.origin = o.origin;\n\t\t} else {\n\t\t\tsuper(null, o.doc, null, o.functional);\n\n\t\t\tif (typeof o.functional != 'boolean')\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\t\tif (!o.functional) {\n\t\t\t\tif (typeof o.name != 'string')\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\t\tthis.name = o.name;\n\t\t\t} else {\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\n\t\t\t\tif (!(o.to instanceof ObjectType))\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\n\n\t\t\t\tthis.from = o.from;\n\t\t\t\tthis.to = o.to;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toSimpleString() {\n\t\tif (this.name) return this.name;\n\n\t\tvar resolved = this.resolve();\n\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\n\t}\n\n\tpublic toIndentedString(indent): string {\n\t\tif (this.isSimple) return this.name;\n\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean) {\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\n\t\tif (!root && this.name) {\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\t\t}\n\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.origin ? this.origin.resolve() : this;\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof ObjectType)) return false;\n\n\t\tif (this.origin) return this.origin.equals(t);\n\t\tif (t.origin) return this.equals(t.origin);\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) return this === t;\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (var i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Expr0 from './Expr0';\nimport Nameable from './Nameable';\n\nexport default abstract class Fun extends Expr0 implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Parameter[];\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (rettype && expr) {\n\t\t\tif (!rettype.equals(expr.type)) {\n\t\t\t\tthrow Node.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (!rettype && !expr) {\n\t\t\tthrow Node.error('Cannot guess the return type of a primitive fun', trace);\n\t\t}\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Node.error('Cannot seal a primitive fun', trace);\n\t\t}\n\t\t\n\t\tvar precedence = false;\n\n\t\tif (tex) {\n\t\t\tvar parsed = Node.parseTeX(tex);\n\t\t\tprecedence = parsed.precedence;\n\t\t\ttex = parsed.code;\n\t\t} else {\n\t\t\ttex = null;\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\ttrace, doc, tex,\n\t\t\tnew ((rettype || expr.type) instanceof ObjectType ? ObjectType : MetaType)({\n\t\t\t\tfunctional: true,\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: rettype || expr.type as any\n\t\t\t})\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.precedence = precedence;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\t/**\n\t * 매개변수의 개수.\n\t */\n\tget length(): number {\n\t\treturn this.params.length;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr && this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Parameter({\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i,\n\t\t\t\tselector: null\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar usedMacrosList = [];\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? (this.name && usedMacrosList.push(this), this.call(placeholders))\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? (obj.name && usedMacrosList.push(obj), obj.call(placeholders))\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\tvar ret = thisCall.equals(objCall, context);\n\t\treturn ret && ret.concat(usedMacrosList);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr0[]): Metaexpr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Arguments length mismatch');\n\t\t}\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tif (!this.params[i].type.equals(args[i].type)) {\n\t\t\t\tthrow Error('Illegal type');\n\t\t\t}\n\t\t}\n\n\t\tvar map: Map<Variable, Expr0> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (this instanceof Schema && this.name && !root) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RS',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!this.expr) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\t$Map = new Map($Map);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar $lines: ProofType[] = [];\n\t\t\n\t\tif (this instanceof Schema) {\n\t\t\tthis.def$s.forEach($ => {\n\t\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t$Map.set($, $num);\n\t\t\t});\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'V',\n\t\t\t$lines,\n\t\t\tlines: this.expr.getProof(hypnumMap, $Map, ctr),\n\t\t\tparams: this.params,\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\nimport Counter from '../Counter';\nimport { ProofType } from '../ProofType';\nimport Schema from './Schema';\nimport Parameter from './Parameter';\n\ninterface FunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Metaexpr;\n}","import Fun from \"./Fun\";\n\nexport type SchemaType = 'axiom' | 'theorem' | 'schema';\n\nexport default class Schema extends Fun {\n\n\tpublic readonly schemaType: SchemaType;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, schemaType, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Node.error('wut', trace);\n\t\t}\n\n\t\tif (schemaType != 'schema' && !name) {\n\t\t\tthrow Node.error(`wut`, trace);\n\t\t}\n\n\t\tsuper({doc, tex, annotations, sealed: false, rettype: null, name, params, expr}, trace);\n\t\t\n\t\tthis.schemaType = schemaType;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\n\t\tif (schemaType == 'theorem') {\n\t\t\tif (!this.isProved()) {\n\t\t\t\tthrow Node.error(`Schema ${name} is marked as a theorem but it is not proved`, trace);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic isProved(hyps?) {\n\t\tif (this.isProvedCache) return true;\n\n\t\tif (!hyps && typeof this.isProvedCache == 'boolean') {\n\t\t\treturn this.isProvedCache;\n\t\t}\n\n\t\tvar cache = !hyps || !hyps.length;\n\t\thyps = hyps || [];\n\t\t\n\t\tvar ret = this.schemaType == 'axiom' || super.isProved(hyps);\n\t\tif (cache) this.isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = 'def-' + this.name,\n\t\t\tproved = this.isProved() ? 'p' : 'np';\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.selector ? `: \\\\texttt{@${e.selector}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport Parameter from \"./Parameter\";\n\ninterface SchemaArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tschemaType: SchemaType;\n\tname: string;\n\tparams: Parameter[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport Nameable from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tsealed: boolean;\n\ttype: ObjectType;\n\tname: string;\n\texpr: Expr0;\n}\n\nexport default class Variable extends Expr0 implements Nameable {\n\n\tpublic readonly sealed: boolean;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr0 | null;\n\n\tconstructor ({doc, tex, sealed, type, name, expr}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, doc, tex, type);\n\t\t\n\t\tif (typeof name != 'string')\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Node.error('Cannot seal a primitive fun', trace);\n\t\t}\n\n\t\tif (expr && !type.equals(expr.type)) {\n\t\t\tthrow Node.error(`Expression type ${expr.type} failed to match the type ${type} of variable ${name}`, trace);\n\t\t}\n\n\t\tthis.sealed = sealed;\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (map.has(this)) return map.get(this);\n\n\t\t// 매크로 변수는 스코프 밖에서 보이지 않으므로 치환될 것을 갖지 않는다는\n\t\t// 생각이 들어 있다.\n\t\treturn this;\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\treturn this.expr && (!this.sealed || context.canUse(this))\n\t\t\t? EqualsPriority.FOUR\n\t\t\t: EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!this.expr) return false;\n\n\t\tif (!this.sealed || context.canUse(this)) {\n\t\t\tvar tmp = this.expr.equals(obj, context);\n\t\t\tif (!tmp) return tmp;\n\t\t\treturn tmp.push(this), tmp;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\treturn [{\n\t\t\t_type: 'NP',\n\t\t\tctr: ctr.next(),\n\t\t\texpr: this\n\t\t}];\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this instanceof Parameter ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex || Node.makeTeXName(this.name);\n\t\t\n\t\tvar expr = root && this.expr\n\t\t\t? `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`\n\t\t\t: '';\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}${expr}`;\n\t}\n}\n\nimport Parameter from './Parameter';","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport Nameable from \"./Nameable\";\nimport Node, { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Metaexpr;\n}\n\nexport default class $Variable extends Metaexpr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tif (!$Map.has(this)) {\n\t\t\tthrow Error(`${this.name} is not defined`);\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'R',\n\t\t\tctr: ctr.next(),\n\t\t\tnum: $Map.get(this),\n\t\t\texpr: this.expr\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\n\ninterface ParameterArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tselector: string;\n}\n\nexport default class Parameter extends Variable {\n\n\tpublic readonly selector: string;\n\n\tconstructor ({doc, tex, type, name, selector}: ParameterArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, sealed: false, type, name, expr: null}, trace);\n\n\t\tthis.selector = selector;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectFun from './ObjectFun';\nimport ObjectType from './ObjectType';\nimport Schema from './Schema';\nimport Variable from './Variable';\n\ninterface FuncallArgumentType {\n\tfun: Metaexpr;\n\targs: Expr0[];\n}\n\nexport default class Funcall extends Expr0 {\n\t\n\tpublic readonly fun: Metaexpr;\n\tpublic readonly args: Expr0[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (fun.type.isSimple) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Node.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(trace, null, null, resolvedType.to);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.fun.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Variable && callee.expr) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): {expanded: Metaexpr, used: (Fun | Variable)[]} {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar used: (Fun | Variable)[] = [];\n\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Variable && callee.expr) {\n\t\t\tused.push(callee);\n\n\t\t\treturn {\n\t\t\t\texpanded: new Funcall({\n\t\t\t\t\tfun: callee.expr,\n\t\t\t\t\targs: this.args\n\t\t\t\t}, this.trace),\n\t\t\t\tused\n\t\t\t};\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\tvar calleeExpanded = callee.expandOnce(context);\n\t\t\tused.push(...calleeExpanded.used);\n\t\t\treturn {\n\t\t\t\texpanded: new Funcall({\n\t\t\t\t\tfun: calleeExpanded.expanded,\n\t\t\t\t\targs: this.args\n\t\t\t\t}, this.trace),\n\t\t\t\tused\n\t\t\t};\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tif (callee.name) used.push(callee);\n\n\t\treturn {\n\t\t\texpanded: callee.call(this.args),\n\t\t\tused\n\t\t};\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\t\t\t\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar usedMacrosList: (Fun | Variable)[] = [],\n\t\t\tT = (q: (Fun | Variable)[] | false) => { if (q) usedMacrosList.push(...q); return q; };\n\n\t\tif (this.fun == obj.fun || T(this.fun.equals(obj.fun, context))) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!T(this.args[i].equals(obj.args[i], context))) return false;\n\t\t\t}\n\n\t\t\treturn usedMacrosList;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\tvar {expanded, used} = obj.expandOnce(context);\n\t\t\tvar ret = this.equals(expanded, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!T(this.args[i].equals(obj.args[i], context))) return false;\n\t\t\t\t}\n\n\t\t\t\treturn usedMacrosList;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn T(this.args[i].equals(obj.args[i], context));\n\t\t\t})) {\n\t\t\t\treturn usedMacrosList;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\tvar {expanded, used} = this.expandOnce(context);\n\t\t\tvar ret = expanded.equals(obj, context);\n\t\t\treturn ret && ret.concat(used);\n\t\t}\n\n\t\tvar {expanded, used} = obj.expandOnce(context);\n\t\tvar ret = this.equals(expanded, context);\n\t\treturn ret && ret.concat(used);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\n\t\tif (hypnumMap.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: hypnumMap.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: $Map.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (this.fun instanceof Schema && this.fun.name) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RCX',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!(this.fun instanceof Schema)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tvar schemalines = this.fun.getProof(hypnumMap, $Map, ctr);\n\n\t\treturn [\n\t\t\t...schemalines,\n\t\t\t{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#def-${this.fun.name}}{\\\\htmlData{proved=${this.fun.isProved() ? 'p' : 'np'}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: Node.makeTeXName(this.fun.name)\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import Metaexpr from \"./Metaexpr\";\n\nexport default abstract class Expr0 extends Metaexpr {\n\t\n}","import Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\n\ninterface SimpleMetaTypeArgumentType {\n\tfunctional: false;\n\tleft: Type[];\n\tright: Type;\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfunctional: true;\n\tfrom: ObjectType[];\n\tto: MetaType;\n}\n\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\n\nexport default class MetaType extends Type {\n\t\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: MetaType;\n\n\tconstructor (o: MetaTypeArgumentType) {\n\t\tsuper(null, null, null, o.functional);\n\n\t\tif (typeof o.functional != 'boolean')\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\tif (o.functional == false) {\n\t\t\tif (!(o.left instanceof Array))\n\t\t\t\tthrow Node.error('left should be an array', null);\n\n\t\t\tthis.left = o.left;\n\t\t\tthis.right = o.right;\n\t\t} else {\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\n\t\t\tif (!(o.to instanceof MetaType))\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\n\n\t\t\tthis.from = o.from;\n\t\t\tthis.to = o.to;\n\t\t}\n\t}\n\n\tpublic resolve(): MetaType {\n\t\treturn this;\n\t}\n\n\tpublic toIndentedString(indent: number) {\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\n\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof MetaType)) return false;\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\tif (!this.right.equals(t.right)) return false;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (let i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Parameter from \"./Parameter\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\ninterface ObjectFunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr0;\n}\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, rettype, name, params, expr}, trace);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.canUse(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}{${Node.makeTeXName(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${Node.makeTeXName(this.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import ObjectFun from \"./nodes/ObjectFun\";\nimport Variable from \"./nodes/Variable\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: (Variable | ObjectFun)[];\n\n\tconstructor (usingList?: (Variable | ObjectFun)[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic canUse(fun: Variable | ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Node from \"./Node\";\n\nexport default abstract class Type extends Node {\n\tpublic readonly isFunctional: boolean;\n\tpublic readonly isSimple: boolean;\n\t\n\tpublic abstract equals(t: Type): boolean;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string, isFunctional: boolean) {\n\t\tsuper(trace, doc, tex);\n\t\tthis.isFunctional = isFunctional;\n\t\tthis.isSimple = !isFunctional;\n\t}\n\n\tpublic abstract resolve(): Type;\n}","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Metaexpr[];\n\tdef$s: $Variable[];\n\tright: Metaexpr;\n}\n\nexport default class Tee extends Metaexpr {\n\n\tpublic readonly left: Metaexpr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Metaexpr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof MetaType;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tsuper(trace, null, null, new MetaType({\n\t\t\tfunctional: false,\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}));\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Node.PREC_COMMA;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.right.isProved(hypotheses.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft,\n\t\t\tdef$s: null,\n\t\t\tright\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, def$s: null, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\thypnumMap = new Map(hypnumMap);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar leftlines: ProofType[] = this.left.map(l => {\n\t\t\thypnumMap.set(l, ctr.next());\n\t\t\t\n\t\t\treturn {\n\t\t\t\t_type: 'H',\n\t\t\t\tctr: ctr.peek(),\n\t\t\t\texpr: l\n\t\t\t};\n\t\t});\n\n\t\t$Map = new Map($Map);\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [{\n\t\t\t_type: 'T',\n\t\t\tleftlines: leftlines as any,\n\t\t\trightlines: $lines.concat(this.right.getProof(hypnumMap, $Map, ctr)),\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","var grammar;\n\nif (process.env.__webpack__) {\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\n} else {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n}\n\nvar Program = require('./Program').default;\n\nmodule.exports = {grammar, Program};","export default \"start =\\n\\t_\\n\\timports:(i:import _ {return i})*\\n\\tlines:(a:line _ {return a})*\\n\\t{return imports.concat(lines)}\\n\\nline =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\nevaluable =\\n\\t_ e:evaluable_internal _ {return e}\\n\\nevaluable_internal =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\t/ metaexpr\\n\\nimport =\\n\\t'import' __\\n\\tfilename:ident _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'import',\\n\\t\\t\\tfilename,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntypedef =\\n\\tdoc:(documentation __)?\\n\\t\\\"type\\\" __\\n\\torigin:(o:ftype __ {return o})?\\n\\tname:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'typedef',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\torigin,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefv =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\ttype:type __\\n\\tname:ident _\\n\\texpr:(\\n\\t\\t\\\"=\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\tsem\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: false,\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschemaparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\tselector:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tselector,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n \\ndefun =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\trettype:type __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\texpr:(\\n\\t\\t\\\"{\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defun',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\trettype,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschema =\\n\\tdoc:(documentation __)?\\n\\tannotations: (a:annotation __ {return a})*\\n\\tschemaType:('axiom' / 'theorem' / 'schema') __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defschemaparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\tusing:(\\n\\t\\t'using' __\\n\\t\\tx:(\\n\\t\\t\\thead:ident _\\n\\t\\t\\ttail:(',' _ n:ident _ {return n})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)\\n\\t\\t{return x}\\n\\t)?\\n\\t\\\"{\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t\\\"}\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defschema',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tannotations,\\n\\t\\t\\tschemaType,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\tusing: using || [],\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// var[...]\\n// foo(...)[...]\\n// foo[...][...]\\n// (metaexpr)[...]\\n// schema(?, ...)[...]\\nreduction =\\n\\tantecedents:(\\n\\t\\ta:metaexpr_internal_2 {return [a]}\\n\\t\\t/ \\\"[\\\" _\\n\\t\\tb:(\\n\\t\\t\\thead:metaexpr _\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\"]\\\"\\n\\t\\t{return b || []}\\n\\t)\\n\\tright:(\\n\\t\\t_ '>' _\\n\\t\\tsubject:(\\n\\t\\t\\tschemacall\\n\\t\\t\\t/ var\\n\\t\\t\\t/ \\\"(\\\" _\\n\\t\\t\\te:metaexpr _\\n\\t\\t\\t\\\")\\\"\\n\\t\\t\\t{return e}\\n\\t\\t)\\n\\t\\targs:(\\n\\t\\t\\t_ \\\"(\\\" _\\n\\t\\t\\ta:(\\n\\t\\t\\t\\thead:('?' {return null} / expr0) _\\n\\t\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)?\\n\\t\\t\\t\\\")\\\"\\n\\t\\t\\t{return a || []}\\n\\t\\t)?\\n\\t\\tas_:(\\n\\t\\t\\t__ 'as' __\\n\\t\\t\\tm:metaexpr_internal_2\\n\\t\\t\\t{return m}\\n\\t\\t)?\\n\\t\\t{return {subject, args, as_: as_ || null};}\\n\\t)+\\n\\t{\\n\\t\\tvar ret = {\\n\\t\\t\\t_type: 'reduction',\\n\\t\\t\\tsubject: right[0].subject,\\n\\t\\t\\targs: right[0].args,\\n\\t\\t\\tantecedents,\\n\\t\\t\\tas: right[0].as_,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\n\\t\\tfor (var i = 1; i < right.length; i++) {\\n\\t\\t\\tret = {\\n\\t\\t\\t\\t_type: 'reduction',\\n\\t\\t\\t\\tsubject: right[i].subject,\\n\\t\\t\\t\\targs: right[i].args,\\n\\t\\t\\t\\tantecedents: [ret],\\n\\t\\t\\t\\tas: right[i].as_,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn ret;\\n\\t}\\n\\n// var(...)\\n// (metaexpr)(...)\\nschemacall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemacall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// forall(f, g)\\n// (expr0)(f, g)\\nfuncall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:expr0 _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funcall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => expr0\\n// (T t) => { expr0 }\\nfunexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\texpr:(\\n\\t\\texpr0\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => metaexpr_internal_1\\n// (T t) => { $foo = ...; metaexpr }\\nschemaexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_1\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemaexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\texpr: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntee =\\n\\tleft:(\\n\\t\\tl:(\\n\\t\\t\\thead:metaexpr_internal_1 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)? {return l || []}\\n\\t)\\n\\t\\\"|-\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_2\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'tee',\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\tleft,\\n\\t\\t\\tright: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nwith =\\n\\t'with' _ '(' _\\n\\ttex:(tex __)?\\n\\ttype:type __\\n\\tvarname:ident _\\n\\t\\\"=\\\" _\\n\\tvarexpr:expr0 _\\n\\t')' _ '{' _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t'}'\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'with',\\n\\t\\t\\twith: {\\n\\t\\t\\t\\t_type: 'defv',\\n\\t\\t\\t\\tisParam: false,\\n\\t\\t\\t\\tdoc: null,\\n\\t\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\t\\tsealed: false,\\n\\t\\t\\t\\ttype,\\n\\t\\t\\t\\tname: varname,\\n\\t\\t\\t\\texpr: varexpr,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t},\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nmetaexpr =\\n\\tmetaexpr_internal_3\\n\\nmetaexpr_internal_3 =\\n\\treduction\\n\\t/ metaexpr_internal_2\\n\\nmetaexpr_internal_2 =\\n\\ttee\\n\\t/ metaexpr_internal_1\\n\\n/*\\n * The following should hold:\\n *\\n * - `schemacall` should precede `var`.\\n *\\n */\\nmetaexpr_internal_1 =\\n\\tschemacall\\n\\t/ var\\n\\t/ schemaexpr\\n\\t/ with\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\n\\nexpr0 =\\n\\tfuncall\\n\\t/ funexpr\\n\\t/ var\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\n\\ndefdollar =\\n\\tname:dollar_ident _\\n\\t'=' _\\n\\texpr:metaexpr _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'def$',\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\t}\\n\\ntype =\\n\\tstype\\n\\t/ ftype\\n\\nstype =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: false,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nftype =\\n\\t\\\"[\\\" _\\n\\tfrom:(\\n\\t\\ttype:type {return [type]}\\n\\t\\t/ (\\n\\t\\t\\ttt:(\\n\\t\\t\\t\\t\\\"(\\\" _\\n\\t\\t\\t\\thead: type\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\n\\t\\t\\t\\t_ \\\")\\\"\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)\\n\\t\\t\\t{return tt}\\n\\t\\t)\\n\\t) _\\n\\t\\\"->\\\" _\\n\\tto:type _\\n\\t\\\"]\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: true,\\n\\t\\t\\tfrom,\\n\\t\\t\\tto,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nvar =\\n\\tat_var\\n\\t/ dollar_var\\n\\t/ plain_var\\n\\nat_var =\\n\\tname:at_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '@',\\n\\t\\t\\tname: name.slice(1),\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndollar_var =\\n\\tname:dollar_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '$',\\n\\t\\t\\tname: name,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nplain_var =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: 'normal',\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nkeyword =\\n\\t'as'\\n\\t/ 'axiom'\\n\\t/ 'import'\\n\\t/ 'schema'\\n\\t/ 'sealed'\\n\\t/ 'theorem'\\n\\t/ 'type'\\n\\t/ 'using'\\n\\t/ 'with'\\n\\nannotation =\\n\\t'@discouraged'\\n\\t/ '@deprecated'\\n\\nident =\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\n\\nat_ident =\\n\\t$('@' [a-zA-Z0-9_]+)\\n\\ndollar_ident =\\n\\t$('$' [a-zA-Z0-9_]+)\\n\\ndocumentation =\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\n\\t\\treturn b.replace(/\\\\r\\\\n|\\\\r/g, '\\\\n');\\n\\t}\\n\\ntex =\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\n\\t\\treturn b.replace(/\\\\r\\\\n|\\\\r/g, '\\\\n');\\n\\t}\\n\\ncomment =\\n\\t\\\"//\\\" (!newline .)*\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\n\\nnewline =\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\n\\n// optional whitespace\\n_ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\n\\n// mandatory whitespace\\n__ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\n\\nsem =\\n\\t\\\";\\\"\";","import PegInterface from './PegInterface';\nimport { EvaluableObject, ImportOrLineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport default class Program {\n\t\n\tpublic scope: Scope;\n\tpublic readonly parser;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\n\t/**\n\t * A temporary list used by {@link loadModuleInternal} method.\n\t * \n\t * This is the list of filenames of the files with a temporary mark during a\n\t * depth-first topological sort. Node that the file is considered to be\n\t * marked with a permanent mark if {@code this.scopeMap} has the filename.\n\t * \n\t * See https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search.\n\t */\n\tprivate loadingModules: string[];\n\t\n\tconstructor (parser) {\n\t\tif (!parser) throw Error('no');\n\t\tthis.parser = parser;\n\t}\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tthis.loadingModules = [];\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\t// the file has a permanent mark\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar loadingModuleIndex = this.loadingModules.indexOf(filename);\n\n\t\t// the file has a temporary mark\n\t\tif (loadingModuleIndex >= 0) {\n\t\t\tif (loadingModuleIndex == this.loadingModules.length - 1) {\n\t\t\t\tthrow Error(`Cannot self import (${filename})`);\n\t\t\t}\n\n\t\t\tvar cycle = this.loadingModules.slice(loadingModuleIndex).concat(filename);\n\n\t\t\tthrow Error(`Circular import detected (${cycle.join(' -> ')}). Sadly, circular import is currently not supported.`);\n\t\t}\n\n\t\t// mark the file with a temporary mark\n\t\tthis.loadingModules.push(filename);\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\t\tvar parsed = this.parser.parse(code);\n\n\t\tawait this.feed(parsed, scope, loader);\n\n\t\t// remove temporary mark\n\t\tif (this.loadingModules.pop() != filename) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\t// mark the file with a permanent mark\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(lines: ImportOrLineObject[], scope: Scope=this.scope, loader: LoaderType) {\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(line: EvaluableObject) {\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './nodes/$Variable';\nimport Expr0 from './nodes/Expr0';\nimport Fun from './nodes/Fun';\nimport Funcall from './nodes/Funcall';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Parameter from './nodes/Parameter';\nimport Reduction from './nodes/Reduction';\nimport Schema, { SchemaType } from './nodes/Schema';\nimport Tee from './nodes/Tee';\nimport Variable from './nodes/Variable';\nimport With from './nodes/With';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject, WithObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\n\t\tif (origin) {\n\t\t\treturn new ObjectType({\n\t\t\t\tname,\n\t\t\t\tdoc,\n\t\t\t\torigin\n\t\t\t});\n\t\t}\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: false,\n\t\t\tname,\n\t\t\tdoc\n\t\t});\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\tvar expr = obj.expr ? PI.expr0(obj.expr, scope) : null;\n\n\t\tif (obj.isParam) {\n\t\t\treturn new Parameter({\n\t\t\t\tdoc: obj.doc,\n\t\t\t\ttex: obj.tex,\n\t\t\t\ttype,\n\t\t\t\tname: obj.name,\n\t\t\t\tselector: obj.selector || null\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new Variable({\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex,\n\t\t\tsealed: !!obj.sealed,\n\t\t\ttype,\n\t\t\tname: obj.name,\n\t\t\texpr: expr || null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('fun', obj._type == 'defun' ? obj.name : '<anonymous>', obj.location);\n\n\t\tvar doc = null,\n\t\t\ttex = null,\n\t\t\tsealed = false,\n\t\t\trettype: ObjectType = null,\n\t\t\tname = null,\n\t\t\texpr = null;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tdoc = obj.doc;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t\t\n\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype))) {\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\t\t\t}\n\n\t\t\trettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\t\t\tname = obj.name;\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tif (obj.expr) {\n\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, rettype, name, params, expr, doc, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr0(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.expr0(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope, context: ExecutionContext): Metaexpr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var', 'with'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tcase 'with':\n\t\t\t\treturn PI.with(obj, scope, context);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static with(obj: WithObject, parentScope: Scope, context: ExecutionContext): With {\n\t\tif (obj._type != 'with') {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('with', null, obj.location);\n\n\t\tvar tv = PI.variable(obj.with, scope);\n\n\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\n\t\tif (!(tv instanceof Variable)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tscope.addVariable(tv);\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new With({\n\t\t\tvariable: tv,\n\t\t\tdef$s,\n\t\t\texpr\n\t\t}, scope.trace);\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.metaexpr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar schemaType: SchemaType = 'schema',\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\tschemaType = obj.schemaType;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: (Variable | ObjectFun)[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!fun.expr) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, tex: null, annotations, schemaType, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.metaexpr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.expr0(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.metaexpr(obj.subject, scope, context);\n\n\t\tvar args = !obj.args\n\t\t\t? null\n\t\t\t: obj.args.map(g => {\n\t\t\t\treturn g && PI.expr0(g, scope);\n\t\t\t});\n\n\t\tvar antecedents = obj.antecedents.map(obj => {\n\t\t\treturn PI.metaexpr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.metaexpr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\targs,\n\t\t\tantecedents,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Parameter from './Parameter';\nimport Schema from './Schema';\nimport Tee from './Tee';\nimport Variable from './Variable';\n\ninterface ReductionArgumentType {\n\tantecedents: Metaexpr[];\n\tsubject: Metaexpr;\n\targs: (Expr0 | null)[];\n\tas: Metaexpr;\n}\n\nexport default class Reduction extends Metaexpr {\n\t\n\tpublic readonly antecedents: Metaexpr[];\n\tpublic readonly requiredAntecedents: Metaexpr[];\n\tpublic readonly subject: Metaexpr;\n\tpublic readonly args: (Expr0 | null)[];\n\tpublic readonly preFormatConsequent: Metaexpr;\n\tpublic readonly consequent: Metaexpr;\n\tprivate readonly antecedentEqualsResults: (Fun | Variable)[][];\n\tprivate readonly rightEqualsResult: (Fun | Variable)[];\n\n\tconstructor ({antecedents, subject, args, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (args) {\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = args.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(args && args[i]) && !p.selector) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (args && args[i]) return args[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false);\n\n\t\t\t\tif (!(tee instanceof Tee)) throw Error('wut');\n\t\n\t\t\t\treturn Reduction.guess(\n\t\t\t\t\tp.selector,\n\t\t\t\t\ttee.left, antecedents,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (args) {\n\t\t\tthrow Node.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\n\t\t\tthrow Node.error('Subject is not reducible', trace);\n\t\n\t\tif (!(antecedents instanceof Array)\n\t\t\t\t|| antecedents.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tantecedentTypes = antecedents.map(e => e.type);\n\n\t\tif (paramTypes.length != antecedentTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${antecedentTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(antecedentTypes[i]))\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${antecedentTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(trace, null, null, subject.type.right);\n\n\t\tthis.subject = subject;\n\t\tthis.antecedents = antecedents;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.requiredAntecedents = tee.left;\n\t\tthis.antecedentEqualsResults = Array(tee.left.length).fill(0).map(() => []);\n\n\t\tvar antecedentsExpanded = antecedents.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tvar tmp = tee.left[i].equals(antecedentsExpanded[i], context);\n\t\t\tif (!tmp) {\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${antecedents[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.antecedentEqualsResults[i] = tmp;\n\t\t}\n\n\t\tthis.preFormatConsequent = tee.right;\n\n\t\tif (as) {\n\t\t\tvar tmp = tee.right.equals(as, context);\n\t\t\tif (!tmp) {\n\t\t\t\tthrow Node.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.rightEqualsResult = tmp;\n\t\t\tthis.consequent = as;\n\t\t} else {\n\t\t\tthis.consequent = tee.right;\n\t\t}\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.subject.isProved(hypotheses)\n\t\t\t&& this.antecedents.every(l => l.isProved(hypotheses));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.consequent.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.consequent.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\treturn this.consequent.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tvar antecedentLinesList: ProofType[][] = [];\n\t\tvar antecedentNums: (number | [number, number])[] = this.antecedents.map((l, i) => {\n\t\t\tif (!this.antecedentEqualsResults[i].length) {\n\t\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\t\tif ($Map.has(l)) return $Map.get(l);\n\t\t\t}\n\n\t\t\tvar ref = hypnumMap.has(l)\n\t\t\t\t? hypnumMap.get(l)\n\t\t\t\t: $Map.has(l)\n\t\t\t\t\t? $Map.get(l)\n\t\t\t\t\t: null;\n\t\t\tvar lines = ref ? [] : l.getProof(hypnumMap, $Map, ctr);\n\n\t\t\tif (this.antecedentEqualsResults[i].length) {\n\t\t\t\tlines.push({\n\t\t\t\t\t_type: 'bydef',\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\tref: ref || lines[lines.length - 1].ctr,\n\t\t\t\t\texpr: this.requiredAntecedents[i],\n\t\t\t\t\tof: this.antecedentEqualsResults[i]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tantecedentLinesList.push(lines);\n\t\t\treturn this.antecedentEqualsResults[i].length\n\t\t\t\t? ctr.peek()\n\t\t\t\t: lines[lines.length - 1].ctr;\n\t\t});\n\t\t\n\t\tvar args: Expr0[] = null;\n\t\tvar subjectlines: ProofType[] = [];\n\t\tvar subjectnum = hypnumMap.get(this.subject)\n\t\t\t|| $Map.get(this.subject)\n\t\t\t|| (\n\t\t\t\tthis.subject instanceof Funcall && $Map.has(this.subject.fun)\n\t\t\t\t\t? (args = this.subject.args, $Map.get(this.subject.fun))\n\t\t\t\t\t: false\n\t\t\t)\n\t\t\t|| (\n\t\t\t\t(s => {\n\t\t\t\t\treturn s instanceof Fun && s.name\n\t\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name;\n\t\t\t\t})(this.subject)\n\t\t\t\t\t? this.subject\n\t\t\t\t\t: (subjectlines = this.subject.getProof(hypnumMap, $Map, ctr))[subjectlines.length-1].ctr\n\t\t\t);\n\n\t\tvar ret: ProofType[] = [\n\t\t\t...antecedentLinesList.flat(),\n\t\t\t...subjectlines\n\t\t];\n\n\t\tif (this.rightEqualsResult && this.rightEqualsResult.length) {\n\t\t\tret.push(\n\t\t\t\t{\n\t\t\t\t\t_type: 'E',\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\tsubject: subjectnum,\n\t\t\t\t\targs,\n\t\t\t\t\tantecedents: antecedentNums,\n\t\t\t\t\treduced: this.preFormatConsequent\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t_type: 'bydef',\n\t\t\t\t\tref: ctr.peek(),\n\t\t\t\t\tctr: ctr.next(),\n\t\t\t\t\texpr: this.consequent,\n\t\t\t\t\tof: this.rightEqualsResult\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tret.push({\n\t\t\t\t_type: 'E',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tsubject: subjectnum,\n\t\t\t\targs,\n\t\t\t\tantecedents: antecedentNums,\n\t\t\t\treduced: this.consequent\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn ret;\n\t}\n\n\tpublic static guess(\n\t\t\tselector: string,\n\t\t\trequiredAntecedents: Metaexpr[], antecedents: Metaexpr[],\n\t\t\tright: Metaexpr, as: Metaexpr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace): Metaexpr {\n\t\t\n\t\tif (selector.length == 0) throw Node.error('wut', trace);\n\n\t\tvar pattern: Metaexpr, instance: Metaexpr;\n\n\t\tif (selector[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at 0): expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tpattern = right;\n\t\t\tinstance = as;\n\t\t} else {\n\t\t\tvar n = Number(selector[0]);\n\n\t\t\tif (!(1 <= n && n <= antecedents.length))\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at 0): antecedent index out of range`, trace);\n\n\t\t\tpattern = requiredAntecedents[n - 1];\n\t\t\tinstance = antecedents[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tptr: number,\n\t\t\t\tpattern: Metaexpr, instance: Metaexpr,\n\t\t\t\tparams: Parameter[]): Metaexpr {\n\t\t\t\n\t\t\tinstance = instance.expandMeta(true);\n\t\t\t\n\t\t\tif (selector.length <= ptr) return instance;\n\n\t\t\tif (/^[0-9]$/.test(selector[ptr])) {\n\t\t\t\tvar n = Number(selector[ptr]);\n\n\t\t\t\tif (pattern instanceof Tee && instance instanceof Tee) {\n\t\t\t\t\tif (pattern.left.length != instance.left.length) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= instance.left.length)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(ptr + 1, pattern.left[n - 1], instance.left[n - 1], params);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\twhile (instance instanceof Variable && instance.expr) {\n\t\t\t\t\t\tinstance = instance.expr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(pattern instanceof Funcall && instance instanceof Funcall)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (pattern.fun.equals(instance.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!instance.isExpandable(context)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): ${instance}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tinstance = instance.expandOnce(context).expanded;\n\t\t\t\t}\n\n\t\t\t\tif (!(1 <= n && n <= instance.args.length))\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\n\t\t\t\treturn recurse(ptr + 1, pattern.args[n - 1], instance.args[n - 1], params);\n\t\t\t} else if (selector[ptr] == 'r') {\n\t\t\t\tif (!(pattern instanceof Tee && instance instanceof Tee)) {\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t}\n\n\t\t\t\treturn recurse(ptr + 1, pattern.right, instance.right, params);\n\t\t\t} else if (selector[ptr] == 'c') {\n\t\t\t\tif (!(\n\t\t\t\t\tpattern instanceof Fun && !pattern.name\n\t\t\t\t\t&& instance instanceof Fun && !instance.name\n\t\t\t\t)) {\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr})`, trace);\n\t\t\t\t}\n\n\t\t\t\tif (pattern.length != instance.length) {\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): parameter length mismatch`, trace);\n\t\t\t\t}\n\n\t\t\t\tvar placeholders = [];\n\n\t\t\t\tfor (var i = 0; i < pattern.length; i++) {\n\t\t\t\t\tif (!pattern.params[i].type.equals(instance.params[i].type)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): parameter type mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tplaceholders.push(new Parameter({\n\t\t\t\t\t\ttex: instance.params[i].tex,\n\t\t\t\t\t\ttype: pattern.params[i].type,\n\t\t\t\t\t\tname: instance.params[i].name,\n\t\t\t\t\t\tselector: null\n\t\t\t\t\t}, trace));\n\t\t\t\t}\n\n\t\t\t\treturn recurse(ptr + 1, pattern.call(placeholders), instance.call(placeholders), placeholders.concat(params));\n\t\t\t} else if (selector[ptr] == 'f') {\n\t\t\t\tif (ptr != selector.length - 1) {\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): invalid selector`, trace);\n\t\t\t\t}\n\n\t\t\t\t// (($0, $1) => f($0, $1)) -> f\n\t\t\t\tif (instance instanceof Funcall\n\t\t\t\t\t\t&& instance.args.length == params.length\n\t\t\t\t\t\t&& instance.args.every((arg, i) => arg == params[i])) {\n\t\t\t\t\treturn instance.fun;\n\t\t\t\t}\n\n\t\t\t\treturn new Schema({\n\t\t\t\t\tdoc: null,\n\t\t\t\t\ttex: null,\n\t\t\t\t\tannotations: [],\n\t\t\t\t\tschemaType: 'schema',\n\t\t\t\t\tname: null,\n\t\t\t\t\tparams,\n\t\t\t\t\tcontext: new ExecutionContext(),\n\t\t\t\t\tdef$s: [],\n\t\t\t\t\texpr: instance\n\t\t\t\t}, trace);\n\t\t\t}\n\n\t\t\tthrow Node.error(`Cannot dereference @${selector} (at ${ptr}): invalid selector`, trace);\n\t\t})(1, pattern, instance, []);\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar antecedents = this.antecedents.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (antecedents.join('').length <= 50) {\n\t\t\tantecedents = this.antecedents.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tantecedents.join(', '),\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\n\t\treturn [\n\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t'\\t' + antecedents.join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t']'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.antecedents.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface WithArgumentType {\n\tvariable: Variable;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}\n\nexport default class With extends Metaexpr {\n\n\tpublic readonly variable: Variable;\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor({variable, def$s, expr}: WithArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tthis.variable = variable;\n\t\tthis.def$s = def$s;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (map.has(this.variable))\n\t\t\tthrow Error('Parameter collision');\n\t\t\n\t\tmap = new Map(map);\n\n\t\treturn this.expandMeta(false).substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar map = new Map<Variable, Expr0>();\n\t\tmap.set(this.variable, this.variable.expr);\n\n\t\treturn this.expr.substitute(map).expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): (Fun | Variable)[] | false {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getProofInternal(hypnumMap: Map<Metaexpr, number>, $Map: Map<Metaexpr, number | [number, number]>, ctr: Counter, root?: boolean): ProofType[] {\n\n\t\t$Map = new Map($Map);\n\n\t\tvar def: ProofType = {\n\t\t\t_type: 'def',\n\t\t\tctr: ctr.next(),\n\t\t\tvar: this.variable\n\t\t};\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [\n\t\t\tdef,\n\t\t\t...$lines,\n\t\t\t...this.expr.getProof(hypnumMap, $Map, ctr)\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}","import Counter from \"./Counter\";\nimport Metaexpr from \"./nodes/Metaexpr\";\nimport Schema from \"./nodes/Schema\";\nimport Variable from \"./nodes/Variable\";\nimport { ProofType } from \"./ProofType\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx): string {\n\t\tvar DIAMOND = '&#x25C7;',\n\t\t\tDOWN = '&#x25BC;';\n\t\t// var UP = '&#x25B2;';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar expr = scope.getSchema(name);\n\n\t\tif (!(expr instanceof Schema)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr: number | [number, number] | Metaexpr, expand?: boolean): string {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true, true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true, true));\n\t\t}\n\n\t\tvar tree = expr.getProof(new Map(), new Map(), new Counter(), true);\n\n\t\tvar innertree: ProofType[] = (tree[0] as any).$lines.concat((tree[0] as any).lines);\n\n\t\tvar ncols = (function recurse(tree: ProofType[]): number {\n\t\t\treturn Math.max(...tree.map(t => {\n\t\t\t\tswitch (t._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.lines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.leftlines),\n\t\t\t\t\t\t\trecurse(t.rightlines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}));\n\t\t})(innertree);\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines: ProofType[], left: Variable[][]) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\t\tvar params = line.params.slice();\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\tcase 'RCX':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.antecedents.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'def':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.var),\n\t\t\t\t\t\t\t'definition'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'bydef':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr),\n\t\t\t\t\t\t\t`by definition of ${line.of.map(v => {\n\t\t\t\t\t\t\t\treturn exprToHtml(v);\n\t\t\t\t\t\t\t}).join(', ')} [${exprToHtml(line.ref)}]`\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow Error(`Unknown type ${(line as any)._type}`);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(innertree, []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","export default class Counter {\n\n\tprivate n: number;\n\n\tconstructor (start: number=0) {\n\t\tthis.n = start;\n\t}\n\n\tpublic peek(): number {\n\t\treturn this.n;\n\t}\n\n\tpublic next(): number {\n\t\treturn ++this.n;\n\t}\n}","import $Variable from './nodes/$Variable';\nimport Fun from './nodes/Fun';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Schema from './nodes/Schema';\nimport Variable from './nodes/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Metaexpr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\n\t/** 파일 경로. 예를 들어 `/propositional.math`이다. 파일과 일대일대응이어야 한다. */\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: ObjectType): ObjectType {\n\t\tif (!(type instanceof ObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: true,\n\t\t\tfrom,\n\t\t\tto\n\t\t});\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}"],"sourceRoot":""}