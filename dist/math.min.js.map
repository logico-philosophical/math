{"version":3,"sources":["webpack://math/webpack/universalModuleDefinition","webpack://math/webpack/bootstrap","webpack://math/./src/nodes/Node.ts","webpack://math/./src/nodes/Metaexpr.ts","webpack://math/./src/nodes/ObjectType.ts","webpack://math/./src/nodes/Fun.ts","webpack://math/./src/nodes/Variable.ts","webpack://math/./src/nodes/$Variable.ts","webpack://math/./src/nodes/Schema.ts","webpack://math/./src/nodes/Funcall.ts","webpack://math/./src/nodes/Expr0.ts","webpack://math/./src/nodes/MetaType.ts","webpack://math/./src/nodes/Parameter.ts","webpack://math/./src/nodes/ObjectFun.ts","webpack://math/./src/nodes/Type.ts","webpack://math/./src/nodes/Nameable.ts","webpack://math/./src/nodes/Tee.ts","webpack://math/./src/entry.js","webpack://math/./src/grammar.pegjs","webpack://math/./src/Program.ts","webpack://math/./src/PegInterface.ts","webpack://math/./src/ExecutionContext.ts","webpack://math/./src/nodes/Reduction.ts","webpack://math/./src/nodes/With.ts","webpack://math/./src/ProofExplorer.ts","webpack://math/./src/Counter.ts","webpack://math/./src/Scope.ts","webpack://math/./src/StackTrace.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","ctr","Node","trace","doc","tex","_id","toIndentedString","message","error","Error","prec","Array","length","console","log","my","normalizePrecedence","precedence","your","replace","code","match","g1","regex","RegExp","join","capitalize","charCodeAt","commandName","toLowerCase","toUpperCase","substring","escapeTeX","id","args","ret","shouldConsolidate","_match","PREC_FUNEXPR","PREC_COMMA","PREC_COLONEQQ","EqualsPriority","Metaexpr","type","super","andFuncalls","expandMetaCache","expandMetaInternal","obj","context","equals","getEqualsPriority","equalsInternal","hypotheses","isProvedInternal","hypnumMap","$Map","has","_type","next","num","expr","getProofInternal","ObjectType","origin","isFunctional","isBaseType","base","functional","from","map","f","some","e","to","resolved","resolve","toSimpleString","indent","isSimple","toTeXString","Fun","annotations","sealed","rettype","params","parsed","parseTeX","variable","isProved","ONE","placeholders","types","push","selector","thisCall","fun","objCall","Map","set","substitute","start","peek","$lines","def$s","forEach","$","lines","getProof","concat","$num","Variable","canUse","ZERO","FOUR","makeTeXName","$Variable","expandMeta","FIVE","Schema","schemaType","hyps","isProvedCache","cache","_context","repeat","proved","toTeXStringWithId","Funcall","isNameable","resolvedType","paramTypes","argTypes","arg","callee","isExpandable","isCallable","expandOnce","THREE","thisIsExpandable","objIsExpandable","every","_","schema","schemalines","funcallToTeXString","Expr0","MetaType","left","right","Parameter","ObjectFun","makeTeX","Type","Tee","lef","TWO","leftlines","rightlines","flat","expanded","grammar","default","Program","parser","scopeMap","filename","loader","loadingModules","scope","loadModuleInternal","loadingModuleIndex","indexOf","cycle","slice","fileUri","parse","feed","pop","line","scope2","importMap","hasType","addType","hasVariable","addVariable","addFun","hasSchema","addSchema","tee","reduction","schemacall","metavar","ktx","typeObjToString","ftype","typeObjToNestedArr","varObjToString","PI","parentScope","extend","location","getType","includes","getVariable","expr0","isParam","tvo","tv","hasOwnVariable","with","funcall","hypnum","Number","has$","get$","getSchema","$v","def$","hasOwn$","add$","metaexpr","scopeRight","oldContext","using","subject","g","leftargs","as","ExecutionContext","usingList","Reduction","derefs","guess","leftargTypes","leftargsExpanded","reduced","parameter","argument","recurse","ptr","test","leftarglines","leftargnums","subjectlines","subjectnum","With","var","ProofExplorer","DIAMOND","getHtmlLine","h1","h2","options","padding","bbb","rrb","htmlLeft","a","ncols","exprToHtml","expand","tree","innertree","Math","max","html","tree2html","newleft","fill","Counter","Scope","parent","typedefMap","defMap","schemaMap","baseType","child","h","values","hasOwnType","broadcast","filter","hasOwnSchema","StackTrace","stack","element","column"],"mappings":"CAAA,SAAUA,iCAAiCC,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAc,KAAID,IAElBD,EAAW,KAAIC,IARjB,CASmB,oBAATK,KAAuBA,KAAOC,MAAM,WAC9C,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,oBAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUR,QAGnC,IAAIC,EAASK,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQH,GAAUI,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASO,qBAG/DN,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAO,oBAAoBM,EAAIF,EAGxBJ,oBAAoBO,EAAIR,EAGxBC,oBAAoBQ,EAAI,SAASf,EAASgB,EAAMC,GAC3CV,oBAAoBW,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,oBAAoBgB,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDnB,oBAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,oBAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,oBAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,oBAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,oBAAoB2B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,SAASM,aAAe,OAAOlC,EAAgB,SAC/C,SAASmC,mBAAqB,OAAOnC,GAEtC,OADAM,oBAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,oBAAoBW,EAAI,SAASmB,EAAQC,GAAY,OAAOnB,OAAOoB,UAAUC,eAAe5B,KAAKyB,EAAQC,IAGzG/B,oBAAoBkC,EAAI,GAIjBlC,oBAAoBA,oBAAoBmC,EAAI,I,gFChFrD,IAAIC,EAAM,EAIV,MAA8BC,KAY7B,YAAaC,EAAmBC,EAAaC,GAC5C1C,KAAK2C,MAAQL,EACbtC,KAAKwC,MAAQA,EACbxC,KAAKyC,IAAMA,EACXzC,KAAK0C,IAAMA,EAGL,WACN,OAAO1C,KAAK4C,iBAAiB,GAMvB,MAAMC,GACZ,OAAON,KAAKO,MAAMD,EAAS7C,KAAKwC,OAG1B,aAAaK,EAAiBL,GACpC,OAAIA,EACIA,EAAMM,MAAMD,GAEZ,IAAIE,MAAMF,GAQZ,2BAA2BG,GACjC,IAAa,IAATA,EAAgB,MAAO,CAAC,EAAG,GAC/B,IAAa,IAATA,EAAe,MAAO,CAAC,EAAG,GAC9B,GAAmB,iBAARA,EAAkB,MAAO,CAAC,EAAGA,GAExC,KAAMA,aAAgBC,OAAwB,GAAfD,EAAKE,QAEnC,MADAC,QAAQC,IAAIJ,GACND,MAAM,OAGb,OAAOC,EAGD,kBAAkBA,GACxB,IAAIK,EAAKd,KAAKe,oBAAoBtD,KAAKuD,aAAc,GACpDC,EAAOjB,KAAKe,oBAAoBN,IAAQ,GAEzC,OAAa,GAATK,EAAG,IAAoB,GAATA,EAAG,OAEZA,EAAG,GAAKG,EAAK,IAAMH,EAAG,IAAMG,EAAK,IAAMH,EAAG,GAAKG,EAAK,IAGvD,iBAAiBnB,GACvB,OAAOA,EAAEoB,QAAQ,2BAA2BjD,IAAK,CAChD,IAAK,MAAO,IAAK,MAAO,EAAK,MAC7B,IAAK,MAAO,EAAK,MAAO,IAAK,MAC7B,IAAK,MACL,IAAK,mBACL,IAAK,oBACL,KAAM,mBACJA,MAGG,gBAAgBkC,GACtB,IAAIa,GAAyB,EAEzBG,EAAOhB,EAAIe,QAAQ,qBAAqB,CAACE,EAAOC,KACnDL,EAAkB,EAALK,EACN,MAGR,MAAO,CAACL,aAAYG,QAGd,mBAAmB/C,GACzB,IASIkD,EAAQ,IAAIC,OAAO,gBATR,CACd,QAAS,OAAQ,QAAS,QAC1B,UAAW,OAAQ,MAAO,QAC1B,OAAQ,QAAS,SAAU,KAC3B,KAAM,KAAM,UAAW,KACvB,MAAO,QAAS,MAAO,UACvB,MAAO,MAAO,MAAO,SAG0BC,KAAK,kBAAmB,KACpEJ,EAAQhD,EAAKgD,MAAME,GAEvB,OAAIF,EACU,MACZ,GAAIA,EAAM,GAAI,OAAOA,EAAM,GAE3B,IAAIK,EAAaL,EAAM,GAAGM,WAAW,IAAM,IAAIA,WAAW,GACtDC,EAAcP,EAAM,GAAGQ,cAM3B,OAJIH,IACHE,EAAcA,EAAY,GAAGE,cAAgBF,EAAYG,UAAU,IAG7D,KAAOH,GAVF,IAcPP,EAAM,GACY,GAAnBA,EAAM,GAAGT,OAAoB,IAAMS,EAAM,GACtC,KAAKA,EAAM,MAFI,IAQL,GAAfhD,EAAKuC,OACDX,KAAK+B,UAAU3D,GAGhB,YAAY4B,KAAK+B,UAAU3D,MAG5B,QAAQ4D,EAAIC,EAAMxB,GACxBwB,EAAOA,GAAQ,GACfxB,EAAOA,IAAQ,EAEf,IAAIyB,EAAMzE,KAAK0C,IAMf,OAJI1C,KAAK0E,kBAAkB1B,KAC1ByB,EAAM,UAAYA,EAAM,YAGlBA,EAAIhB,QAAQ,cAAc,CAACE,EAAOC,IACjCY,EAAU,EAALZ,EAAS,IAAM,gCAAgCA,QACzDH,QAAQ,aAAa,CAACkB,EAAQf,IACzB,WAAWW,MAAOX,QA9I5B,eAQwB,KAAAgB,aAAe,IACf,KAAAC,WAAa,IACb,KAAAC,cAAgB,K,0LCXxC,iBAOA,SAAYC,GAEX,mBAEA,iBAEA,iBAEA,qBAEA,mBAEA,mBAZD,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAe1B,MAA8BC,iBAAiB,UAK9C,YAAYxC,EAAmBC,EAAaC,EAAauC,GAGxD,GAFAC,MAAM1C,EAAOC,EAAKC,IAEbuC,EAAM,MAAM,UAAKnC,MAAM,mBAAoBN,GAEhDxC,KAAKiF,KAAOA,EASN,WAAWE,GACjB,OAAInF,KAAKoF,gBAAwBpF,KAAKoF,gBAC/BpF,KAAKoF,gBAAkBpF,KAAKqF,mBAAmBF,GAKhD,OAAOG,EAAeC,GAI5B,OAAIvF,OAASsF,KACRtF,KAAKiF,KAAKO,OAAOF,EAAIL,QAEtBK,EAAIG,kBAAkBF,GAAWvF,KAAKyF,kBAAkBF,GACpDD,EAAII,eAAe1F,KAAMuF,GAE1BvF,KAAK0F,eAAeJ,EAAKC,IAW1B,SAASI,GACfA,EAAaA,GAAc,GAE3B,IAAK,IAAIvF,EAAI,EAAGA,EAAIuF,EAAWzC,OAAQ9C,IACtC,GAAIuF,EAAWvF,IAAMJ,KAAM,OAAO,EAGnC,OAAOA,KAAK4F,iBAAiBD,GAKvB,SACLE,EACAC,EACAxD,EACA7C,GAAc,GAEf,OAAIoG,EAAUE,IAAI/F,MACV,CAAC,CACPgG,MAAO,IACP1D,IAAKA,EAAI2D,OACTC,IAAKL,EAAU5E,IAAIjB,MACnBmG,KAAMnG,OAIJ8F,EAAKC,IAAI/F,MACL,CAAC,CACPgG,MAAO,IACP1D,IAAKA,EAAI2D,OACTC,IAAKJ,EAAK7E,IAAIjB,MACdmG,KAAMnG,OAIDA,KAAKoG,iBAAiBP,EAAWC,EAAMxD,EAAK7C,IAnFrD,oB,kKC1BA,gBACA,WAEA,MAAqB4G,mBAAmB,UAQvC,YAAaxF,GACZ,GAAIA,EAAEyF,OAAQ,CAKb,GAJApB,MAAM,KAAMrE,EAAE4B,IAAK,KAAM5B,EAAEyF,OAAOC,cAElCvG,KAAKwG,aAAe3F,EAAE4F,KAED,iBAAV5F,EAAEF,KACZ,MAAM,UAAKmC,MAAM,4BAA+B,MAGjD,GAFA9C,KAAKW,KAAOE,EAAEF,OAERE,EAAEyF,kBAAkBD,YACzB,MAAM,UAAKvD,MAAM,oCAAqC,MAEvD9C,KAAKsG,OAASzF,EAAEyF,WACV,CAKN,GAJApB,MAAM,KAAMrE,EAAE4B,IAAK,KAAM5B,EAAE6F,YAE3B1G,KAAKwG,aAAe3F,EAAE4F,KAEK,kBAAhB5F,EAAE6F,WACZ,MAAM,UAAK5D,MAAM,mCAAsC,MAExD,GAAKjC,EAAE6F,WAIA,CACN,GAAI7F,EAAE8F,KAAKC,KAAIC,GAAKA,aAAaR,aAAYS,MAAKC,IAAMA,IACvD,MAAM,UAAKjE,MAAM,yDAA0D,MAC5E,KAAMjC,EAAEmG,cAAcX,YACrB,MAAM,UAAKvD,MAAM,gCAAiC,MAEnD9C,KAAK2G,KAAO9F,EAAE8F,KACd3G,KAAKgH,GAAKnG,EAAEmG,OAXM,CAClB,GAAqB,iBAAVnG,EAAEF,KACZ,MAAM,UAAKmC,MAAM,4BAA+B,MACjD9C,KAAKW,KAAOE,EAAEF,OAaV,iBACN,GAAIX,KAAKW,KAAM,OAAOX,KAAKW,KAE3B,IAAIsG,EAAWjH,KAAKkH,UAEpB,MAAO,IAAID,EAASN,KAAKC,KAAIG,GAAKA,EAAEI,mBAAkBpD,KAAK,YAAYkD,EAASD,GAAGG,oBAG7E,iBAAiBC,GACvB,OAAIpH,KAAKqH,SAAiBrH,KAAKW,KAExB,GAAGX,KAAKW,KAAOX,KAAKW,KAAO,KAAO,MAAMX,KAAKkH,UAAUP,KAAK5C,KAAK,YAAY/D,KAAKkH,UAAUF,MAG7F,YAAYvH,GAClB,OAAIO,KAAKqH,WAEJ5H,GAAQO,KAAKW,KAFQ,gBAAgBX,KAAKW,iBAAiBX,KAAKW,SAM3DX,KAAKW,KAAO,gBAAgBX,KAAKW,iBAAiBX,KAAKW,UAAY,KAC1E,UAAUX,KAAKkH,UAAUP,KAAKC,KAAIG,GAAKA,EAAEO,gBAAevD,KAAK,cAC7D,SAAS/D,KAAKkH,UAAUF,GAAGM,yBAGxB,UACN,OAAOtH,KAAKsG,OAAStG,KAAKsG,OAAOY,UAAYlH,KAGvC,OAAOsB,GACb,KAAMA,aAAa+E,YAAa,OAAO,EAEvC,GAAIrG,KAAKsG,OAAQ,OAAOtG,KAAKsG,OAAOd,OAAOlE,GAC3C,GAAIA,EAAEgF,OAAQ,OAAOtG,KAAKwF,OAAOlE,EAAEgF,QAEnC,GAAItG,KAAKqH,UAAY/F,EAAE+F,SAAU,OAAO,EAExC,GAAIrH,KAAKqH,SAAU,OAAOrH,OAASsB,EAEnC,GAAItB,KAAK2G,KAAKzD,QAAU5B,EAAEqF,KAAKzD,OAAQ,OAAO,EAE9C,IAAK,IAAI9C,EAAI,EAAGA,EAAIJ,KAAK2G,KAAKzD,OAAQ9C,IACrC,IAAKJ,KAAK2G,KAAKvG,GAAGoF,OAAOlE,EAAEqF,KAAKvG,IAAK,OAAO,EAE7C,OAAOJ,KAAKgH,GAAGxB,OAAOlE,EAAE0F,KA3F1B,sB,kKCJA,gBAGA,MAA8BO,YAAY,UAQzC,aAAa,IAAC9E,EAAG,IAAEC,EAAG,YAAE8E,EAAW,OAAEC,EAAM,QAAEC,EAAO,KAAE/G,EAAI,OAAEgH,EAAM,KAAExB,GAAwB3D,GAC3F,IAAK7B,IAASwF,EACb,MAAM,UAAKrD,MAAM,oCAAqCN,GAEvD,GAAIkF,GAAWvB,IACTuB,EAAQlC,OAAOW,EAAKlB,MACxB,MAAM,UAAKnC,MAAM,mBAAmBqD,EAAKlB,wCAAwCyC,YAAkB/G,IAAQ6B,GAI7G,IAAKkF,IAAYvB,EAChB,MAAM,UAAKrD,MAAM,kDAAmDN,GAGrE,GAAIiF,IAAWtB,EACd,MAAM,UAAKrD,MAAM,8BAA+BN,GAGjD,IAAIe,GAAa,EAEjB,GAAIb,EAAK,CACR,IAAIkF,EAAS,UAAKC,SAASnF,GAC3Ba,EAAaqE,EAAOrE,WACpBb,EAAMkF,EAAOlE,UAEbhB,EAAM,KAGPwC,MACC1C,EAAOC,EAAKC,EACZ,KAAMgF,GAAWvB,EAAKlB,gBAAiB,UAAa,UAAa,WAAU,CAC1EyB,YAAY,EACZC,KAAMgB,EAAOf,KAAIkB,GAAYA,EAAS7C,OACtC+B,GAAIU,GAAWvB,EAAKlB,QAItBjF,KAAKwH,YAAcA,EACnBxH,KAAKyH,OAASA,EACdzH,KAAKuD,WAAaA,EAClBvD,KAAKW,KAAOA,EACZX,KAAK2H,OAASA,EACd3H,KAAKmG,KAAOA,EAGH,iBAAiBR,GAC1B,OAAO3F,KAAKmG,MAAQnG,KAAKmG,KAAK4B,SAASpC,GAG9B,oBACT,OAAO,EAAAZ,eAAeiD,IAGb,eAAe1C,EAAeC,GACvC,KAAMvF,KAAKmG,MAASnG,KAAKyH,YAClBnC,aAAeiC,KAAOjC,EAAIa,OAASb,EAAImC,QAC7C,OAAO,EAMR,IAHA,IAAIQ,EAAe,GACfC,EAASlI,KAAKiF,KAAKiC,UAAoCP,KAElDvG,EAAI,EAAGA,EAAI8H,EAAMhF,OAAQ9C,IACjC6H,EAAaE,KAAK,IAAI,UAAU,CAC/BlD,KAAMiD,EAAM9H,GACZO,KAAM,IAAMP,EACZgI,SAAU,MACRpI,KAAKwC,QAGT,IAAI6F,EAAWrI,KAAKmG,OAASnG,KAAKyH,OAC/BzH,KAAKO,KAAK0H,GACV,IAAI,UAAQ,CACbK,IAAKtI,KACLwE,KAAMyD,GACJjI,KAAKwC,OAEL+F,EAAUjD,aAAeiC,KAAOjC,EAAIa,OAASb,EAAImC,OAClDnC,EAAI/E,KAAK0H,GACT,IAAI,UAAQ,CACbK,IAAKhD,EACLd,KAAMyD,GACJjI,KAAKwC,OAET,OAAO6F,EAAS7C,OAAO+C,EAAShD,GAK1B,KAAKf,GACX,IAAKxE,KAAKmG,KACT,MAAMpD,MAAM,+BAGb,GAAI/C,KAAK2H,OAAOzE,QAAUsB,EAAKtB,OAC9B,MAAMH,MAAM,4BAKb,IAFA,IAAI6D,EAA4B,IAAI4B,IAE3BpI,EAAI,EAAGA,EAAIJ,KAAK2H,OAAOzE,OAAQ9C,IACvCwG,EAAI6B,IAAIzI,KAAK2H,OAAOvH,GAAIoE,EAAKpE,IAG9B,OAAOJ,KAAKmG,KAAKuC,WAAW9B,GAGnB,iBACRf,EACAC,EACAxD,EACA7C,GAAc,GAEf,GAAIO,gBAAgB,WAAUA,KAAKW,OAASlB,EAC3C,MAAO,CAAC,CACPuG,MAAO,KACP1D,IAAKA,EAAI2D,OACTE,KAAMnG,OAIR,IAAKA,KAAKmG,KACT,MAAO,CAAC,CACPH,MAAO,KACP1D,IAAKA,EAAI2D,OACTE,KAAMnG,OAIR8F,EAAO,IAAI0C,IAAI1C,GAEf,IAAI6C,EAAQrG,EAAIsG,OAAS,EAErBC,EAAsB,GAY1B,OAVI7I,gBAAgB,WACnBA,KAAK8I,MAAMC,SAAQC,IAClB,IAAIC,EAAQD,EAAE7C,KAAK+C,SAASrD,EAAWC,EAAMxD,GAC7CuG,EAASA,EAAOM,OAAOF,GAEvB,IAAIG,EAAOH,EAAMA,EAAM/F,OAAS,GAAGZ,IACnCwD,EAAK2C,IAAIO,EAAGI,MAIP,CAAC,CACPpD,MAAO,IACP6C,SACAI,MAAOjJ,KAAKmG,KAAK+C,SAASrD,EAAWC,EAAMxD,GAC3CqF,OAAQ3H,KAAK2H,OACbrF,IAAK,CAACqG,EAAOrG,EAAIsG,WA9JpB,cAmKA,gBACA,OACA,UACA,UACA,UAOA,UACA,Y,kKC9KA,gBACA,OAEA,UAYA,MAAqBS,iBAAiB,UAOrC,aAAa,IAAC5G,EAAG,IAAEC,EAAG,OAAE+E,EAAM,KAAExC,EAAI,KAAEtE,EAAI,KAAEwF,GAA6B3D,GAGxE,GAFA0C,MAAM1C,EAAOC,EAAKC,EAAKuC,GAEJ,iBAARtE,EACV,MAAM,UAAKmC,MAAM,mBAAoBN,GAEtC,GAAIiF,IAAWtB,EACd,MAAM,UAAKrD,MAAM,8BAA+BN,GAGjD,GAAI2D,IAASlB,EAAKO,OAAOW,EAAKlB,MAC7B,MAAM,UAAKnC,MAAM,mBAAmBqD,EAAKlB,iCAAiCA,iBAAoBtE,IAAQ6B,GAGvGxC,KAAKyH,OAASA,EACdzH,KAAKW,KAAOA,EACZX,KAAKmG,KAAOA,EAGH,iBAAiBR,GAC1B,OAAO,EAGD,WAAWiB,GACjB,OAAIA,EAAIb,IAAI/F,MAAc4G,EAAI3F,IAAIjB,MAI3BA,KAGE,mBAAmBmF,GAC5B,OAAOnF,KAGE,kBAAkBuF,GAC3B,OAAOvF,KAAKmG,MAAUnG,KAAKyH,SAAUlC,EAAQ+D,OAAOtJ,MAEjD,EAAA+E,eAAewE,KADf,EAAAxE,eAAeyE,KAIT,eAAelE,EAAeC,GACvC,QAAKvF,KAAKmG,SAELnG,KAAKyH,SAAUlC,EAAQ+D,OAAOtJ,QAC3BA,KAAKmG,KAAKX,OAAOF,EAAKC,IAMrB,iBACRM,EACAC,EACAxD,GAED,MAAO,CAAC,CACP0D,MAAO,KACP1D,IAAKA,EAAI2D,OACTE,KAAMnG,OAKD,iBACN,OAAOA,KAAKiF,KAAKkC,iBAAmB,IAAMnH,KAAKW,KAGzC,iBAAiByG,EAAgB3H,GACvC,MAAO,GAAGA,EAAOO,KAAKiF,KAAO,IAAM,KAAKjF,KAAKW,QAAQX,KAAK2C,OAGpD,YAAYK,EAAmBvD,GASrC,MAAO,WAREO,gBAAgB,UAAY,MAAMA,KAAK2C,IAAQ,OAAO3C,KAAKW,SAE1DX,KAAK0C,KAAO,UAAK+G,YAAYzJ,KAAKW,SAEjClB,GAAQO,KAAKmG,KACrB,cAAcnG,KAAKmG,KAAKmB,YAAY,UAAKxC,eACzC,MAtFL,mBA4FA,kB,2rBC1GA,gBAEA,UAQA,MAAqB4E,kBAAkB,UAKtC,aAAa,KAAC/I,EAAI,KAAEwF,GAA8B3D,GAGjD,GAFA0C,MAAM1C,EAAO,KAAM,KAAM2D,EAAKlB,OAEzBtE,IAASwF,EACb,MAAM,UAAKrD,MAAM,mBAAoBN,GAGtCxC,KAAKW,KAAOA,EACZX,KAAKmG,KAAOA,EAGH,iBAAiBR,GAC1B,OAAO3F,KAAKmG,KAAK4B,SAASpC,GAGpB,WAAWiB,GACjB,OAAO5G,KAAKmG,KAAKuC,WAAW9B,GAGnB,mBAAmBzB,GAC5B,OAAOnF,KAAKmG,KAAKwD,WAAWxE,GAGnB,oBACT,OAAO,EAAAJ,eAAe6E,KAGb,eAAetE,EAAeC,GACvC,OAAOvF,KAAKmG,KAAKX,OAAOF,EAAKC,GAGpB,iBACRM,EACAC,EACAxD,GAED,IAAKwD,EAAKC,IAAI/F,MACb,MAAM+C,MAAS/C,KAAKW,KAAR,mBAGb,MAAO,CAAC,CACPqF,MAAO,IACP1D,IAAKA,EAAI2D,OACTC,IAAKJ,EAAK7E,IAAIjB,MACdmG,KAAMnG,KAAKmG,OAIN,iBAAiBiB,EAAgB3H,GACvC,OAAOO,KAAKW,KAGN,YAAYqC,EAAmBvD,GACrC,MAAO,YAAY,UAAK6E,UAAUtE,KAAKW,UA1DzC,qB,kKCfA,gBAIA,MAAqBkJ,eAAe,UAQnC,aAAa,IAACpH,EAAG,IAAEC,EAAG,YAAE8E,EAAW,WAAEsC,EAAU,KAAEnJ,EAAI,OAAEgH,EAAM,QAAEpC,EAAO,MAAEuD,EAAK,KAAE3C,GAA2B3D,GACzG,IAAK2D,EACJ,MAAM,UAAKrD,MAAM,MAAON,GAGzB,GAAkB,UAAdsH,IAA2BnJ,EAC9B,MAAM,UAAKmC,MAAM,MAAON,GASzB,GANA0C,MAAM,CAACzC,MAAKC,MAAK8E,cAAaC,QAAQ,EAAOC,QAAS,KAAM/G,OAAMgH,SAAQxB,QAAO3D,GAEjFxC,KAAK8J,WAAaA,EAClB9J,KAAK8I,MAAQA,GAAS,GACtB9I,KAAKuF,QAAUA,EAEG,WAAduE,IACE9J,KAAK+H,WACT,MAAM,UAAKjF,MAAM,UAAUnC,gDAAoD6B,GAK3E,SAASuH,GACf,GAAI/J,KAAKgK,cAAe,OAAO,EAE/B,IAAKD,GAAqC,kBAAtB/J,KAAKgK,cACxB,OAAOhK,KAAKgK,cAGb,IAAIC,GAASF,IAASA,EAAK7G,OAC3B6G,EAAOA,GAAQ,GAEf,IAAItF,EAAyB,SAAnBzE,KAAK8J,YAAyB5E,MAAM6C,SAASgC,GAEvD,OADIE,IAAOjK,KAAKgK,cAAgBvF,GACzBA,EAGD,WAAWmC,GACjB,IAAK5G,KAAKmG,KAAM,OAAOnG,KAIvB,GAAIA,KAAKW,KAAM,OAAOX,KAGtB,GAAIA,KAAK2H,OAAOb,MAAKC,GAAKH,EAAIb,IAAIgB,KACjC,MAAMhE,MAAM,uBAEb,OAAO,IAAI8G,OAAO,CACjBpH,IAAK,KACLC,IAAK,KACL8E,YAAaxH,KAAKwH,YAClBsC,WAAY,SACZnJ,KAAM,KACNgH,OAAQ3H,KAAK2H,OACbpC,QAASvF,KAAKuF,QACduD,MAAO9I,KAAK8I,MACZ3C,KAAMnG,KAAKmG,KAAKuC,WAAW9B,IACzB5G,KAAKwC,OAGC,mBAAmB2C,GAC5B,OAAKnF,KAAKmG,KACNnG,KAAKiF,gBAAgB,WAAcjF,KAAKW,KAAaX,KAElD,IAAI6J,OAAO,CACjBpH,IAAK,KACLC,IAAK,KACL8E,YAAaxH,KAAKwH,YAClBsC,WAAY,SACZnJ,KAAM,KACNgH,OAAQ3H,KAAK2H,OACbpC,QAASvF,KAAKuF,QACduD,MAAO9I,KAAK8I,MACZ3C,KAAMnG,KAAKmG,KAAKwD,WAAWxE,IACzBnF,KAAKwC,OAbexC,KAgBjB,WAAWkK,GACjB,OAAO,EAGD,iBAAiB9C,EAAgB3H,GACvC,MAAO,CACN,KAAKO,KAAKW,MAAQ,MAAMX,KAAK2H,OAAOf,KAAIxE,GAAKA,EAAEQ,iBAAiBwE,KAASrD,KAAK,cAC9E,KAAO/D,KAAKmG,KAAKwD,YAAW,GAAM/G,iBAAiBwE,EAAS,GAC5D,KACCrD,KAAK,KAAO,KAAKoG,OAAO/C,IAGpB,YAAYpE,EAAmBvD,GACrC,IAAKO,KAAKW,KAET,OADAX,KAAKuD,WAAa,UAAKqB,aAChB,CACL5E,KAAK0E,kBAAkB1B,GAAQ,UAAY,GAGrB,GAAtBhD,KAAK2H,OAAOzE,OACVlD,KAAK2H,OAAO,GAAGL,aAAY,GAC3B,UAAUtH,KAAK2H,OAAOf,KAAIG,GAAKA,EAAEO,YAAY,UAAKzC,cAAad,KAAK,gBAEvE,YACA/D,KAAKmG,KAAKwD,YAAW,GAAMrC,aAAY,GAEtCtH,KAAK0E,kBAAkB1B,GAAQ,WAAa,IAC5Ce,KAAK,IAGR,IAAIQ,EAAK,OAASvE,KAAKW,KACtByJ,EAASpK,KAAK+H,WAAa,IAAM,KAElC,OAAKtI,EAGE,WAAW8E,wBAAyB6F,eAAoB,UAAK9F,UAAUtE,KAAKW,4BAA4BX,KAAK2H,OAAOf,KAAIG,GAAKA,EAAEsD,kBAAkB,UAAKxF,aAAekC,EAAEqB,SAAW,eAAerB,EAAEqB,YAAc,MAAKrE,KAAK,4BAC9N/D,KAAKmG,KAAKwD,YAAW,GAAMrC,aAAY,GAHnC,WAAW/C,wBAAyB6F,eAAoB,UAAK9F,UAAUtE,KAAKW,YAxHtF,iBAkIA,gBACA,W,kKCnIA,gBACA,UACA,UACA,OAEA,QACA,UACA,WAEA,UACA,UAOA,MAAqB2J,gBAAgB,UAKpC,aAAa,IAAChC,EAAG,KAAE9D,GAA4BhC,GAC9C,GAAI8F,EAAIrD,KAAKoC,SAAU,CACtB,IAAI1G,EAAO,EAAA4J,WAAWjC,GAAOA,EAAI3H,KAAO,cACxC,MAAM,UAAKmC,MAASnC,EAAH,mBAA2B6B,GAG7C,KAAMgC,aAAgBvB,QAAUuB,EAAKoC,KAAIG,GAAKA,aAAa,YAAMD,MAAKC,IAAMA,IAC3E,MAAM,UAAKjE,MAAM,mBAAoBN,GAEtC,IAAIgI,EAAelC,EAAIrD,KAAKiC,UAC3BuD,EAAaD,EAAa7D,KAC1B+D,EAAWlG,EAAKoC,KAAIG,GAAKA,EAAE9B,OAE5B,GAAIwF,EAAWvH,QAAUwH,EAASxH,OACjC,MAAM,UAAKJ,MAAM,yCAAyC2H,EAAWvH,YAAYwH,EAASxH,SAAUV,GAErG,IAAK,IAAIpC,EAAI,EAAGA,EAAIqK,EAAWvH,OAAQ9C,IACtC,IAAKqK,EAAWrK,GAAGoF,OAAOkF,EAAStK,IAClC,MAAM,UAAK0C,MAAM,aAAa1C,EAAI,yCAAyCqK,EAAWrK,QAAQsK,EAAStK,KAAMoC,GAI/G0C,MAAM1C,EAAO,KAAM,KAAMgI,EAAaxD,IAEtChH,KAAKsI,IAAMA,EACXtI,KAAKwE,KAAOA,EAGH,iBAAiBmB,GAC1B,OAAO3F,KAAKsI,IAAIP,SAASpC,GAGnB,WAAWiB,GACjB,OAAO,IAAI0D,QAAQ,CAClBhC,IAAKtI,KAAKsI,IAAII,WAAW9B,GACzBpC,KAAMxE,KAAKwE,KAAKoC,KAAI+D,GAAOA,EAAIjC,WAAW9B,MACxC5G,KAAKwC,OAGC,mBAAmB2C,GAC5B,IAAImD,EAAMtI,KAAKsI,IAAIqB,WAAWxE,GAC7BX,EAAOxE,KAAKwE,KAAKoC,KAAI+D,GAAOA,EAAIhB,WAAWxE,KAE5C,OAAMmD,aAAe,WAASA,EAAInC,QAAQmC,EAAI3H,MAAU2H,aAAe,WAGhEA,EAAI/H,KAAKiE,GAAMmF,WAAWxE,GAFzB,IAAImF,QAAQ,CAAChC,MAAK9D,QAAOxE,KAAKwC,OAKhC,aAAa+C,GAGnB,IAFA,IAAIqF,EAAmB5K,KAAKsI,IAErBsC,aAAkB,WACxBA,EAASA,EAAOzE,KAGjB,KAAOyE,aAAkB,WAAYA,EAAOzE,MAC3CyE,EAASA,EAAOzE,KAGjB,OAAIyE,aAAkBN,QACdM,EAAOC,aAAatF,GAGtBqF,aAAkB,WAEjBA,EAAOE,WAAWvF,GAGnB,WAAWA,GACjB,IAAKvF,KAAK6K,aAAatF,GACtB,MAAMxC,MAAM,iBAKb,IAFA,IAAI6H,EAAmB5K,KAAKsI,IAErBsC,aAAkB,WACxBA,EAASA,EAAOzE,KAGjB,KAAOyE,aAAkB,WAAYA,EAAOzE,MAC3CyE,EAASA,EAAOzE,KAGjB,GAAIyE,aAAkBN,QACrB,OAAO,IAAIA,QAAQ,CAClBhC,IAAKsC,EAAOG,WAAWxF,GACvBf,KAAMxE,KAAKwE,MACTxE,KAAKwC,OAGT,KAAMoI,aAAkB,WACvB,MAAM7H,MAAM,qBAGb,OAAO6H,EAAOrK,KAAKP,KAAKwE,MAGf,oBACT,OAAO,EAAAO,eAAeiG,MAGb,eAAe1F,EAAeC,GACvC,KAAMD,aAAegF,SACpB,QAAKtK,KAAK6K,aAAatF,IAEhBvF,KAAK+K,WAAWxF,GAASC,OAAOF,EAAKC,GAG7C,GAAIvF,KAAKsI,KAAOhD,EAAIgD,KAAOtI,KAAKsI,IAAI9C,OAAOF,EAAIgD,IAAK/C,GAAU,CAC7D,IAAK,IAAInF,EAAI,EAAGA,EAAIJ,KAAKwE,KAAKtB,OAAQ9C,IACrC,IAAKJ,KAAKwE,KAAKpE,GAAGoF,OAAOF,EAAId,KAAKpE,GAAImF,GAAU,OAAO,EAGxD,OAAO,EAGR,GAAIvF,KAAKsI,eAAegC,SAAWtK,KAAKsI,IAAIuC,aAAatF,GACxD,OAAOvF,KAAK+K,WAAWxF,GAASC,OAAOF,EAAKC,GAG7C,GAAID,EAAIgD,eAAegC,SAAWhF,EAAIgD,IAAIuC,aAAatF,GACtD,OAAOvF,KAAKwF,OAAOF,EAAIyF,WAAWxF,GAAUA,GAG7C,IAAI0F,EAAmBjL,KAAK6K,aAAatF,GACxC2F,EAAkB5F,EAAIuF,aAAatF,GAEpC,GAAIvF,KAAKsI,KAAOhD,EAAIgD,MAAQ2C,IAAqBC,EAAiB,CACjE,GAAIlL,KAAKsI,KAAOhD,EAAIgD,IAAK,OAAO,EAEhC,IAAK2C,IAAqBC,EAAiB,CAC1C,IAAS9K,EAAI,EAAGA,EAAIJ,KAAKwE,KAAKtB,OAAQ9C,IACrC,IAAKJ,KAAKwE,KAAKpE,GAAGoF,OAAOF,EAAId,KAAKpE,GAAImF,GAAU,OAAO,EAGxD,OAAO,EAGR,GAAIvF,KAAKwE,KAAK2G,OAAM,CAACC,EAAGhL,IAChBJ,KAAKwE,KAAKpE,GAAGoF,OAAOF,EAAId,KAAKpE,GAAImF,KAExC,OAAO,EAIT,OAAI0F,EACIjL,KAAK+K,WAAWxF,GAASC,OAAOF,EAAKC,GAGtCvF,KAAKwF,OAAOF,EAAIyF,WAAWxF,GAAUA,GAGnC,iBACRM,EACAC,EACAxD,GAED,GAAIuD,EAAUE,IAAI/F,KAAKsI,KACtB,MAAO,CAAC,CACPtC,MAAO,KACP1D,IAAKA,EAAI2D,OACToF,OAAQxF,EAAU5E,IAAIjB,KAAKsI,KAC3B9D,KAAMxE,KAAKwE,KACX2B,KAAMnG,OAIR,GAAI8F,EAAKC,IAAI/F,KAAKsI,KACjB,MAAO,CAAC,CACPtC,MAAO,KACP1D,IAAKA,EAAI2D,OACToF,OAAQvF,EAAK7E,IAAIjB,KAAKsI,KACtB9D,KAAMxE,KAAKwE,KACX2B,KAAMnG,OAIR,GAAIA,KAAKsI,eAAe,WAAUtI,KAAKsI,IAAI3H,KAC1C,MAAO,CAAC,CACPqF,MAAO,MACP1D,IAAKA,EAAI2D,OACTE,KAAMnG,OAIR,KAAMA,KAAKsI,eAAe,WACzB,MAAO,CAAC,CACPtC,MAAO,KACP1D,IAAKA,EAAI2D,OACTE,KAAMnG,OAIR,IAAIsL,EAActL,KAAKsI,IAAIY,SAASrD,EAAWC,EAAMxD,GAErD,MAAO,IACHgJ,EACH,CACCtF,MAAO,KACP1D,IAAKA,EAAI2D,OACToF,OAAQC,EAAYA,EAAYpI,OAAS,GAAGZ,IAC5CkC,KAAMxE,KAAKwE,KACX2B,KAAMnG,OAKF,iBAAiBoH,EAAgB3H,GACvC,IAAI+E,EAAYxE,KAAKwE,KAAKoC,KAAI+D,GACzBA,aAAe,UAAiB,GAAGA,EAAIhK,QAAQgK,EAAIhI,OAChDgI,EAAI/H,iBAAiBwE,EAAS,KAGtC,OAAI5C,EAAKT,KAAK,IAAIb,QAAU,IAM3BsB,GALAA,EAAOxE,KAAKwE,KAAKoC,KAAI+D,GAChBA,aAAe,UAAiB,GAAGA,EAAIhK,QAAQgK,EAAIhI,OAChDgI,EAAI/H,iBAAiBwE,MAGjBrD,KAAK,MAEb/D,KAAKsI,eAAe,UAChB,GAAGtI,KAAKsI,IAAI3H,MAAQ,IAAIX,KAAKsI,UAAU9D,KAEvC,CACJxE,KAAKsI,eAAe,WAAStI,KAAKsI,IAAI3H,KAErCX,KAAKsI,IAAI3H,KADT,IAAMX,KAAKsI,IAAI1F,iBAAiBwE,GAAU,IAE7C,IAAI5C,MACHT,KAAK,MAGRS,EAAOA,EAAKT,KAAK,MAAQ,KAAKoG,OAAO/C,EAAS,IAE1CpH,KAAKsI,eAAe,UAChB,CACNtI,KAAKsI,IAAI3H,MAAQ,IAAIX,KAAKsI,IAAI1F,iBAAiBwE,MAC/C,IACA,KAAO5C,EACP,KACCT,KAAK,KAAO,KAAKoG,OAAO/C,IAEnB,EAEHpH,KAAKsI,eAAe,WAAU,SAAUtI,KAAKsI,KAAOtI,KAAKsI,IAAI3H,KAE5DX,KAAKsI,IAAI3H,KADT,IAAMX,KAAKsI,IAAI1F,iBAAiBwE,GAAU,KAE1C,IACJ,KAAO5C,EACP,KACCT,KAAK,KAAO,KAAKoG,OAAO/C,KAKtB,YAAYpE,EAAmBvD,GACrC,GAAIO,KAAKsI,eAAe,UACvB,OACCtI,KAAKsI,IAAI3H,KACN,kBAAkBX,KAAKsI,IAAIP,WAAa,IAAM,QAAQ/H,KAAKsI,IAAI3H,kBAAkB,UAAK2D,UAAUtE,KAAKsI,IAAI3H,UACzGX,KAAKsI,IAAIhB,aAAY,IACrB,oBAAoBtH,KAAKwE,KAAKoC,KAAI+D,GAC9BA,EAAIrD,YAAY,UAAKzC,cAC1Bd,KAAK,iBAGT,GAAI/D,KAAKsI,eAAe,UACvB,OAAOtI,KAAKsI,IAAIiD,mBAAmBvL,KAAKwE,KAAMxB,GAE/C,IAAIwB,EAAOxE,KAAKwE,KAAKoC,KAAI+D,GACjBA,EAAIrD,YAAY,UAAKzC,cAG7B,QACG,EAAA0F,WAAWvK,KAAKsI,OAAQtI,KAAKsI,IAAI3H,MAASX,KAAKsI,eAAe,UAC7DtI,KAAKsI,IAAIhB,aAAY,GACrB,UAAKmC,YAAYzJ,KAAKsI,IAAI3H,OAC1B,oBAAoB6D,EAAKT,KAAK,kBA3RpC,mB,kKCrBA,gBAEA,MAA8ByH,cAAc,WAA5C,iB,kKCFA,gBACA,UACA,WAgBA,MAAqBC,iBAAiB,UAOrC,YAAa5K,GAGZ,GAFAqE,MAAM,KAAM,KAAM,KAAMrE,EAAE6F,YAEC,kBAAhB7F,EAAE6F,WACZ,MAAM,UAAK5D,MAAM,mCAAsC,MAExD,GAAoB,GAAhBjC,EAAE6F,WAAqB,CAC1B,KAAM7F,EAAE6K,gBAAgBzI,OACvB,MAAM,UAAKH,MAAM,0BAA2B,MAE7C9C,KAAK0L,KAAO7K,EAAE6K,KACd1L,KAAK2L,MAAQ9K,EAAE8K,UACT,CACN,GAAI9K,EAAE8F,KAAKG,MAAKD,KAAOA,aAAa,aACnC,MAAM,UAAK/D,MAAM,+CAAgD,MAClE,KAAMjC,EAAEmG,cAAcyE,UACrB,MAAM,UAAK3I,MAAM,8BAA+B,MAEjD,GAAIjC,EAAEmG,GAAGT,aACR,MAAM,UAAKzD,MAAM,8DAA+D,MAEjF9C,KAAK2G,KAAO9F,EAAE8F,KACd3G,KAAKgH,GAAKnG,EAAEmG,IAIP,UACN,OAAOhH,KAGD,iBAAiBoH,GACvB,OAAIpH,KAAKqH,SAAiB,IAAIrH,KAAK0L,KAAK3H,KAAK,YAAY/D,KAAK2L,SAEvD,IAAI3L,KAAK2G,KAAK5C,KAAK,YAAY/D,KAAKgH,MAGrC,YAAYhE,EAAmBvD,GACrC,MAAM,IAAIsD,MAAM,2BAGV,OAAOzB,GACb,KAAMA,aAAamK,UAAW,OAAO,EAErC,GAAIzL,KAAKqH,UAAY/F,EAAE+F,SAAU,OAAO,EAExC,GAAIrH,KAAKqH,SAAU,CAClB,GAAIrH,KAAK0L,KAAKxI,QAAU5B,EAAEoK,KAAKxI,OAAQ,OAAO,EAE9C,IAAK,IAAI9C,EAAI,EAAGA,EAAIJ,KAAK0L,KAAKxI,OAAQ9C,IACrC,IAAKJ,KAAK0L,KAAKtL,GAAGoF,OAAOlE,EAAEoK,KAAKtL,IAAK,OAAO,EAG7C,QAAKJ,KAAK2L,MAAMnG,OAAOlE,EAAEqK,OAK1B,GAAI3L,KAAK2G,KAAKzD,QAAU5B,EAAEqF,KAAKzD,OAAQ,OAAO,EAE9C,IAAK,IAAI9C,EAAI,EAAGA,EAAIJ,KAAK2G,KAAKzD,OAAQ9C,IACrC,IAAKJ,KAAK2G,KAAKvG,GAAGoF,OAAOlE,EAAEqF,KAAKvG,IAAK,OAAO,EAE7C,OAAOJ,KAAKgH,GAAGxB,OAAOlE,EAAE0F,KArE1B,oB,kKCfA,gBAUA,MAAqB4E,kBAAkB,UAItC,aAAa,IAACnJ,EAAG,IAAEC,EAAG,KAAEuC,EAAI,KAAEtE,EAAI,SAAEyH,GAAkC5F,GACrE0C,MAAM,CAACzC,MAAKC,MAAK+E,QAAQ,EAAOxC,OAAMtE,OAAMwF,KAAM,MAAO3D,GAEzDxC,KAAKoI,SAAWA,EAGV,kBAAkBpF,EAAmBvD,GAG3C,MAAO,CACN,YAHO,MAAMO,KAAK2C,QAIlB3C,KAAKsH,YAAYtE,EAAMvD,GACvB,KACCsE,KAAK,KAjBT,qB,kKCVA,gBAEA,UACA,UAgBA,MAAqB8H,kBAAkB,UAEtC,aAAa,IAACpJ,EAAG,IAAEC,EAAG,YAAE8E,EAAW,OAAEC,EAAM,QAAEC,EAAO,KAAE/G,EAAI,OAAEgH,EAAM,KAAExB,GAA8B3D,GACjG0C,MAAM,CAACzC,MAAKC,MAAK8E,cAAaC,SAAQC,UAAS/G,OAAMgH,SAAQxB,QAAO3D,GAG9D,WAAWoE,GACjB,IAAK5G,KAAKmG,KAAM,OAAOnG,KAIvB,GAAIA,KAAKW,KAAM,OAAOX,KAGtB,GAAIA,KAAK2H,OAAOb,MAAKC,GAAKH,EAAIb,IAAIgB,KACjC,MAAMhE,MAAM,uBAEb,OAAO,IAAI8I,UAAU,CACpBpJ,IAAK,KACLC,IAAK,KACL8E,YAAaxH,KAAKwH,YAClBC,OAAQzH,KAAKyH,OACbC,QAAS,KACT/G,KAAM,KACNgH,OAAQ3H,KAAK2H,OACbxB,KAAMnG,KAAKmG,KAAKuC,WAAW9B,IACzB5G,KAAKwC,OAGC,mBAAmB2C,GAC5B,OAAKnF,KAAKmG,KACNnG,KAAKiF,gBAAgB,WAAcjF,KAAKW,KAAaX,KAElD,IAAI6L,UAAU,CACpBpJ,IAAK,KACLC,IAAK,KACL8E,YAAaxH,KAAKwH,YAClBC,OAAQzH,KAAKyH,OACbC,QAAS,KACT/G,KAAM,KACNgH,OAAQ3H,KAAK2H,OACbxB,KAAMnG,KAAKmG,KAAKwD,WAAWxE,IACzBnF,KAAKwC,OAZexC,KAejB,WAAWuF,GACjB,OAAOvF,KAAKmG,QAAUnG,KAAKyH,QAAUlC,EAAQ+D,OAAOtJ,OAG9C,iBAAiBoH,EAAgB3H,GACvC,OAAIO,KAAKW,KAAaX,KAAKW,KAEpB,CACN,KAAKX,KAAKW,MAAQ,MAAMX,KAAK2H,OAAOf,KAAIxE,GAAKA,EAAEQ,iBAAiBwE,KAASrD,KAAK,cAC9E,KAAO/D,KAAKmG,KAAKvD,iBAAiBwE,EAAS,GAC3C,KACCrD,KAAK,KAAO,KAAKoG,OAAO/C,IAGpB,YAAYpE,EAAmBvD,GACrC,OAAKO,KAAKW,KAiBLlB,EAGAO,KAAKmG,KAGHnG,KAAKuL,mBAAmBvL,KAAK2H,OAAQ,UAAK7C,eAC7C,cAAc9E,KAAKmG,KAAKmB,YAAY,UAAKxC,eAHrC9E,KAAKuL,mBAAmBvL,KAAK2H,OAAQ3E,GAHrC,eAAehD,KAAKW,SAAS,UAAK8I,YAAYzJ,KAAKW,UAjB1DX,KAAKuD,WAAa,UAAKqB,aAChB,CACL5E,KAAK0E,kBAAkB1B,GAAQ,UAAY,GAGrB,GAAtBhD,KAAK2H,OAAOzE,OACVlD,KAAK2H,OAAO,GAAGL,aAAY,GAC3B,UAAUtH,KAAK2H,OAAOf,KAAIG,GAAKA,EAAEO,YAAY,UAAKzC,cAAad,KAAK,gBAEvE,YACA/D,KAAKmG,KAAKwD,YAAW,GAAMrC,aAAY,GAEtCtH,KAAK0E,kBAAkB1B,GAAQ,WAAa,IAC5Ce,KAAK,KAaF,mBAAmBS,EAAMxB,GAK/B,OAJAwB,EAAOA,EAAKoC,KAAI+D,GACRA,EAAIrD,YAAYtH,KAAK0C,IAAM1C,KAAKuD,WAAa,UAAKsB,cAGtD7E,KAAK0C,IACD1C,KAAK8L,QAAQ,OAAS9L,KAAKW,KAAM6D,EAAMxB,IAI7ChD,KAAKW,KAEH,eAAeX,KAAKW,SAAS,UAAK8I,YAAYzJ,KAAKW,SADnDX,KAAKsH,aAAY,IAEjB,oBAAoB9C,EAAKT,KAAK,kBApGpC,qB,kKCrBA,gBAEA,MAA8BgI,aAAa,UAM1C,YAAavJ,EAAmBC,EAAaC,EAAa6D,GACzDrB,MAAM1C,EAAOC,EAAKC,GAClB1C,KAAKuG,aAAeA,EACpBvG,KAAKqH,UAAYd,GATnB,gB,kGCCA,sBAAgBgE,WAAWjF,GAC1B,MAAO,SAAUA,I,2rBCDlB,gBAEA,UACA,UACA,UACA,UASA,MAAqB0G,YAAY,UAMhC,aAAa,KAACN,EAAI,MAAE5C,EAAK,MAAE6C,GAAyBnJ,GACnD,KAAMkJ,aAAgBzI,OACjByI,EAAKP,OAAM9K,GACNA,EAAE4E,gBAAgB,WACrB5E,EAAE4E,gBAAgB,aAGxB,MADA9B,QAAQC,IAAIsI,GACN,UAAK5I,MAAM,mBAAoBN,GAGtC,GAAIsG,KAAWA,aAAiB7F,OAAS6F,EAAMqC,OAAMnC,GAAKA,aAAa,aACtE,MAAM,UAAKlG,MAAM,mBAAoBN,GAEtC,KAAMmJ,EAAM1G,gBAAgB,WAAc0G,EAAM1G,gBAAgB,WAE/D,MADA9B,QAAQC,IAAIuI,GACN,UAAK7I,MAAM,mBAAoBN,GAGtC,GAAImJ,EAAM1G,KAAKsB,aACd,MAAM,UAAKzD,MAAM,mCAAoCN,GAGtD0C,MAAM1C,EAAO,KAAM,KAAM,IAAI,UAAS,CACrCkE,YAAY,EACZgF,KAAMA,EAAK9E,KAAIG,GAAKA,EAAE9B,OACtB0G,MAAOA,EAAM1G,QAGdjF,KAAK0L,KAAOA,EACZ1L,KAAK8I,MAAQA,GAAS,GACtB9I,KAAK2L,MAAQA,EACb3L,KAAKuD,WAAa,UAAKsB,WAGd,iBAAiBc,GAC1B,OAAO3F,KAAK2L,MAAM5D,SAASpC,EAAWwD,OAAOnJ,KAAK0L,OAG5C,WAAW9E,GACjB,IAAI8E,EAAO1L,KAAK0L,KAAK9E,KAAIG,GAAKA,EAAE2B,WAAW9B,KACvC+E,EAAQ3L,KAAK2L,MAAMjD,WAAW9B,GAElC,OAAO,IAAIoF,IAAI,CACdN,OACA5C,MAAO,KACP6C,SACE3L,KAAKwC,OAGC,mBAAmB2C,GAC5B,IAAIuG,EAAO1L,KAAK0L,KAAK9E,KAAIqF,GAAOA,EAAItC,WAAWxE,KAC3CwG,EAAQ3L,KAAK2L,MAAMhC,WAAWxE,GAElC,OAAO,IAAI6G,IAAI,CAACN,OAAM5C,MAAO,KAAM6C,SAAQ3L,KAAKwC,OAGvC,oBACT,OAAO,EAAAuC,eAAemH,IAGb,eAAe5G,EAAeC,GACvC,KAAMD,aAAe0G,KACpB,MAAMjJ,MAAM,oBAGb,GAAI/C,KAAK0L,KAAKxI,QAAUoC,EAAIoG,KAAKxI,OAChC,MAAMH,MAAM,oBAGb,IAAK,IAAI3C,EAAI,EAAGA,EAAIJ,KAAK0L,KAAKxI,OAAQ9C,IACrC,IAAKJ,KAAK0L,KAAKtL,GAAGoF,OAAOF,EAAIoG,KAAKtL,GAAImF,GAAU,OAAO,EAGxD,OAAOvF,KAAK2L,MAAMnG,OAAOF,EAAIqG,MAAOpG,GAG3B,iBACRM,EACAC,EACAxD,GAEDuD,EAAY,IAAI2C,IAAI3C,GAEpB,IAAI8C,EAAQrG,EAAIsG,OAAS,EAErBuD,EAAyBnM,KAAK0L,KAAK9E,KAAIvG,IAC1CwF,EAAU4C,IAAIpI,EAAGiC,EAAI2D,QAEd,CACND,MAAO,IACP1D,IAAKA,EAAIsG,OACTzC,KAAM9F,MAaR,OATAyF,EAAO,IAAI0C,IAAI1C,GASR,CAAC,CACPE,MAAO,IACPmG,UAAWA,EACXC,WAVYpM,KAAK8I,MAAMlC,KAAIoC,IAC3B,IAAIC,EAAQD,EAAE7C,KAAK+C,SAASrD,EAAWC,EAAMxD,GACzC8G,EAAOH,EAAMA,EAAM/F,OAAS,GAAGZ,IAEnC,OADAwD,EAAK2C,IAAIO,EAAGI,GACLH,KACLoD,KAAK,GAKYlD,OAAOnJ,KAAK2L,MAAMzC,SAASrD,EAAWC,EAAMxD,IAC/DA,IAAK,CAACqG,EAAOrG,EAAIsG,UAIZ,iBAAiBxB,EAAgB3H,GACvC,OAAKO,KAAK0L,KAAKxI,OAIR,CACN,KAAOlD,KAAK0L,KAAK9E,KAAIG,GAAKA,EAAEnE,iBAAiBwE,EAAS,KAAIrD,KAAK,MAAQ,KAAKoG,OAAO/C,EAAS,IAC5F,KACA,KAAOpH,KAAK2L,MAAM/I,iBAAiBwE,EAAS,IAC3CrD,KAAK,KAAO,KAAKoG,OAAO/C,IAPlB,MAAQpH,KAAK2L,MAAM/I,iBAAiBwE,GAUtC,YAAYpE,EAAmBvD,GACrC,IAAI6M,EAAWtM,KAAK2J,YAAW,GAE/B,MAAO,CACL3J,KAAK0E,kBAAkB1B,GAAQ,UAAY,GAC5C,IAAIsJ,EAASZ,KAAK9E,KAAIG,GAAKA,EAAEO,YAAY,UAAKzC,cAAad,KAAK,iBAAiBuI,EAASX,MAAMrE,YAAY,UAAKzC,eAChH7E,KAAK0E,kBAAkB1B,GAAQ,WAAa,IAC5Ce,KAAK,KAzIT,e,gBClBA,IAAIwI,EAGHA,EAAU,EAAQ,IAA8BC,QAQjD,IAAIC,EAAU,EAAQ,IAAaD,QAEnC5M,EAAOD,QAAU,CAAC4M,UAASE,Y,6BCb3B,OAAe,46T,yhBCAf,iBAEA,WACA,WASA,gBAAqBA,QAiBpB,YAAaC,GACZ,GAde,KAAAC,SAA+B,IAAInE,KAc7CkE,EAAQ,MAAM3J,MAAM,MACzB/C,KAAK0M,OAASA,EAGF,WAAWE,EAAkBC,G,yCAEzC,OADA7M,KAAK8M,eAAiB,GACf9M,KAAK+M,YAAc/M,KAAKgN,mBAAmBJ,EAAUC,MAG/C,mBAAmBD,EAAkBC,G,yCAElD,GAAI7M,KAAK2M,SAAS5G,IAAI6G,GACrB,OAAO5M,KAAK2M,SAAS1L,IAAI2L,GAG1B,IAAIK,EAAqBjN,KAAK8M,eAAeI,QAAQN,GAGrD,GAAIK,GAAsB,EAAG,CAC5B,GAAIA,GAAsBjN,KAAK8M,eAAe5J,OAAS,EACtD,MAAMH,MAAM,uBAAuB6J,MAGpC,IAAIO,EAAQnN,KAAK8M,eAAeM,MAAMH,GAAoB9D,OAAOyD,GAEjE,MAAM7J,MAAM,6BAA6BoK,EAAMpJ,KAAK,gEAIrD/D,KAAK8M,eAAe3E,KAAKyE,GAEzB,IAAI,QAACS,EAAO,KAAE3J,SAAcmJ,EAAOD,GAE/BG,EAAQ,IAAI,UAAMM,EAAS,MAC3BzF,EAAS5H,KAAK0M,OAAOY,MAAM5J,GAK/B,SAHM1D,KAAKuN,KAAK3F,EAAQmF,EAAOF,GAG3B7M,KAAK8M,eAAeU,OAASZ,EAChC,MAAM7J,MAAM,qBAKb,OADA/C,KAAK2M,SAASlE,IAAImE,EAAUG,GACrBA,KAGK,KAAK9D,EAA6B8D,EAAa/M,KAAK+M,MAAOF,G,yCACvE,IAAK,IAAIzM,EAAI,EAAGA,EAAI6I,EAAM/F,OAAQ9C,IAAK,CACtC,IAAIqN,EAAOxE,EAAM7I,GAEjB,OAAQqN,EAAKzH,OACZ,IAAK,SACJ,IAAI0H,QAAe1N,KAAKgN,mBAAmBS,EAAKb,SAAUC,GAC1DE,EAAMY,UAAUlF,IAAIgF,EAAKb,SAAUc,GACnC,MACD,IAAK,UACJ,IAAIzI,EAAO,UAAaA,KAAKwI,EAAMV,GAEnC,GAAIA,EAAMa,QAAQ3I,EAAKtE,MACtB,MAAMoM,EAAMjK,MAAM,QAAQmC,EAAKtE,kCAGhCoM,EAAMc,QAAQ5I,GACd,MACD,IAAK,OACJ,IAAI6C,EAAW,UAAaA,SAAS2F,EAAMV,GAE3C,GAAIA,EAAMe,YAAYhG,EAASnH,MAC9B,MAAMoM,EAAMjK,MAAM,cAAcgF,EAASnH,kCAG1CoM,EAAMgB,YAAYjG,GAClB,MACD,IAAK,QACJ,IAAIQ,EAAM,UAAaA,IAAImF,EAAMV,GAEjC,GAAIA,EAAMe,YAAYxF,EAAI3H,MACzB,MAAMoM,EAAMjK,MAAM,cAAcwF,EAAI3H,kCAGrCoM,EAAMiB,OAAO1F,GACb,MACD,IAAK,YACJ,IAAI+C,EAAS,UAAaA,OAAOoC,EAAMV,EAAO,MAE9C,GAAIA,EAAMkB,UAAU5C,EAAO1K,MAC1B,MAAMoM,EAAMjK,MAAM,UAAUuI,EAAO1K,kCAGpCoM,EAAMmB,UAAU7C,GAChB,MACD,QACC,MAAMtI,MAAM,qBAAsB0K,EAAazH,YAK5C,SAASyH,GACf,IAAIV,EAAQ,IAAI,UAAM,SAAU/M,KAAK+M,OAErC,OAAQU,EAAKzH,OACZ,IAAK,UACJ,OAAO,UAAaf,KAAKwI,EAAMV,GAChC,IAAK,OACJ,OAAO,UAAajF,SAAS2F,EAAMV,GACpC,IAAK,QACJ,OAAO,UAAazE,IAAImF,EAAMV,GAC/B,IAAK,YACL,IAAK,aACJ,OAAO,UAAa1B,OAAOoC,EAAMV,EAAO,MACzC,IAAK,MACJ,OAAO,UAAaoB,IAAIV,EAAMV,EAAO,MACtC,IAAK,YACJ,OAAO,UAAaqB,UAAUX,EAAMV,EAAO,MAC5C,IAAK,aACJ,OAAO,UAAasB,WAAWZ,EAAMV,EAAO,MAC7C,IAAK,MACJ,OAAO,UAAauB,QAAQb,EAAMV,GACnC,QACC,MAAMhK,MAAM,qBAAsB0K,EAAazH,QAI3C,iBAAiBrF,EAAc4N,GACrC,OAAO,UAActN,IAAIjB,KAAK+M,MAAOpM,EAAM4N,M,kKCvJ7C,iBACA,UAGA,UAEA,WACA,UACA,WACA,WACA,UACA,WACA,UACA,WAIA,SAASC,gBAAgBlJ,GACxB,GAAiB,QAAbA,EAAIU,MACP,MAAMjD,MAAM,oBAEb,OAAKuC,EAAImJ,MACF,IAAMnJ,EAAIqB,KAAKC,IAAI4H,iBAAiBzK,KAAK,MAAQ,OACpDyK,gBAAgBlJ,EAAI0B,IAAM,IAFN1B,EAAoB3E,KAY7C,SAAS+N,mBAAmBpJ,GAC3B,GAAiB,QAAbA,EAAIU,MACP,MAAMjD,MAAM,oBAEb,GAAKuC,EAAImJ,MAOF,CACN,IAAKnJ,EAAIqB,OAASrB,EAAI0B,GACrB,MAAMjE,MAAM,oBAEb,OAAOuC,EAAIqB,KAAKC,IAAI8H,oBAAoBvF,OACvC,CAACuF,mBAAmBpJ,EAAI0B,MATzB,KAFA1B,EAAMA,GAEG3E,KACR,MAAMoC,MAAM,oBAEb,OAAOuC,EAAI3E,KAWb,SAASgO,eAAerJ,GACvB,OAAQA,EAAIL,MACX,IAAK,IACJ,MAAO,IAAIK,EAAI3E,KAChB,IAAK,IAEL,IAAK,SACJ,MAAO,GAAG2E,EAAI3E,KACf,QACC,MAAMoC,MAAM,gBAAgBuC,EAAIL,OAInC,MAAqB2J,GACb,YAAYtJ,EAAoBuJ,GACtC,GAAiB,WAAbvJ,EAAIU,MACP,MAAMjD,MAAM,oBAEb,IAAIgK,EAAe8B,EAAYC,OAAO,OAAQxJ,EAAI3E,KAAM2E,EAAIyJ,UAExDzI,EAAqBhB,EAAIgB,OAASyG,EAAMiC,QAAQN,mBAAmBpJ,EAAIgB,SAAW,KAElF3F,EAAe2E,EAAI3E,KACnB8B,EAAc6C,EAAI7C,IAClBgE,EAAgBnB,EAAImB,KAExB,GAAIA,GAAQH,EACX,MAAMyG,EAAMjK,MAAM,oCAGnB,OAAIwD,EACI,IAAI,UAAW,CACrB3F,OACA8B,MACAgE,OACAH,WAIK,IAAI,UAAW,CACrBI,YAAY,EACZ/F,OACA8B,MACAgE,SAIK,gBAAgBnB,EAA6BuJ,GACnD,IAAK,CAAC,OAAQ,OAAOI,SAAS3J,EAAIU,OACjC,MAAMjD,MAAM,oBAGb,IAAIgK,EAAQ8B,EAAYC,OAAO,WAAYxJ,EAAI3E,KAAM2E,EAAIyJ,UAEzD,GAAiB,OAAbzJ,EAAIU,MAAgB,CACvB,GAAgB,UAAZV,EAAIL,KACP,MAAM8H,EAAMjK,MAAM,iBAAiBwC,EAAIL,oBAGxC,IAAK8H,EAAMe,YAAYxI,EAAI3E,MAC1B,MAAMoM,EAAMjK,MAAM,wBAAwB6L,eAAerJ,IAC1D,OAAOyH,EAAMmC,YAAY5J,EAAI3E,MAG9B,IAAKoM,EAAMa,QAAQc,mBAAmBpJ,EAAIL,OACzC,MAAM8H,EAAMjK,MAAM,QAAQ0L,gBAAgBlJ,EAAIL,wBAE/C,IAAIA,EAAO8H,EAAMiC,QAAQN,mBAAmBpJ,EAAIL,OAE5CkB,EAAOb,EAAIa,KAAOyI,GAAGO,MAAM7J,EAAIa,KAAM4G,GAAS,KAElD,OAAIzH,EAAI8J,QACA,IAAI,UAAU,CACpB3M,IAAK6C,EAAI7C,IACTC,IAAK4C,EAAI5C,IACTuC,OACAtE,KAAM2E,EAAI3E,KACVyH,SAAU9C,EAAI8C,UAAY,MACxB2E,EAAMvK,OAGH,IAAI,UAAS,CACnBC,IAAK6C,EAAI7C,IACTC,IAAK4C,EAAI5C,IACT+E,SAAUnC,EAAImC,OACdxC,OACAtE,KAAM2E,EAAI3E,KACVwF,KAAMA,GAAQ,MACZ4G,EAAMvK,OAGH,WAAW8C,EAAkCuJ,GACnD,GAAiB,SAAbvJ,EAAIU,OAAiC,WAAbV,EAAIU,MAC/B,MAAMjD,MAAM,oBAEb,IAAIgK,EAAQ8B,EAAYC,OAAO,MAAoB,SAAbxJ,EAAIU,MAAmBV,EAAI3E,KAAO,cAAe2E,EAAIyJ,UAEvFtM,EAAM,KACTC,EAAM,KACN+E,GAAS,EACTC,EAAsB,KACtB/G,EAAO,KACPwF,EAAO,KAER,GAAiB,SAAbb,EAAIU,MAAkB,CAKzB,GAJAvD,EAAM6C,EAAI7C,IACVC,EAAM4C,EAAI5C,IACV+E,EAASnC,EAAImC,QAERsF,EAAMa,QAAQc,mBAAmBpJ,EAAIoC,UACzC,MAAMqF,EAAMjK,MAAM,QAAQ0L,gBAAgBlJ,EAAIoC,2BAG/CA,EAAUqF,EAAMiC,QAAQN,mBAAmBpJ,EAAIoC,UAC/C/G,EAAO2E,EAAI3E,KAGZ,IAAIgH,EAASrC,EAAIqC,OAAOf,KAAIyI,IAC3B,IAAIC,EAAKV,GAAG9G,SAASuH,EAAKtC,GAE1B,GAAIA,EAAMwC,eAAeD,EAAG3O,MAC3B,MAAMoM,EAAMjK,MAAM,aAAawM,EAAG3O,kCAEnC,KAAM2O,aAAc,WACnB,MAAMvM,MAAM,qBAIb,OADAgK,EAAMgB,YAAYuB,GACXA,KAOR,OAJIhK,EAAIa,OACPA,EAAOyI,GAAGO,MAAM7J,EAAIa,KAAM4G,IAGpB,IAAI,UAAU,CAACvF,YAAa,GAAIC,SAAQC,UAAS/G,OAAMgH,SAAQxB,OAAM1D,MAAKC,OAAMqK,EAAMvK,OAGvF,eAAe8C,EAAoBuJ,GACzC,GAAiB,WAAbvJ,EAAIU,MACP,MAAMjD,MAAM,oBAEb,IAAIgK,EAAQ8B,EAAYC,OAAO,UAAW,SAAUxJ,EAAI+F,OAAS/F,EAAI+F,OAAO1K,KAAO,KAAM2E,EAAIyJ,UAEzFzG,EAAMsG,GAAGO,MAAM7J,EAAI+F,OAAQ0B,GAE3BvI,EAAOc,EAAId,KAAKoC,KAAI+D,GAChBiE,GAAGO,MAAMxE,EAAKoC,KAGtB,OAAO,IAAI,UAAQ,CAACzE,MAAK9D,QAAOuI,EAAMvK,OAGhC,gBAAgB8C,EAAqBuJ,EAAoBtJ,GAC/D,IAAK,CAAC,MAAO,YAAa,aAAc,aAAc,MAAO,QAAQ0J,SAAS3J,EAAIU,OACjF,MAAMjD,MAAM,oBAIb,IAAIgK,EAAQ8B,EAEZ,OAAQvJ,EAAIU,OACX,IAAK,MACJ,OAAO4I,GAAGT,IAAI7I,EAAKyH,EAAOxH,GAC3B,IAAK,YACJ,OAAOqJ,GAAGR,UAAU9I,EAAKyH,EAAOxH,GACjC,IAAK,aACJ,OAAOqJ,GAAGP,WAAW/I,EAAKyH,EAAOxH,GAClC,IAAK,aACJ,OAAOqJ,GAAGvD,OAAO/F,EAAKyH,EAAOxH,GAC9B,IAAK,MACJ,OAAOqJ,GAAGN,QAAQhJ,EAAKyH,GACxB,IAAK,OACJ,OAAO6B,GAAGY,KAAKlK,EAAKyH,EAAOxH,GAC5B,QACC,MAAMxC,MAAM,QAIR,aAAauC,EAAkBuJ,GACrC,IAAK,CAAC,UAAW,UAAW,OAAOI,SAAS3J,EAAIU,OAE/C,MADA7C,QAAQC,IAAIkC,GACNvC,MAAM,oBAIb,IAAIgK,EAAQ8B,EAEZ,OAAQvJ,EAAIU,OACX,IAAK,UACJ,OAAO4I,GAAGa,QAAQnK,EAAKyH,GACxB,IAAK,UACJ,OAAO6B,GAAGtG,IAAIhD,EAAKyH,GACpB,IAAK,MACJ,OAAO6B,GAAG9G,SAASxC,EAAKyH,GACzB,QACC,MAAMhK,MAAM,QAIR,eAAeuC,EAAgBuJ,GACrC,GAAiB,OAAbvJ,EAAIU,MACP,MAAMjD,MAAM,oBAGb,IAAIgK,EAAQ8B,EAEZ,OAAQvJ,EAAIL,MACX,IAAK,IACJ,GAAIK,EAAI3E,KAAKgD,MAAM,aAAc,CAChC,IAAI+L,EAASC,OAAOrK,EAAI3E,KAAKyM,MAAM,IAAM,EACzC,GAAIsC,GAAU3C,EAAMpH,WAAWzC,OAC9B,MAAM6J,EAAMjK,MAAM,eAAe4M,EAAS,eAG3C,OAAO3C,EAAMpH,WAAW+J,GAGzB,MAAM3C,EAAMjK,MAAM,0BAA0B6L,eAAerJ,IAC5D,IAAK,IACJ,IAAKyH,EAAM6C,KAAKtK,EAAI3E,MACnB,MAAMoM,EAAMjK,MAAS6L,eAAerJ,GAAlB,mBAGnB,OAAOyH,EAAM8C,KAAKvK,EAAI3E,MACvB,IAAK,SACJ,IAAKoM,EAAMkB,UAAU3I,EAAI3E,MACxB,MAAMoM,EAAMjK,MAAM,UAAU6L,eAAerJ,qBAE5C,OAAOyH,EAAM+C,UAAUxK,EAAI3E,MAC5B,QACC,MAAMoM,EAAMjK,MAAM,gBAAgBwC,EAAIL,OAIlC,YAAYK,EAAiBuJ,EAAoBtJ,GACvD,GAAiB,QAAbD,EAAIU,MACP,MAAMjD,MAAM,oBAGb,IAAIgK,EAAQ8B,EAAYC,OAAO,OAAQ,KAAMxJ,EAAIyJ,UAE7CO,EAAKV,GAAG9G,SAASxC,EAAIkK,KAAMzC,GAE/B,GAAIA,EAAMwC,eAAeD,EAAG3O,MAC3B,MAAMoM,EAAMjK,MAAM,aAAawM,EAAG3O,kCAEnC,KAAM2O,aAAc,WACnB,MAAMvM,MAAM,qBAGbgK,EAAMgB,YAAYuB,GAElB,IAAIxG,EAAQxD,EAAIwD,MAAMlC,KAAIoC,IACzB,IAAI+G,EAAKnB,GAAGoB,KAAKhH,EAAG+D,EAAOxH,GAE3B,GAAIwH,EAAMkD,QAAQF,EAAGpP,MACpB,MAAMoM,EAAMjK,MAASkG,EAAErI,KAAL,8BAGnB,OAAOoM,EAAMmD,KAAKH,MAGf5J,EAAOyI,GAAGuB,SAAS7K,EAAIa,KAAM4G,EAAOxH,GAExC,OAAO,IAAI,UAAK,CACfuC,SAAUwH,EACVxG,QACA3C,QACE4G,EAAMvK,OAGH,WAAW8C,EAAgBuJ,EAAoBtJ,GACrD,GAAiB,OAAbD,EAAIU,MACP,MAAMjD,MAAM,oBAEb,IAAIgK,EAAQ8B,EAAYC,OAAO,MAAO,KAAMxJ,EAAIyJ,UAE5CrD,EAAOpG,EAAIoG,KAAK9E,KAAI/F,GAAK+N,GAAGuB,SAAStP,EAAGkM,EAAOxH,KAE/C6K,EAAarD,EAAM+B,OAAO,YAAa,KAAMxJ,EAAIqG,MAAMoD,UAC3DrD,EAAK3C,SAAQ1I,GAAK+P,EAAWzK,WAAWwC,KAAK9H,KAE7C,IAAIyI,EAAQxD,EAAIwD,MAAMlC,KAAIoC,IACzB,IAAI+G,EAAKnB,GAAGoB,KAAKhH,EAAGoH,EAAY7K,GAEhC,GAAI6K,EAAWH,QAAQF,EAAGpP,MACzB,MAAMyP,EAAWtN,MAASkG,EAAErI,KAAL,8BAGxB,OAAOyP,EAAWF,KAAKH,MAGpBpE,EAAQiD,GAAGuB,SAAS7K,EAAIqG,MAAOyE,EAAY7K,GAE/C,OAAO,IAAI,UAAI,CAACmG,OAAM5C,QAAO6C,SAAQoB,EAAMvK,OAGrC,YAAY8C,EAAiBuJ,EAAoBtJ,GACvD,GAAiB,QAAbD,EAAIU,MACP,MAAMjD,MAAM,oBAEb,IAAIgK,EAAQ8B,EAAYC,OAAO,OAAQxJ,EAAI3E,KAAM2E,EAAIyJ,UAEjD5I,EAAOyI,GAAGuB,SAAS7K,EAAIa,KAAM4G,EAAOxH,GAExC,OAAO,IAAI,UAAU,CAAC5E,KAAM2E,EAAI3E,KAAMwF,QAAO4G,EAAMvK,OAG7C,cAAc8C,EAAyCuJ,EAAoBwB,GACjF,GAAiB,aAAb/K,EAAIU,OAAqC,cAAbV,EAAIU,MACnC,MAAMjD,MAAM,oBAEb,IAAIpC,EAAoB,aAAb2E,EAAIU,MAAuBV,EAAI3E,KAAO,KAE7CoM,EAAQ8B,EAAYC,OAAO,SAAUnO,EAAM2E,EAAIyJ,UAE/CjF,EAAyB,SAC5BrH,EAAc,KACd+E,EAAwB,GACxBjC,EAAU8K,EAEX,GAAiB,aAAb/K,EAAIU,MAAsB,CAK7B,GAJA8D,EAAaxE,EAAIwE,WACjBrH,EAAM6C,EAAI7C,IACV+E,EAAclC,EAAIkC,YAEd6I,EAEH,MADAlN,QAAQC,IAAIiN,GACNtN,MAAM,OAGb,IAAIuN,EAAkChL,EAAIgL,MAAM1J,KAAIjG,IACnD,IAAKoM,EAAMe,YAAYnN,GACtB,MAAMoM,EAAMjK,MAAM,YAAYnC,oBAG/B,IAAI2H,EAAMyE,EAAMmC,YAAYvO,GAE5B,IAAK2H,EAAInC,KACR,MAAM4G,EAAMjK,MAASnC,EAAH,mBAGnB,OAAO2H,KAGR/C,EAAU,IAAI,UAAiB+K,GAGhC,IAAI3I,EAASrC,EAAIqC,OAAOf,KAAIyI,IAC3B,IAAIC,EAAKV,GAAG9G,SAASuH,EAAKtC,GAE1B,GAAIA,EAAMwC,eAAeD,EAAG3O,MAC3B,MAAMoM,EAAMjK,MAAM,aAAawM,EAAG3O,kCAEnC,KAAM2O,aAAc,WACnB,MAAMvM,MAAM,qBAIb,OADAgK,EAAMgB,YAAYuB,GACXA,KAGJxG,EAAQxD,EAAIwD,MAAMlC,KAAIoC,IACzB,IAAI+G,EAAKnB,GAAGoB,KAAKhH,EAAG+D,EAAOxH,GAE3B,GAAIwH,EAAMkD,QAAQF,EAAGpP,MACpB,MAAMoM,EAAMjK,MAASkG,EAAErI,KAAL,8BAGnB,OAAOoM,EAAMmD,KAAKH,MAGf5J,EAAOyI,GAAGuB,SAAS7K,EAAIa,KAAM4G,EAAOxH,GAExC,OAAO,IAAI,UAAO,CAAC9C,MAAKC,IAAK,KAAM8E,cAAasC,aAAYnJ,OAAMgH,SAAQpC,UAASuD,QAAO3C,QAAO4G,EAAMvK,OAGjG,kBAAkB8C,EAAuBuJ,EAAoBtJ,GACnE,GAAiB,cAAbD,EAAIU,MACP,MAAMjD,MAAM,oBAEb,IAAIgK,EAAQ8B,EAAYC,OAAO,aAAc,SAAUxJ,EAAI+F,OAAS/F,EAAI+F,OAAO1K,KAAO,KAAM2E,EAAIyJ,UAE5FzG,EAAMsG,GAAGuB,SAAS7K,EAAI+F,OAAQ0B,EAAOxH,GAErCf,EAAOc,EAAId,KAAKoC,KAAItB,GAChBsJ,GAAGO,MAAM7J,EAAKyH,KAGtB,OAAO,IAAI,UAAQ,CAClBzE,MACA9D,QACEuI,EAAMvK,OAGH,iBAAiB8C,EAAsBuJ,EAAoBtJ,GACjE,GAAiB,aAAbD,EAAIU,MACP,MAAMjD,MAAM,oBAEb,IAAKwC,EACJ,MAAMxC,MAAM,OAGb,IAAIgK,EAAQ8B,EAAYC,OAAO,YAAa,SAAUxJ,EAAIiL,QAAUjL,EAAIiL,QAAQ5P,KAAO,KAAM2E,EAAIyJ,UAE7FwB,EAAU3B,GAAGuB,SAAS7K,EAAIiL,QAASxD,EAAOxH,GAE1Cf,EAAQc,EAAId,KAEbc,EAAId,KAAKoC,KAAI4J,GACPA,GAAK5B,GAAGO,MAAMqB,EAAGzD,KAFvB,KAKC0D,EAAWnL,EAAImL,SAAS7J,KAAItB,GACxBsJ,GAAGuB,SAAS7K,EAAKyH,EAAOxH,KAG5BmL,EAAKpL,EAAIoL,IAAM9B,GAAGuB,SAAS7K,EAAIoL,GAAI3D,EAAOxH,GAE9C,OAAO,IAAI,UAAU,CACpBgL,UACA/L,OACAiM,WACAC,MACEnL,EAASwH,EAAMvK,QA5ZpB,c,8ECrEA,gBAAqBmO,iBAIpB,YAAaC,GACZ5Q,KAAK4Q,UAAYA,GAAa,GAGxB,OAAOtI,GACb,OAAOtI,KAAK4Q,UAAU3B,SAAS3G,M,2rBCPjC,gBACA,UACA,UACA,UACA,QACA,UAEA,WACA,UASA,MAAqBuI,kBAAkB,UAOtC,aAAa,QAACN,EAAO,KAAE/L,EAAI,SAAEiM,EAAQ,GAAEC,GAA4BnL,EAA2B/C,GAC7F,GAAIgC,EAAM,CACT,IACCiG,EADkB8F,EAAQtL,KAAKiC,UACLP,KAC1B+D,EAAWlG,EAAKoC,KAAIG,GAAKA,GAAKA,EAAE9B,OAEjC,GAAIwF,EAAWvH,QAAUwH,EAASxH,OACjC,MAAM,UAAKJ,MAAM,yCAAyC2H,EAAWvH,YAAYwH,EAASxH,SAAUV,GAErG,IAAK,IAAIpC,EAAI,EAAGA,EAAIqK,EAAWvH,OAAQ9C,IACtC,GAAIsK,EAAStK,KAAOqK,EAAWrK,GAAGoF,OAAOkF,EAAStK,IACjD,MAAM,UAAK0C,MAAM,aAAa1C,EAAI,yCAAyCqK,EAAWrK,QAAQsK,EAAStK,KAAMoC,GAKhH,GAAI+N,aAAmB,UAAK,CAC3BA,EAAQ5I,OAAOoB,SAAQ,CAAC3G,EAAGhC,KAC1B,KAAMoE,GAAQA,EAAKpE,IAAQgC,EAAEgG,UAC5B,MAAM,UAAKtF,MAAM,aAAa1C,EAAI,yBAA0BoC,MAI9D,IAAIsO,EAASP,EAAQ5I,OAAOf,KAAI,CAACxE,EAAGhC,KACnC,GAAIoE,GAAQA,EAAKpE,GAAI,OAAOoE,EAAKpE,GAEjC,IAAI+N,EAAOoC,EAAgBpK,KAAKwD,YAAW,GAE3C,OAAOkH,UAAUE,MAChB3O,EAAEgG,SACF+F,EAAIzC,KAAM+E,EACVtC,EAAIxC,MAAO+E,EACXnL,EAAS/C,MAIX+N,EAAU,IAAI,UAAQ,CACrBjI,IAAKiI,EACL/L,KAAMsM,GACJtO,QACG,GAAIgC,EACV,MAAM,UAAK1B,MAAM,oBAAsBN,GAGxC,KAAM+N,EAAQtL,gBAAgB,WAAYsL,EAAQtL,KAAKoC,UACtD,MAAM,UAAKvE,MAAM,2BAA4BN,GAE9C,KAAMiO,aAAoBxN,QACrBwN,EAAS7J,KAAIG,GAAKA,aAAa,YAAMD,MAAKC,IAAMA,IACpD,MAAM,UAAKjE,MAAM,mBAAoBN,GAEtC,IAAIiI,EAAa8F,EAAQtL,KAAKyG,KAC7BsF,EAAeP,EAAS7J,KAAIG,GAAKA,EAAE9B,OAEpC,GAAIwF,EAAWvH,QAAU8N,EAAa9N,OACrC,MAAM,UAAKJ,MAAM,yCAAyC2H,EAAWvH,YAAY8N,EAAa9N,SAAUV,GAEzG,IAAK,IAAIpC,EAAI,EAAGA,EAAIqK,EAAWvH,OAAQ9C,IACtC,IAAKqK,EAAWrK,GAAGoF,OAAOwL,EAAa5Q,IACtC,MAAM,UAAK0C,MAAM,mCAAmC2H,EAAWrK,QAAQ4Q,EAAa5Q,KAAMoC,GAG5F0C,MAAM1C,EAAO,KAAM,KAAM+N,EAAQtL,KAAK0G,OAEtC3L,KAAKuQ,QAAUA,EACfvQ,KAAKyQ,SAAWA,EAEhB,IAAItC,EAAMoC,EAAQ5G,YAAW,GAE7B,KAAMwE,aAAe,WACpB,MAAM,UAAKrL,MAAM,mBAAoBN,GAGtC,IAAIyO,EAAmBR,EAAS7J,KAAI+D,GAC5BA,EAAIhB,YAAW,KAGvB,IAAK,IAAIvJ,EAAI,EAAGA,EAAI+N,EAAIzC,KAAKxI,OAAQ9C,IACpC,IAAK+N,EAAIzC,KAAKtL,GAAGoF,OAAOyL,EAAiB7Q,GAAImF,GAC5C,MAAM,UAAKzC,MAAM,QAAQ1C,EAAI,2CAG/B+N,EAAIzC,KAAKtL,GAAGuJ,YAAW,6CAIvB8G,EAASrQ,GAAGuJ,YAAW,uBACNnH,GAIjB,GAAIkO,EAAI,CACP,IAAKvC,EAAIxC,MAAMnG,OAAOkL,EAAInL,GACzB,MAAM,UAAKzC,MAAM,6CAGnBqL,EAAIxC,MAAMhC,YAAW,6DAIrB+G,EAAG/G,YAAW,uBACGnH,GAGhBxC,KAAKkR,QAAUR,OAEf1Q,KAAKkR,QAAU/C,EAAIxC,MAIX,iBAAiBhG,GAC1B,OAAO3F,KAAKuQ,QAAQxI,SAASpC,IACzB3F,KAAKyQ,SAAStF,OAAM9K,GAAKA,EAAE0H,SAASpC,KAGlC,WAAWiB,GACjB,OAAO5G,KAAKkR,QAAQxI,WAAW9B,GAGtB,mBAAmBzB,GAC5B,OAAOnF,KAAKkR,QAAQvH,WAAWxE,GAGtB,oBACT,OAAO,EAAAJ,eAAe6E,KAGb,eAAetE,EAAeC,GACvC,OAAOvF,KAAKkR,QAAQ1L,OAAOF,EAAKC,GAG1B,aACL6C,EACAsD,EAAkB+E,EAClB9E,EAAiB+E,EACjBnL,EAA2B/C,GAE5B,GAAuB,GAAnB4F,EAASlF,OAAa,MAAM,UAAKJ,MAAM,MAAON,GAElD,IAAI2O,EAAqBC,EAEzB,GAAmB,KAAfhJ,EAAS,GAAW,CACvB,IAAKsI,EACJ,MAAM,UAAK5N,MAAM,uBAAuBsF,kCAA0C5F,GAGnF2O,EAAYxF,EACZyF,EAAWV,MACL,CACN,IAAI7O,EAAI8N,OAAOvH,EAAS,IAExB,KAAM,GAAKvG,GAAKA,GAAK4O,EAASvN,QAC7B,MAAM,UAAKJ,MAAM,uBAAuBsF,mCAA2C5F,GAEpF2O,EAAYzF,EAAK7J,EAAI,GACrBuP,EAAWX,EAAS5O,EAAI,GAGzB,OAAO,SAAUwP,QACfC,EACAH,EAAqBC,GAItB,GAFAA,EAAWA,EAASzH,YAAW,GAE3BvB,EAASlF,QAAUoO,EAAK,OAAOF,EAEnC,GAAI,UAAUG,KAAKnJ,EAASkJ,IAAO,CAClC,IAAIzP,EAAI8N,OAAOvH,EAASkJ,IAExB,GAAIH,aAAqB,WAAOC,aAAoB,UAAK,CACxD,GAAID,EAAUzF,KAAKxI,QAAUkO,EAAS1F,KAAKxI,OAC1C,MAAM,UAAKJ,MAAM,uBAAuBsF,gCAAwC5F,GAGjF,KAAM,GAAKX,GAAKA,GAAKuP,EAAS1F,KAAKxI,QAClC,MAAM,UAAKJ,MAAM,uBAAuBsF,mCAA2C5F,GAGpF,OAAO6O,QAAQC,EAAM,EAAGH,EAAUzF,KAAK7J,EAAI,GAAIuP,EAAS1F,KAAK7J,EAAI,IAGlE,OAAa,CACZ,KAAOuP,aAAoB,WAAYA,EAASjL,MAC/CiL,EAAWA,EAASjL,KAGrB,KAAMgL,aAAqB,WAAWC,aAAoB,WACzD,MAAM,UAAKtO,MAAM,uBAAuBsF,EAAY5F,GAGrD,GAAI2O,EAAU7I,IAAI9C,OAAO4L,EAAS9I,IAAK/C,GACtC,MAGD,IAAK6L,EAASvG,aAAatF,GAC1B,MAAM,UAAKzC,MAAM,uBAAuBsF,EAAY5F,GAGrD4O,EAAWA,EAASrG,WAAWxF,GAGhC,KAAM,GAAK1D,GAAKA,GAAKuP,EAAS5M,KAAKtB,QAClC,MAAM,UAAKJ,MAAM,uBAAuBsF,EAAY5F,GAErD,OAAO6O,QAAQC,EAAM,EAAGH,EAAU3M,KAAK3C,EAAI,GAAIuP,EAAS5M,KAAK3C,EAAI,IAC3D,GAAqB,KAAjBuG,EAASkJ,GAAa,CAChC,GAAIH,aAAqB,WAAOC,aAAoB,UACnD,OAAOC,QAAQC,EAAM,EAAGH,EAAUxF,MAAOyF,EAASzF,OAGnD,MAAM,UAAK7I,MAAM,uBAAuBsF,EAAY5F,GAGrD,MAAM,UAAKM,MAAM,uBAAuBsF,EAAY5F,GAvD9C,CAwDJ,EAAG2O,EAAWC,GAGR,iBACRvL,EACAC,EACAxD,GAED,IAiBMD,EAjBFmP,EAA4B,GAC5BC,EAA6CzR,KAAKyQ,SAAS7J,KAAIvG,IAClE,GAAIwF,EAAUE,IAAI1F,GAAI,OAAOwF,EAAU5E,IAAIZ,GAC3C,GAAIyF,EAAKC,IAAI1F,GAAI,OAAOyF,EAAK7E,IAAIZ,GAEjC,IAAI4I,EAAQ5I,EAAE6I,SAASrD,EAAWC,EAAMxD,GAExC,OADAkP,EAAeA,EAAarI,OAAOF,GAC5BA,EAAMA,EAAM/F,OAAS,GAAGZ,OAG5BkC,EAAgB,KAChBkN,EAA4B,GAC5BC,EAAa9L,EAAU5E,IAAIjB,KAAKuQ,UAChCzK,EAAK7E,IAAIjB,KAAKuQ,aACbvQ,KAAKuQ,mBAAmB,WAAWzK,EAAKC,IAAI/F,KAAKuQ,QAAQjI,QACzD9D,EAAOxE,KAAKuQ,QAAQ/L,KAAMsB,EAAK7E,IAAIjB,KAAKuQ,QAAQjI,SAE/CjG,EACyDrC,KAAKuQ,mBAD5C,WAAOlO,EAAE1B,MAC3B0B,aAAa,WAAW,EAAAkI,WAAWlI,EAAEiG,MAAQjG,EAAEiG,IAAI3H,KACrDX,KAAKuQ,SACJmB,EAAe1R,KAAKuQ,QAAQrH,SAASrD,EAAWC,EAAMxD,IAAMoP,EAAaxO,OAAO,GAAGZ,KAExF,MAAO,IACHkP,KACAE,EACH,CACC1L,MAAO,IACP1D,IAAKA,EAAI2D,OACTsK,QAASoB,EACTnN,OACAiM,SAAUgB,EACVP,QAASlR,KAAKkR,UAKV,iBAAiB9J,EAAgB3H,GACvC,IAAIgR,EAAgBzQ,KAAKyQ,SAAS7J,KAAI+D,GAC9BA,EAAI/H,iBAAiBwE,EAAS,KAGtC,OAAIqJ,EAAS1M,KAAK,IAAIb,QAAU,IAK/BuN,GAJAA,EAAWzQ,KAAKyQ,SAAS7J,KAAI+D,GACrBA,EAAI/H,iBAAiBwE,MAGTrD,KAAK,MAElB,CACH/D,KAAKuQ,QAAQ3N,iBAAiBwE,GAAjC,IACAqJ,EACA,KACC1M,KAAK,MAGP0M,EAAWA,EAAS1M,KAAK,MAAQ,KAAKoG,OAAO/C,EAAS,IAE/C,CACHpH,KAAKuQ,QAAQ3N,iBAAiBwE,GAAjC,IACA,KAAOqJ,EACP,KACC1M,KAAK,KAAO,KAAKoG,OAAO/C,KAIrB,YAAYpE,EAAmBvD,GACrC,MAAO,GAAGO,KAAKuQ,QAAQjJ,aAAY,MAAUtH,KAAKyQ,SAAS7J,KAAIG,GAAKA,EAAEO,YAAY,UAAKzC,cAAad,KAAK,UAvS3G,qB,kKChBA,gBAUA,MAAqB6N,aAAa,UAMjC,aAAY,SAAC9J,EAAQ,MAAEgB,EAAK,KAAE3C,GAAyB3D,GACtD0C,MAAM1C,EAAO,KAAM,KAAM2D,EAAKlB,MAE9BjF,KAAK8H,SAAWA,EAChB9H,KAAK8I,MAAQA,EACb9I,KAAKmG,KAAOA,EAGN,WAAWS,GACjB,GAAIA,EAAIb,IAAI/F,KAAK8H,UAChB,MAAM/E,MAAM,uBAIb,OAFA6D,EAAM,IAAI4B,IAAI5B,GAEP5G,KAAK2J,YAAW,GAAOjB,WAAW9B,GAGhC,mBAAmBzB,GAC5B,IAAIyB,EAAM,IAAI4B,IAGd,OAFA5B,EAAI6B,IAAIzI,KAAK8H,SAAU9H,KAAK8H,SAAS3B,MAE9BnG,KAAKmG,KAAKuC,WAAW9B,GAAK+C,WAAWxE,GAGnC,kBAAkBI,GAC3B,MAAM,IAAIxC,MAAM,2BAGP,eAAeuC,EAAeC,GACvC,MAAM,IAAIxC,MAAM,2BAGP,iBAAiB4C,GAC1B,OAAO3F,KAAKmG,KAAK4B,SAASpC,GAGjB,iBAAiBE,EAAkCC,EAAgDxD,EAAc7C,GAiB1H,OAfAqG,EAAO,IAAI0C,IAAI1C,GAeR,CAbc,CACpBE,MAAO,MACP1D,IAAKA,EAAI2D,OACT4L,IAAK7R,KAAK8H,aAGE9H,KAAK8I,MAAMlC,KAAIoC,IAC3B,IAAIC,EAAQD,EAAE7C,KAAK+C,SAASrD,EAAWC,EAAMxD,GACzC8G,EAAOH,EAAMA,EAAM/F,OAAS,GAAGZ,IAEnC,OADAwD,EAAK2C,IAAIO,EAAGI,GACLH,KACLoD,KAAK,MAKJrM,KAAKmG,KAAK+C,SAASrD,EAAWC,EAAMxD,IAIlC,iBAAiB8E,EAAgB3H,GACvC,MAAM,IAAIsD,MAAM,2BAGV,YAAYC,EAAmBvD,GACrC,MAAM,IAAIsD,MAAM,4BAvElB,gB,kKChBA,iBAEA,UAKA,gBAAqB+O,cACb,WAAW/E,EAAcpM,EAAc4N,GAC7C,IAAIwD,EAAU,WAId,IAAKhF,EAAMkB,UAAUtN,GACpB,MAAMoC,MAAM,OAGb,IAAIoD,EAAO4G,EAAM+C,UAAUnP,GAE3B,KAAMwF,aAAgB,WACrB,MAAMpD,MAAM,OAGb,SAASiP,YAAY1P,EAAsBoJ,EAAauG,EAAYC,EAAuBC,GAO1F,IANA,IAAIC,EAAU1G,EAAKxI,QAEf,IAACmP,GAAI,EAAK,IAAEC,GAAI,GAASH,GAAW,GAEpCI,EAAW7G,EAAK9E,KAAI,CAACG,EAAG3G,EAAGoS,IAAM,cAAcF,GAAOlS,GAAKoS,EAAEtP,OAAS,EAAI,MAAQ,UAAU6D,EAAEH,KAAIC,GAAK0H,EAAI1H,EAAEwD,mBAAkB,MAAQtG,KAAK,eAAcA,KAAK,IAE1J3D,EAAI,EAAGA,EAAIsL,EAAKxI,OAAQ9C,IAChC,KAAMsL,EAAKtL,GAAG8C,QAAQwI,EAAKtL,GAAGoN,MAE/B,MAAO,WAAWlL,SAAWiQ,QAAeF,EAAM,eAAiB,cAAcI,EAAML,MAAYH,SAAUC,aAAcjP,MAAQiP,EAAGtL,KAAIG,GAAK,OAAOA,WAAUhD,KAAK,IAAM,mBAAmBmO,gBAG/L,SAASQ,WAAWvM,EAA4CwM,GAC/D,MAAmB,iBAARxM,EAAyB,MAAMA,QACtCA,aAAgBlD,MAAc,MAAMkD,EAAK,YAAYA,EAAK,SAC3CoI,EAAfoE,EAAmBxM,EAAKwD,YAAW,GAAMrC,aAAY,GAAM,GAEpDnB,EAAKmB,aAAY,GAAM,IAGnC,IAAIsL,EAAOzM,EAAK+C,SAAS,IAAIV,IAAO,IAAIA,IAAO,IAAI,WAAW,GAE1DqK,EAA0BD,EAAK,GAAW/J,OAAOM,OAAQyJ,EAAK,GAAW3J,OAEzEwJ,EAAQ,SAAUpB,QAAQuB,GAC7B,OAAOE,KAAKC,OAAOH,EAAKhM,KAAItF,IAC3B,OAAQA,EAAE0E,OACT,IAAK,IACJ,OAAO8M,KAAKC,IACX1B,QAAQ/P,EAAEuH,QACVwI,QAAQ/P,EAAE2H,QACP,EACL,IAAK,IACJ,OAAO6J,KAAKC,IACX1B,QAAQ/P,EAAE6K,WACVkF,QAAQ/P,EAAE8K,aACP,EACL,QACC,OAAO,OAdC,CAiBTyG,GAECG,EAAO,2BAqGX,OApGAA,GAAQ,8BAA8BP,6CAEtCO,GAAQ,SAAUC,UAAUhK,EAAoByC,GAC/C,OAAOzC,EAAMrC,KAAI6G,IAChB,OAAQA,EAAKzH,OACZ,IAAK,IAGJ,IAAI2B,EAAS8F,EAAK9F,OAAOyF,QACzB,OAAO6F,UAAUxF,EAAK5E,OAAQ6C,EAAKvC,OAAO,CAACxB,KACxCsL,UAAUxF,EAAKxE,MAAOyC,EAAKvC,OAAO,CAACxB,KACvC,IAAK,IACJ,IAAIuL,EAAUxH,EAAKvC,OAAO,CAAC,KAEvB1E,EAAM,GAEV,GAA6B,GAAzBgJ,EAAKtB,UAAUjJ,OAGlBuB,GAAOuN,YACN,GAHe/O,MAAMyI,EAAKxI,OAAS,GAAGiQ,KAAK,IAG5B,GAAI,GAAI,CAACd,KAAK,EAAMC,KAAK,SAGzC7N,GAAOgJ,EAAKtB,UAAUvF,KAAI,CAAC6G,EAAMrN,EAAGoS,IAC5BR,YACNvE,EAAKnL,IACL4Q,EACAR,WAAWjF,EAAKtH,MAAM,GACtB,aACA,CAACkM,IAAKjS,GAAKoS,EAAEtP,OAAS,EAAGoP,KAAK,MAE7BvO,KAAK,IAQT,OALAU,GAAOwO,UACNxF,EAAKrB,WACL8G,GAIF,IAAK,IACJ,OAAOlB,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKtH,MAAM,GACtB,OAEF,IAAK,IACJ,MAAMpD,MAAM,MACb,IAAK,IACJ,OAAOiP,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKtH,MAAM,GACtB,CAAC4L,EAASW,WAAWjF,EAAKvH,OAE5B,IAAK,KACL,IAAK,MACJ,OAAO8L,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKtH,MAAM,GACtB,CAAC4L,EAASW,WAAWjF,EAAKtH,QAE5B,IAAK,KACJ,OAAO6L,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKtH,MAAM,GACtB,CAAC4L,EAAS,GAAGW,WAAWjF,EAAKpC,YAAYoC,EAAKjJ,KAAKoC,KAAI4L,GAAKE,WAAWF,KAAIzO,KAAK,WAElF,IAAK,IACJ,OAAOiO,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKyD,SAAS,GACzB,CAtIG,WAsII,GAAGwB,WAAWjF,EAAK8C,WAAW9C,EAAKjJ,KAAO,KAAOiJ,EAAKjJ,KAAKoC,KAAI4L,GAAKE,WAAWF,KAAIzO,KAAK,MAAQ,IAAM,OAAO0J,EAAKgD,SAAS7J,KAAI4L,GAAKE,WAAWF,KAAIzO,KAAK,WAEjK,IAAK,KACJ,OAAOiO,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKtH,MAAM,GACtB,iCAEF,IAAK,MACJ,OAAO6L,YACNvE,EAAKnL,IACLoJ,EACAgH,WAAWjF,EAAKoE,KAChB,cAEF,QACC,MAAM9O,MAAM,gBAAiB0K,EAAazH,WAE1CjC,KAAK,IA7FD,CA8FL8O,EAAW,IAEdG,GAAQ,c,8ECtKV,gBAAqBI,QAIpB,YAAazK,EAAc,GAC1B3I,KAAK6B,EAAI8G,EAGH,OACN,OAAO3I,KAAK6B,EAGN,OACN,QAAS7B,KAAK6B,K,kKCbhB,gBACA,UAEA,WACA,UAEA,UAEA,WAQA,MAAqBwR,MAiBpB,YAAahG,EAAiBiG,EAAe9Q,GAM5C,GAtBe,KAAAmL,UAAgC,IAAInF,IAEpC,KAAA+K,WAAsC,IAAI/K,IAC1C,KAAAgL,OAA4C,IAAIhL,IAChD,KAAAiL,UAAiC,IAAIjL,IACrC,KAAA1C,KAA+B,IAAI0C,IACnC,KAAA7C,WAAyB,GAWxC3F,KAAKqN,QAAUA,EAEfrN,KAAKsT,OAASA,EACdtT,KAAKP,KAAO6T,EAASA,EAAO7T,KAAOO,KAE/BwC,KAAWA,aAAiB,WAC/B,MAAMO,MAAM,oBAGb/C,KAAKwC,MAAQA,GAAS,IAAI,UAAW6K,GAErCrN,KAAK0T,SAAWJ,EAASA,EAAOI,SAAW,KAGrC,OAAOzO,EAActE,EAAcoO,GACzC,IAAI4E,EAAQ,IAAIN,MAAMrT,KAAKqN,QAASrN,KAAMA,KAAKwC,MAAMsM,OAAO,CAAC7J,OAAMtE,OAAMoO,cAEzE,OADA/O,KAAK2F,WAAWoD,SAAQ6K,GAAKD,EAAMhO,WAAWwC,KAAKyL,KAC5CD,EAGD,MAAM9Q,GACZ,OAAO7C,KAAKwC,MAAMM,MAAMD,GAUlB,WAAWlC,GACjB,GAAmB,iBAARA,EACV,OAAOX,KAAKuT,WAAWxN,IAAIpF,IACvB,IAAIX,KAAK2N,UAAUkG,UAAU/M,MAAKzE,GAAKA,EAAEyR,WAAWnT,KAGzD,KAAMA,aAAgBsC,OACrB,MAAMjD,KAAK8C,MAAM,yBAElB,GAAInC,EAAKuC,OAAS,EACjB,MAAMlD,KAAK8C,MAAM,wBAElB,OAAOnC,EAAKiG,KAAIG,GACR/G,KAAK8T,WAAW/M,KACrBoE,OAAMpE,GAAKA,IAUR,QAAQpG,GACd,GAAmB,iBAARA,EACV,OAAOX,KAAK8T,WAAWnT,MAChBX,KAAKsT,QAAUtT,KAAKsT,OAAO1F,QAAQjN,GAG3C,KAAMA,aAAgBsC,OACrB,MAAMjD,KAAK8C,MAAM,yBAElB,GAAInC,EAAKuC,OAAS,EACjB,MAAMlD,KAAK8C,MAAM,wBAElB,OAAOnC,EAAKiG,KAAIG,GACR/G,KAAK4N,QAAQ7G,KAClBoE,OAAMpE,GAAKA,IAGR,QAAQ9B,GACd,KAAMA,aAAgB,WACrB,MAAMjF,KAAK8C,MAAM,yBAElB,IAAKmC,EAAKtE,KACT,MAAMX,KAAK8C,MAAM,qBAElB,GAAI9C,KAAK8T,WAAW7O,EAAKtE,MACxB,MAAMX,KAAK8C,MAAM,QAAQmC,EAAKtE,kCAE/B,GAAIsE,EAAKuB,WAAY,CACpB,GAAIxG,KAAK0T,SACR,MAAM1T,KAAK8C,MAAM,+BAGlB,SAAUiR,UAAUhH,GACnBA,EAAM2G,SAAWzO,EACb8H,EAAMuG,QAAQS,UAAUhH,EAAMuG,QAFnC,CAGGtT,MAIJ,OADAA,KAAKuT,WAAW9K,IAAIxD,EAAKtE,KAAMsE,GACxBA,EAUD,QAAQtE,GACd,GAAmB,iBAARA,EAAkB,CAC5B,IAAKX,KAAK4N,QAAQjN,GACjB,MAAMX,KAAK8C,MAAM,QAAQnC,oBAE1B,OAAOX,KAAKuT,WAAWxN,IAAIpF,GACxBX,KAAKuT,WAAWtS,IAAIN,KACjBX,KAAKsT,QAAUtT,KAAKsT,OAAOtE,QAAQrO,IACpC,IAAIX,KAAK2N,UAAUkG,UAAUG,QAAO3R,GAC/BA,EAAEuL,QAAQjN,KACf,GAAGqO,QAAQrO,GAGjB,KAAMA,aAAgBsC,OACrB,MAAMjD,KAAK8C,MAAM,yBAElB,GAAInC,EAAKuC,OAAS,EACjB,MAAMlD,KAAK8C,MAAM,wBAElB,IAAI6D,EAAOhG,EAAKyM,MAAM,EAAGzM,EAAKuC,OAAS,GAAG0D,KAAIG,GACtC/G,KAAKgP,QAAQjI,KAGjBC,EAAKhH,KAAKgP,QAAQrO,EAAKA,EAAKuC,OAAS,IAEzC,OAAO,IAAI,UAAW,CACrBwD,YAAY,EACZC,OACAK,OAIK,eAAerG,GACrB,OAAOX,KAAKwT,OAAOzN,IAAIpF,IACnB,IAAIX,KAAK2N,UAAUkG,UAAU/M,MAAKzE,GAAKA,EAAEkN,eAAe5O,KAGtD,YAAYA,GAClB,OAAOX,KAAKuP,eAAe5O,MACpBX,KAAKsT,QAAUtT,KAAKsT,OAAOxF,YAAYnN,GAGxC,YAAYmH,GAClB,KAAMA,aAAoB,WACzB,MAAM9H,KAAK8C,MAAM,yBAElB,GAAI9C,KAAKuP,eAAezH,EAASnH,MAChC,MAAMX,KAAK8C,MAAM,cAAcgF,EAASnH,kCAGzC,OADAX,KAAKwT,OAAO/K,IAAIX,EAASnH,KAAMmH,GACxBA,EAGD,OAAOQ,GACb,KAAMA,aAAe,WACpB,MAAMtI,KAAK8C,MAAM,yBAElB,IAAKwF,EAAI3H,KACR,MAAMX,KAAK8C,MAAM,qCAElB,GAAI9C,KAAKuP,eAAejH,EAAI3H,MAC3B,MAAMX,KAAK8C,MAAM,cAAcwF,EAAI3H,kCAGpC,OADAX,KAAKwT,OAAO/K,IAAIH,EAAI3H,KAAM2H,GACnBA,EAGD,YAAY3H,GAClB,IAAKX,KAAK8N,YAAYnN,GACrB,MAAMX,KAAK8C,MAAM,cAAcnC,oBAEhC,OAAOX,KAAKwT,OAAOzN,IAAIpF,GACpBX,KAAKwT,OAAOvS,IAAIN,KACbX,KAAKsT,QAAUtT,KAAKsT,OAAOpE,YAAYvO,IACxC,IAAIX,KAAK2N,UAAUkG,UAAUG,QAAO3R,GAC/BA,EAAEyL,YAAYnN,KACnB,GAAGuO,YAAYvO,GAGd,aAAaA,GACnB,OAAOX,KAAKyT,UAAU1N,IAAIpF,IAASX,KAAKwT,OAAOzN,IAAIpF,IAC/C,IAAIX,KAAK2N,UAAUkG,UAAU/M,MAAKzE,GAAKA,EAAE4R,aAAatT,KAGpD,UAAUA,GAChB,OAAOX,KAAKiU,aAAatT,MAClBX,KAAKsT,QAAUtT,KAAKsT,OAAOrF,UAAUtN,GAGtC,UAAU0K,GAChB,KAAMA,aAAkB,WACvB,MAAMrL,KAAK8C,MAAM,yBAElB,GAAI9C,KAAKiU,aAAa5I,EAAO1K,MAC5B,MAAMX,KAAK8C,MAAM,UAAUuI,EAAO1K,kCAGnC,OADAX,KAAKyT,UAAUhL,IAAI4C,EAAO1K,KAAM0K,GACzBA,EAGD,UAAU1K,GAChB,IAAKX,KAAKiO,UAAUtN,GACnB,MAAMX,KAAK8C,MAAM,UAAUnC,oBAE5B,OAAOX,KAAKyT,UAAU1N,IAAIpF,GACvBX,KAAKyT,UAAUxS,IAAIN,GACnBX,KAAKwT,OAAOzN,IAAIpF,GACfX,KAAKwT,OAAOvS,IAAIN,KACbX,KAAKsT,QAAUtT,KAAKsT,OAAOxD,UAAUnP,IACtC,IAAIX,KAAK2N,UAAUkG,UAAUG,QAAO3R,GAC/BA,EAAE4L,UAAUtN,KACjB,GAAGmP,UAAUnP,GAGb,QAAQA,GACd,OAAOX,KAAK8F,KAAKC,IAAIpF,IACjB,IAAIX,KAAK2N,UAAUkG,UAAU/M,MAAKzE,GAAKA,EAAE4N,QAAQtP,KAG/C,KAAKA,GACX,OAAOX,KAAKiQ,QAAQtP,MACbX,KAAKsT,QAAUtT,KAAKsT,OAAO1D,KAAKjP,GAGjC,KAAKqI,GACX,KAAMA,aAAa,WAClB,MAAMhJ,KAAK8C,MAAM,yBAElB,GAAI9C,KAAKiQ,QAAQjH,EAAErI,MAClB,MAAMX,KAAK8C,MAAM,cAAckG,EAAErI,kCAGlC,OADAX,KAAK8F,KAAK2C,IAAIO,EAAErI,KAAMqI,GACfA,EAGD,KAAKrI,GACX,IAAKX,KAAK4P,KAAKjP,GACd,MAAMX,KAAK8C,MAAM,cAAcnC,oBAEhC,OAAOX,KAAK8F,KAAKC,IAAIpF,GAClBX,KAAK8F,KAAK7E,IAAIN,KACXX,KAAKsT,QAAUtT,KAAKsT,OAAOzD,KAAKlP,IACjC,IAAIX,KAAK2N,UAAUkG,UAAUG,QAAO3R,GAC/BA,EAAEuN,KAAKjP,KACZ,GAAGkP,KAAKlP,IA1Qf,iB,8ECRA,MAAqBuT,WAKpB,YAAa7G,EAAiB8G,GAC7BnU,KAAKqN,QAAUA,EACfrN,KAAKmU,MAAQA,GAAS,GAGhB,OAAOC,GACb,OAAO,IAAIF,WAAWlU,KAAKqN,QAAS,CAAC+G,GAASjL,OAAOnJ,KAAKmU,QAGpD,MAAMtR,GACZ,IAAIwK,EAAUrN,KAAKqN,SAAW,YAE9B,OAAO,IAAItK,MACVF,EACE,WAED7C,KAAKmU,MAAMjR,OACRlD,KAAKmU,MAAMvN,KAAI,EAAE3B,OAAMtE,OAAMoO,cACvB,GAAG9J,KAAQtE,GAAQ,kBAAkB0M,KAAW0B,EAASpG,MAAM8E,QAAQsB,EAASpG,MAAM0L,YAC3FtQ,KAAK,WACN,WAAWsJ,YAzBlB","file":"math.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"math\"] = factory();\n\telse\n\t\troot[\"math\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import StackTrace from '../StackTrace';\n\nvar ctr = 0;\n\nexport type Precedence = boolean | number | [number, number];\n\nexport default abstract class Node {\n\tpublic readonly _id: number;\n\n\tpublic readonly trace: StackTrace;\n\tpublic readonly doc: string;\n\tpublic readonly tex: string;\n\tpublic precedence: Precedence;\n\n\tpublic static readonly PREC_FUNEXPR = 1000;\n\tpublic static readonly PREC_COMMA = 1000;\n\tpublic static readonly PREC_COLONEQQ = 100000;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string) {\n\t\tthis._id = ++ctr;\n\t\tthis.trace = trace;\n\t\tthis.doc = doc;\n\t\tthis.tex = tex;\n\t}\n\n\tpublic toString() {\n\t\treturn this.toIndentedString(0);\n\t}\n\n\tpublic abstract toIndentedString(indent: number, root?: boolean): string;\n\tpublic abstract toTeXString(prec?: Precedence, root?: boolean): string;\n\n\tpublic error(message: string) {\n\t\treturn Node.error(message, this.trace);\n\t}\n\n\tpublic static error(message: string, trace: StackTrace) {\n\t\tif (trace) {\n\t\t\treturn trace.error(message);\n\t\t} else {\n\t\t\treturn new Error(message);\n\t\t}\n\t}\n\n\t/*\n\t* false corresponds to 0.\n\t* true corresponds to w * 2.\n\t*/\n\tpublic static normalizePrecedence(prec: Precedence) {\n\t\tif (prec === false) return [0, 0];\n\t\tif (prec === true) return [2, 0];\n\t\tif (typeof prec == 'number') return [0, prec];\n\n\t\tif (!(prec instanceof Array && prec.length == 2)) {\n\t\t\tconsole.log(prec);\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\treturn prec;\n\t}\n\n\tpublic shouldConsolidate(prec: Precedence): boolean {\n\t\tvar my = Node.normalizePrecedence(this.precedence || false),\n\t\t\tyour = Node.normalizePrecedence(prec || false);\n\n\t\tif (my[0] == 0 && my[1] == 0) return false;\n\n\t\treturn !(my[0] < your[0] || my[0] == your[0] && my[1] < your[1]);\n\t}\n\n\tpublic static escapeTeX(s: string): string {\n\t\treturn s.replace(/&|%|\\$|#|_|{|}|~|\\^|\\\\/g, m => ({\n\t\t\t'&': '\\\\&', '%': '\\\\%', '$': '\\\\$',\n\t\t\t'#': '\\\\#', '_': '\\\\_', '{': '\\\\{',\n\t\t\t'}': '\\\\}',\n\t\t\t'~': '\\\\textasciitilde',\n\t\t\t'^': '\\\\textasciicircum',\n\t\t\t'\\\\': '\\\\textbackslash'\n\t\t})[m]);\n\t}\n\n\tpublic static parseTeX(tex: string) {\n\t\tvar precedence: Precedence = false;\n\n\t\tvar code = tex.replace(/^!<prec=([0-9]+)>/, (match, g1) => {\n\t\t\tprecedence = g1 * 1;\n\t\t\treturn '';\n\t\t});\n\n\t\treturn {precedence, code};\n\t}\n\n\tpublic static makeTeXName(name: string): string {\n\t\tvar alphabet = [\n\t\t\t\"alpha\", \"beta\", \"gamma\", \"delta\",\n\t\t\t\"epsilon\", \"zeta\", \"eta\", \"theta\",\n\t\t\t\"iota\", \"kappa\", \"lambda\", \"mu\",\n\t\t\t\"nu\", \"xi\", \"omicron\", \"pi\",\n\t\t\t\"rho\", \"sigma\", \"tau\", \"upsilon\",\n\t\t\t\"phi\", \"chi\", \"psi\", \"omega\"\n\t\t];\n\n\t\tvar regex = new RegExp(`^(?:([a-z])|(${alphabet.join('|')}))([0-9]*)$`, 'i');\n\t\tvar match = name.match(regex);\n\n\t\tif (match) {\n\t\t\tvar letter = (() => {\n\t\t\t\tif (match[1]) return match[1];\n\t\t\t\t\n\t\t\t\tvar capitalize = match[2].charCodeAt(0) <= 'Z'.charCodeAt(0);\n\t\t\t\tvar commandName = match[2].toLowerCase();\n\n\t\t\t\tif (capitalize) {\n\t\t\t\t\tcommandName = commandName[0].toUpperCase() + commandName.substring(1);\n\t\t\t\t}\n\n\t\t\t\treturn '\\\\' + commandName;\n\t\t\t})();\n\n\t\t\tvar subscript = (() => {\n\t\t\t\tif (!match[3]) return '';\n\t\t\t\tif (match[3].length == 1) return '_' + match[3];\n\t\t\t\treturn `_{${match[3]}}`;\n\t\t\t})();\n\n\t\t\treturn letter + subscript;\n\t\t}\n\n\t\tif (name.length == 1) {\n\t\t\treturn Node.escapeTeX(name);\n\t\t}\n\n\t\treturn `\\\\mathrm{${Node.escapeTeX(name)}}`;\n\t}\n\n\tpublic makeTeX(id, args, prec) {\n\t\targs = args || [];\n\t\tprec = prec || false;\n\t\t\n\t\tvar ret = this.tex;\n\n\t\tif (this.shouldConsolidate(prec)) {\n\t\t\tret = '\\\\left(' + ret + '\\\\right)';\n\t\t}\n\n\t\treturn ret.replace(/#([0-9]+)/g, (match, g1) => {\n\t\t\treturn args[g1 * 1 - 1] || `\\\\texttt{\\\\textcolor{red}{\\\\#${g1}}}`;\n\t\t}).replace(/<<(.+?)>>/, (_match, g1) => {\n\t\t\treturn `\\\\href{#${id}}{${g1}}`;\n\t\t});\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Node from \"./Node\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\n/**\n * 숫자가 큰 것이 우선순위가 높다.\n */\nexport enum EqualsPriority {\n\t/** Variable (primitive) */\n\tZERO,\n\t/** Fun */\n\tONE,\n\t/** Tee */\n\tTWO,\n\t/** Funcall */\n\tTHREE,\n\t/** Variable (macro) */\n\tFOUR,\n\t/** $Variable, Reduction */\n\tFIVE\n}\n\nexport default abstract class Metaexpr extends Node {\n\t\n\tpublic readonly type: Type;\n\tprivate expandMetaCache: Metaexpr;\n\n\tconstructor(trace: StackTrace, doc: string, tex: string, type: Type) {\n\t\tsuper(trace, doc, tex);\n\n\t\tif (!type) throw Node.error('Assertion failed', trace);\n\n\t\tthis.type = type;\n\t}\n\n\tpublic abstract substitute(map: Map<Variable, Expr0>): Metaexpr;\n\n\t/**\n\t * \n\t * @param andFuncalls 이름 없는 Funcall도 푼다.\n\t */\n\tpublic expandMeta(andFuncalls: boolean): Metaexpr {\n\t\tif (this.expandMetaCache) return this.expandMetaCache;\n\t\treturn this.expandMetaCache = this.expandMetaInternal(andFuncalls);\n\t}\n\n\tprotected abstract expandMetaInternal(andFuncalls: boolean): Metaexpr;\n\n\tpublic equals(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\t// console.log(`${this}\\n\\n${obj}`);\n\t\t// var ret = (() => {\n\t\t\n\t\tif (this === obj) return true;\n\t\tif (!this.type.equals(obj.type)) return false;\n\n\t\tif (obj.getEqualsPriority(context) > this.getEqualsPriority(context))\n\t\t\treturn obj.equalsInternal(this, context);\n\t\t\n\t\treturn this.equalsInternal(obj, context);\n\n\t\t// })();\n\t\t// console.log(`${this}\\n\\n${obj}\\n\\n${ret}`);\n\t\t// return ret;\n\t}\n\n\tprotected abstract getEqualsPriority(context: ExecutionContext): EqualsPriority;\n\n\tprotected abstract equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean;\n\n\tpublic isProved(hypotheses?: Metaexpr[]): boolean {\n\t\thypotheses = hypotheses || [];\n\n\t\tfor (var i = 0; i < hypotheses.length; i++) {\n\t\t\tif (hypotheses[i] == this) return true;\n\t\t}\n\n\t\treturn this.isProvedInternal(hypotheses);\n\t}\n\n\tprotected abstract isProvedInternal(hypotheses: Metaexpr[]): boolean;\n\n\tpublic getProof(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (hypnumMap.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: hypnumMap.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'R',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tnum: $Map.get(this),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\treturn this.getProofInternal(hypnumMap, $Map, ctr, root);\n\t}\n\n\tprotected abstract getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot?: boolean): ProofType[];\n}","import Nameable from './Nameable';\nimport Node from './Node';\nimport Type from './Type';\n\nexport default class ObjectType extends Type implements Nameable {\n\n\tpublic readonly isBaseType: boolean;\n\tpublic readonly name: string;\n\tpublic readonly origin: ObjectType;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: ObjectType;\n\n\tconstructor (o) {\n\t\tif (o.origin) {\n\t\t\tsuper(null, o.doc, null, o.origin.isFunctional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.name != 'string')\n\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\tthis.name = o.name;\n\n\t\t\tif (!(o.origin instanceof ObjectType))\n\t\t\t\tthrow Node.error('!(o.origin instanceof ObjectType)', null);\n\n\t\t\tthis.origin = o.origin;\n\t\t} else {\n\t\t\tsuper(null, o.doc, null, o.functional);\n\n\t\t\tthis.isBaseType = !!o.base;\n\n\t\t\tif (typeof o.functional != 'boolean')\n\t\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\t\tif (!o.functional) {\n\t\t\t\tif (typeof o.name != 'string')\n\t\t\t\t\tthrow Node.error('typeof o.name != \\'string\\'', null);\n\t\t\t\tthis.name = o.name;\n\t\t\t} else {\n\t\t\t\tif (o.from.map(f => f instanceof ObjectType).some(e => !e))\n\t\t\t\t\tthrow Node.error('o.from.map(f => f instanceof ObjectType).some(e => !e)', null);\n\t\t\t\tif (!(o.to instanceof ObjectType))\n\t\t\t\t\tthrow Node.error('!(o.to instanceof ObjectType)', null);\n\n\t\t\t\tthis.from = o.from;\n\t\t\t\tthis.to = o.to;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toSimpleString() {\n\t\tif (this.name) return this.name;\n\n\t\tvar resolved = this.resolve();\n\n\t\treturn `[${resolved.from.map(e => e.toSimpleString()).join(', ')} -> ${resolved.to.toSimpleString()}]`;\n\t}\n\n\tpublic toIndentedString(indent): string {\n\t\tif (this.isSimple) return this.name;\n\n\t\treturn `${this.name ? this.name + ': ' : ''}[${this.resolve().from.join(', ')} -> ${this.resolve().to}]`;\n\t}\n\n\tpublic toTeXString(root?: boolean) {\n\t\tif (this.isSimple) return `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\n\t\tif (!root && this.name) {\n\t\t\treturn `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}`;\n\t\t}\n\n\t\treturn `${this.name ? `\\\\href{#type-${this.name}}\\\\mathsf{${this.name}}: ` : ''}`\n\t\t\t+ `\\\\left[${this.resolve().from.map(e => e.toTeXString()).join(' \\\\times ')}`\n\t\t\t+ ` \\\\to ${this.resolve().to.toTeXString()} \\\\right]`;\n\t}\n\n\tpublic resolve(): ObjectType {\n\t\treturn this.origin ? this.origin.resolve() : this;\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof ObjectType)) return false;\n\n\t\tif (this.origin) return this.origin.equals(t);\n\t\tif (t.origin) return this.equals(t.origin);\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) return this === t;\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (var i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import Expr0 from './Expr0';\nimport Nameable from './Nameable';\n\nexport default abstract class Fun extends Expr0 implements Nameable {\n\n\tpublic readonly annotations: string[];\n\tpublic readonly sealed: boolean;\n\tpublic readonly name: string;\n\tpublic readonly params: Parameter[];\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: FunArgumentType, trace: StackTrace) {\n\t\tif (!name && !expr)\n\t\t\tthrow Node.error('Anonymous fun cannot be primitive', trace);\n\n\t\tif (rettype && expr) {\n\t\t\tif (!rettype.equals(expr.type)) {\n\t\t\t\tthrow Node.error(`Expression type ${expr.type} failed to match the return type ${rettype} of fun ${name}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (!rettype && !expr) {\n\t\t\tthrow Node.error('Cannot guess the return type of a primitive fun', trace);\n\t\t}\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Node.error('Cannot seal a primitive fun', trace);\n\t\t}\n\t\t\n\t\tvar precedence = false;\n\n\t\tif (tex) {\n\t\t\tvar parsed = Node.parseTeX(tex);\n\t\t\tprecedence = parsed.precedence;\n\t\t\ttex = parsed.code;\n\t\t} else {\n\t\t\ttex = null;\n\t\t}\n\t\t\n\t\tsuper(\n\t\t\ttrace, doc, tex,\n\t\t\tnew ((rettype || expr.type) instanceof ObjectType ? ObjectType : MetaType)({\n\t\t\t\tfunctional: true,\n\t\t\t\tfrom: params.map(variable => variable.type),\n\t\t\t\tto: rettype || expr.type as any\n\t\t\t})\n\t\t);\n\n\t\tthis.annotations = annotations;\n\t\tthis.sealed = sealed;\n\t\tthis.precedence = precedence;\n\t\tthis.name = name;\n\t\tthis.params = params;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr && this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.ONE;\n\t}\n\t\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(this.expr && !this.sealed)\n\t\t\t\t&& !(obj instanceof Fun && obj.expr && !obj.sealed)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar placeholders = [];\n\t\tvar types = (this.type.resolve() as ObjectType | MetaType).from;\n\n\t\tfor (var i = 0; i < types.length; i++) {\n\t\t\tplaceholders.push(new Parameter({\n\t\t\t\ttype: types[i],\n\t\t\t\tname: '$' + i,\n\t\t\t\tselector: null\n\t\t\t}, this.trace));\n\t\t}\n\n\t\tvar thisCall = this.expr && !this.sealed\n\t\t\t? this.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: this,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\n\t\tvar objCall = obj instanceof Fun && obj.expr && !obj.sealed\n\t\t\t? obj.call(placeholders)\n\t\t\t: new Funcall({\n\t\t\t\tfun: obj,\n\t\t\t\targs: placeholders\n\t\t\t}, this.trace);\n\t\t\n\t\treturn thisCall.equals(objCall, context);\n\t}\n\n\tpublic abstract isCallable(context: ExecutionContext): boolean;\n\n\tpublic call(args: Expr0[]): Metaexpr {\n\t\tif (!this.expr) {\n\t\t\tthrow Error('Cannot call a primitive fun');\n\t\t}\n\n\t\tif (this.params.length != args.length) {\n\t\t\tthrow Error('Illegal arguments length');\n\t\t}\n\n\t\tvar map: Map<Variable, Expr0> = new Map();\n\n\t\tfor (var i = 0; i < this.params.length; i++) {\n\t\t\tmap.set(this.params[i], args[i]);\n\t\t}\n\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter,\n\t\t\troot: boolean=false): ProofType[] {\n\t\t\n\t\tif (this instanceof Schema && this.name && !root) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RS',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!this.expr) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\t$Map = new Map($Map);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar $lines: ProofType[] = [];\n\t\t\n\t\tif (this instanceof Schema) {\n\t\t\tthis.def$s.forEach($ => {\n\t\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\t\t$lines = $lines.concat(lines);\n\n\t\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t\t$Map.set($, $num);\n\t\t\t});\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'V',\n\t\t\t$lines,\n\t\t\tlines: this.expr.getProof(hypnumMap, $Map, ctr),\n\t\t\tparams: this.params,\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n}\n\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\nimport Variable from './Variable';\nimport StackTrace from '../StackTrace';\nimport ExecutionContext from '../ExecutionContext';\nimport Counter from '../Counter';\nimport { ProofType } from '../ProofType';\nimport Schema from './Schema';\nimport Parameter from './Parameter';\n\ninterface FunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Metaexpr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport Nameable from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\n\ninterface VariableArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\tsealed: boolean;\n\ttype: ObjectType;\n\tname: string;\n\texpr: Expr0;\n}\n\nexport default class Variable extends Expr0 implements Nameable {\n\n\tpublic readonly sealed: boolean;\n\tpublic readonly type: ObjectType;\n\tpublic readonly name: string;\n\tpublic readonly expr: Expr0;\n\n\tconstructor ({doc, tex, sealed, type, name, expr}: VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, doc, tex, type);\n\t\t\n\t\tif (typeof name != 'string')\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\n\t\tif (sealed && !expr) {\n\t\t\tthrow Node.error('Cannot seal a primitive fun', trace);\n\t\t}\n\n\t\tif (expr && !type.equals(expr.type)) {\n\t\t\tthrow Node.error(`Expression type ${expr.type} failed to match the type ${type} of variable ${name}`, trace);\n\t\t}\n\n\t\tthis.sealed = sealed;\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (map.has(this)) return map.get(this);\n\n\t\t// 매크로 변수는 스코프 밖에서 보이지 않으므로 치환될 것을 갖지 않는다는\n\t\t// 생각이 들어 있다.\n\t\treturn this;\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this;\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\treturn this.expr && (!this.sealed || context.canUse(this))\n\t\t\t? EqualsPriority.FOUR\n\t\t\t: EqualsPriority.ZERO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!this.expr) return false;\n\n\t\tif (!this.sealed || context.canUse(this)) {\n\t\t\treturn this.expr.equals(obj, context);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\treturn [{\n\t\t\t_type: 'NP',\n\t\t\tctr: ctr.next(),\n\t\t\texpr: this\n\t\t}];\n\t}\n\n\t// pr f\n\tpublic toSimpleString() {\n\t\treturn this.type.toSimpleString() + ' ' + this.name;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn `${root ? this.type + ' ' : ''}${this.name}<${this._id}>`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar id = this instanceof Parameter ? `id-${this._id}` : `def-${this.name}`;\n\n\t\tvar tex = this.tex || Node.makeTeXName(this.name);\n\t\t\n\t\tvar expr = root && this.expr\n\t\t\t? `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`\n\t\t\t: '';\n\t\t\n\t\treturn `\\\\href{#${id}}{${tex}}${expr}`;\n\t}\n}\n\nimport Parameter from './Parameter';","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport Nameable from \"./Nameable\";\nimport Node, { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface $VariableArgumentType {\n\tname: string;\n\texpr: Metaexpr;\n}\n\nexport default class $Variable extends Metaexpr implements Nameable {\n\n\tpublic readonly name: string;\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor ({name, expr}: $VariableArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tif (!name || !expr) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tthis.name = name;\n\t\tthis.expr = expr;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.expr.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.expr.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.expr.equals(obj, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tif (!$Map.has(this)) {\n\t\t\tthrow Error(`${this.name} is not defined`);\n\t\t}\n\n\t\treturn [{\n\t\t\t_type: 'R',\n\t\t\tctr: ctr.next(),\n\t\t\tnum: $Map.get(this),\n\t\t\texpr: this.expr\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn this.name;\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `\\\\mathtt{${Node.escapeTeX(this.name)}}`;\n\t}\n}","import Fun from \"./Fun\";\n\nexport type SchemaType = 'axiom' | 'theorem' | 'schema';\n\nexport default class Schema extends Fun {\n\n\tpublic readonly schemaType: SchemaType;\n\tpublic readonly using: ObjectFun[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly context: ExecutionContext;\n\tprivate isProvedCache: boolean;\n\n\tconstructor ({doc, tex, annotations, schemaType, name, params, context, def$s, expr}: SchemaArgumentType, trace: StackTrace) {\n\t\tif (!expr) {\n\t\t\tthrow Node.error('wut', trace);\n\t\t}\n\n\t\tif (schemaType != 'schema' && !name) {\n\t\t\tthrow Node.error(`wut`, trace);\n\t\t}\n\n\t\tsuper({doc, tex, annotations, sealed: false, rettype: null, name, params, expr}, trace);\n\t\t\n\t\tthis.schemaType = schemaType;\n\t\tthis.def$s = def$s || [];\n\t\tthis.context = context;\n\n\t\tif (schemaType == 'theorem') {\n\t\t\tif (!this.isProved()) {\n\t\t\t\tthrow Node.error(`Schema ${name} is marked as a theorem but it is not proved`, trace);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic isProved(hyps?) {\n\t\tif (this.isProvedCache) return true;\n\n\t\tif (!hyps && typeof this.isProvedCache == 'boolean') {\n\t\t\treturn this.isProvedCache;\n\t\t}\n\n\t\tvar cache = !hyps || !hyps.length;\n\t\thyps = hyps || [];\n\t\t\n\t\tvar ret = this.schemaType == 'axiom' || super.isProved(hyps);\n\t\tif (cache) this.isProvedCache = ret;\n\t\treturn ret;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new Schema({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tschemaType: 'schema',\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\tcontext: this.context,\n\t\t\tdef$s: this.def$s,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(_context: ExecutionContext): boolean {\n\t\treturn true;\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\treturn [\n\t\t\t`∫ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.expandMeta(true).toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\t\t\n\t\tvar id = 'def-' + this.name,\n\t\t\tproved = this.isProved() ? 'p' : 'np';\n\t\n\t\tif (!root)\n\t\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}}`;\n\t\n\t\treturn `\\\\href{#${id}}{\\\\htmlData{proved=${proved}}{\\\\mathsf{${Node.escapeTeX(this.name)}}}}\\\\mathord{\\\\left(${this.params.map(e => e.toTeXStringWithId(Node.PREC_COMMA) + (e.selector ? `: \\\\texttt{@${e.selector}}` : '')).join(', ')}\\\\right)}:\\\\\\\\\\\\quad`\n\t\t\t\t+ this.expr.expandMeta(true).toTeXString(true);\n\t}\n}\n\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\nimport ObjectFun from \"./ObjectFun\";\nimport StackTrace from \"../StackTrace\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport Parameter from \"./Parameter\";\n\ninterface SchemaArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tschemaType: SchemaType;\n\tname: string;\n\tparams: Parameter[];\n\tcontext: ExecutionContext;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectFun from './ObjectFun';\nimport ObjectType from './ObjectType';\nimport Schema from './Schema';\nimport Variable from './Variable';\n\ninterface FuncallArgumentType {\n\tfun: Metaexpr;\n\targs: Expr0[];\n}\n\nexport default class Funcall extends Expr0 {\n\t\n\tpublic readonly fun: Metaexpr;\n\tpublic readonly args: Expr0[];\n\n\tconstructor ({fun, args}: FuncallArgumentType, trace: StackTrace) {\n\t\tif (fun.type.isSimple) {\n\t\t\tvar name = isNameable(fun) ? fun.name : '<anonymous>';\n\t\t\tthrow Node.error(`${name} is not callable`, trace);\n\t\t}\n\n\t\tif (!(args instanceof Array) || args.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t\t \n\t\tvar resolvedType = fun.type.resolve() as ObjectType | MetaType,\n\t\t\tparamTypes = resolvedType.from,\n\t\t\targTypes = args.map(e => e.type);\n\n\t\tif (paramTypes.length != argTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(argTypes[i])) {\n\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t}\n\t\t}\n\n\t\tsuper(trace, null, null, resolvedType.to);\n\t\t\n\t\tthis.fun = fun;\n\t\tthis.args = args;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.fun.isProved(hypotheses);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn new Funcall({\n\t\t\tfun: this.fun.substitute(map),\n\t\t\targs: this.args.map(arg => arg.substitute(map))\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar fun = this.fun.expandMeta(andFuncalls),\n\t\t\targs = this.args.map(arg => arg.expandMeta(andFuncalls));\n\t\t\n\t\tif (!(fun instanceof Fun) || !fun.expr || fun.name && !(fun instanceof Schema))\n\t\t\treturn new Funcall({fun, args}, this.trace);\n\n\t\treturn fun.call(args).expandMeta(andFuncalls);\n\t}\n\n\tpublic isExpandable(context: ExecutionContext): boolean {\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\twhile (callee instanceof Variable && callee.expr) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn callee.isExpandable(context);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) return false;\n\n\t\treturn callee.isCallable(context);\n\t}\n\t\n\tpublic expandOnce(context: ExecutionContext): Metaexpr {\n\t\tif (!this.isExpandable(context)) {\n\t\t\tthrow Error('Cannot expand');\n\t\t}\n\n\t\tvar callee: Metaexpr = this.fun;\n\n\t\twhile (callee instanceof $Variable) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\twhile (callee instanceof Variable && callee.expr) {\n\t\t\tcallee = callee.expr;\n\t\t}\n\n\t\tif (callee instanceof Funcall) {\n\t\t\treturn new Funcall({\n\t\t\t\tfun: callee.expandOnce(context),\n\t\t\t\targs: this.args\n\t\t\t}, this.trace);\n\t\t}\n\n\t\tif (!(callee instanceof Fun)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\treturn callee.call(this.args);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.THREE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Funcall)) {\n\t\t\tif (!this.isExpandable(context)) return false;\n\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (this.fun == obj.fun || this.fun.equals(obj.fun, context)) {\n\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.fun instanceof Funcall && this.fun.isExpandable(context)) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\tif (obj.fun instanceof Funcall && obj.fun.isExpandable(context)) {\n\t\t\treturn this.equals(obj.expandOnce(context), context);\n\t\t}\n\n\t\tvar thisIsExpandable = this.isExpandable(context),\n\t\t\tobjIsExpandable = obj.isExpandable(context);\n\t\t\n\t\tif (this.fun == obj.fun || !thisIsExpandable && !objIsExpandable) {\n\t\t\tif (this.fun != obj.fun) return false;\n\n\t\t\tif (!thisIsExpandable && !objIsExpandable) {\n\t\t\t\tfor (var i = 0; i < this.args.length; i++) {\n\t\t\t\t\tif (!this.args[i].equals(obj.args[i], context)) return false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (this.args.every((_, i) => {\n\t\t\t\treturn this.args[i].equals(obj.args[i], context);\n\t\t\t})) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (thisIsExpandable) {\n\t\t\treturn this.expandOnce(context).equals(obj, context);\n\t\t}\n\n\t\treturn this.equals(obj.expandOnce(context), context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\n\t\tif (hypnumMap.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: hypnumMap.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif ($Map.has(this.fun)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: $Map.get(this.fun),\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (this.fun instanceof Schema && this.fun.name) {\n\t\t\treturn [{\n\t\t\t\t_type: 'RCX',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tif (!(this.fun instanceof Schema)) {\n\t\t\treturn [{\n\t\t\t\t_type: 'NP',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\texpr: this\n\t\t\t}];\n\t\t}\n\n\t\tvar schemalines = this.fun.getProof(hypnumMap, $Map, ctr);\n\n\t\treturn [\n\t\t\t...schemalines,\n\t\t\t{\n\t\t\t\t_type: 'RC',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tschema: schemalines[schemalines.length - 1].ctr,\n\t\t\t\targs: this.args,\n\t\t\t\texpr: this\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar args: any = this.args.map(arg => {\n\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (args.join('').length <= 50) {\n\t\t\targs = this.args.map(arg => {\n\t\t\t\tif (arg instanceof Variable) return `${arg.name}<${arg._id}>`;\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\targs = args.join(', ');\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn `${this.fun.name || `(${this.fun})`}(${args})`;\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t!(this.fun instanceof Fun) || !this.fun.name\n\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t: this.fun.name,\n\t\t\t\t\t`(${args})`\n\t\t\t\t].join('');\n\t\t\t}\n\t\t} else {\n\t\t\targs = args.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\t\t\n\t\t\tif (this.fun instanceof Schema) {\n\t\t\t\treturn [\n\t\t\t\t\tthis.fun.name || `(${this.fun.toIndentedString(indent)})`,\n\t\t\t\t\t'(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t} else {\n\t\t\t\treturn [\n\t\t\t\t\t(\n\t\t\t\t\t\t!(this.fun instanceof Fun) || !('name' in this.fun && this.fun.name)\n\t\t\t\t\t\t\t? '(' + this.fun.toIndentedString(indent) + ')'\n\t\t\t\t\t\t\t: this.fun.name\n\t\t\t\t\t) + '(',\n\t\t\t\t\t'\\t' + args,\n\t\t\t\t\t')'\n\t\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (this.fun instanceof Schema) {\n\t\t\treturn (\n\t\t\t\tthis.fun.name\n\t\t\t\t\t? `\\\\href{#schema-${this.fun.isProved() ? 'p' : 'np'}-${this.fun.name}}{\\\\textsf{${Node.escapeTeX(this.fun.name)}}}`\n\t\t\t\t\t: this.fun.toTeXString(false)\n\t\t\t) + `\\\\mathord{\\\\left(${this.args.map(arg => {\n\t\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t\t}).join(', ')}\\\\right)}`;\n\t\t}\n\n\t\tif (this.fun instanceof ObjectFun)\n\t\t\treturn this.fun.funcallToTeXString(this.args, prec);\n\t\t\n\t\tvar args = this.args.map(arg => {\n\t\t\treturn arg.toTeXString(Node.PREC_COMMA);\n\t\t});\n\n\t\treturn (\n\t\t\t!(isNameable(this.fun) && this.fun.name) || this.fun instanceof Variable\n\t\t\t\t? this.fun.toTeXString(false)\n\t\t\t\t: Node.makeTeXName(this.fun.name)\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import Metaexpr from \"./Metaexpr\";\n\nexport default abstract class Expr0 extends Metaexpr {\n\t\n}","import Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Type from './Type';\n\ninterface SimpleMetaTypeArgumentType {\n\tfunctional: false;\n\tleft: Type[];\n\tright: Type;\n}\n\ninterface FunctionalMetaTypeArgumentType {\n\tfunctional: true;\n\tfrom: ObjectType[];\n\tto: MetaType;\n}\n\ntype MetaTypeArgumentType = SimpleMetaTypeArgumentType | FunctionalMetaTypeArgumentType;\n\nexport default class MetaType extends Type {\n\t\n\tpublic readonly left: Type[];\n\tpublic readonly right: Type;\n\tpublic readonly from: ObjectType[];\n\tpublic readonly to: MetaType;\n\n\tconstructor (o: MetaTypeArgumentType) {\n\t\tsuper(null, null, null, o.functional);\n\n\t\tif (typeof o.functional != 'boolean')\n\t\t\tthrow Node.error('typeof o.functional != \\'boolean\\'', null);\n\n\t\tif (o.functional == false) {\n\t\t\tif (!(o.left instanceof Array))\n\t\t\t\tthrow Node.error('left should be an array', null);\n\n\t\t\tthis.left = o.left;\n\t\t\tthis.right = o.right;\n\t\t} else {\n\t\t\tif (o.from.some(f => !(f instanceof ObjectType)))\n\t\t\t\tthrow Node.error('o.from.some(f => !(f instanceof ObjectType))', null);\n\t\t\tif (!(o.to instanceof MetaType))\n\t\t\t\tthrow Node.error('!(o.to instanceof MetaType)', null);\n\n\t\t\tif (o.to.isFunctional)\n\t\t\t\tthrow Node.error('Functional metatype in functional metatype is not supported', null);\n\n\t\t\tthis.from = o.from;\n\t\t\tthis.to = o.to;\n\t\t}\n\t}\n\n\tpublic resolve(): MetaType {\n\t\treturn this;\n\t}\n\n\tpublic toIndentedString(indent: number) {\n\t\tif (this.isSimple) return `[${this.left.join(', ')} |- ${this.right}]`;\n\n\t\treturn `[${this.from.join(', ')} -> ${this.to}]`;\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tpublic equals(t: Type): boolean {\n\t\tif (!(t instanceof MetaType)) return false;\n\n\t\tif (this.isSimple != t.isSimple) return false;\n\n\t\tif (this.isSimple) {\n\t\t\tif (this.left.length != t.left.length) return false;\n\n\t\t\tfor (let i = 0; i < this.left.length; i++) {\n\t\t\t\tif (!this.left[i].equals(t.left[i])) return false;\n\t\t\t}\n\n\t\t\tif (!this.right.equals(t.right)) return false;\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.from.length != t.from.length) return false;\n\n\t\tfor (let i = 0; i < this.from.length; i++)\n\t\t\tif (!this.from[i].equals(t.from[i])) return false;\n\n\t\treturn this.to.equals(t.to);\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Variable from \"./Variable\";\n\ninterface ParameterArgumentType {\n\tdoc?: string;\n\ttex?: string;\n\ttype: ObjectType;\n\tname: string;\n\tselector: string;\n}\n\nexport default class Parameter extends Variable {\n\n\tpublic readonly selector: string;\n\n\tconstructor ({doc, tex, type, name, selector}: ParameterArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, sealed: false, type, name, expr: null}, trace);\n\n\t\tthis.selector = selector;\n\t}\n\n\tpublic toTeXStringWithId(prec?: Precedence, root?: boolean): string {\n\t\tvar id =`id-${this._id}`;\n\n\t\treturn [\n\t\t\t`\\\\htmlId{${id}}{`,\n\t\t\tthis.toTeXString(prec, root),\n\t\t\t`}`\n\t\t].join('');\n\t}\n}","import ExecutionContext from \"../ExecutionContext\";\nimport StackTrace from \"../StackTrace\";\nimport Expr0 from \"./Expr0\";\nimport Fun from \"./Fun\";\nimport Metaexpr from \"./Metaexpr\";\nimport Node, { Precedence } from \"./Node\";\nimport ObjectType from \"./ObjectType\";\nimport Parameter from \"./Parameter\";\nimport Type from \"./Type\";\nimport Variable from \"./Variable\";\n\ninterface ObjectFunArgumentType {\n\tdoc: string;\n\ttex: string;\n\tannotations: string[];\n\tsealed: boolean;\n\trettype: Type;\n\tname: string;\n\tparams: Parameter[];\n\texpr: Expr0;\n}\n\nexport default class ObjectFun extends Fun {\n\t\n\tconstructor ({doc, tex, annotations, sealed, rettype, name, params, expr}: ObjectFunArgumentType, trace: StackTrace) {\n\t\tsuper({doc, tex, annotations, sealed, rettype, name, params, expr}, trace);\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (!this.expr) return this;\n\n\t\t// 이름이 있는 것은 스코프 밖에서 보이지 않으므로 치환될 것을\n\t\t// 갖지 않는다는 생각이 들어 있다.\n\t\tif (this.name) return this;\n\n\t\t// 위의 this.name 조건을 지우면 특수한 경우에 이게 발생할지도 모른다.\n\t\tif (this.params.some(e => map.has(e)))\n\t\t\tthrow Error('Parameter collision');\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.substitute(map)\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tif (!this.expr) return this;\n\t\tif (this.type instanceof ObjectType && this.name) return this;\n\n\t\treturn new ObjectFun({\n\t\t\tdoc: null,\n\t\t\ttex: null,\n\t\t\tannotations: this.annotations,\n\t\t\tsealed: this.sealed,\n\t\t\trettype: null,\n\t\t\tname: null,\n\t\t\tparams: this.params,\n\t\t\texpr: this.expr.expandMeta(andFuncalls)\n\t\t}, this.trace);\n\t}\n\n\tpublic isCallable(context: ExecutionContext): boolean {\n\t\treturn this.expr && (!this.sealed || context.canUse(this));\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (this.name) return this.name;\n\t\t\n\t\treturn [\n\t\t\t`ƒ ${this.name || ''}(${this.params.map(p => p.toIndentedString(indent)).join(', ')}) => {`,\n\t\t\t'\\t' + this.expr.toIndentedString(indent + 1),\n\t\t\t'}'\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tif (!this.name) {\n\t\t\tthis.precedence = Node.PREC_FUNEXPR;\n\t\t\treturn [\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\n\t\t\t\t(\n\t\t\t\t\tthis.params.length == 1\n\t\t\t\t\t? this.params[0].toTeXString(false)\n\t\t\t\t\t: `\\\\left(${this.params.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}\\\\right)`\n\t\t\t\t),\n\t\t\t\t'\\\\mapsto ',\n\t\t\t\tthis.expr.expandMeta(true).toTeXString(false),\n\n\t\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t\t].join('');\n\t\t}\n\n\t\tif (!root)\n\t\t\treturn `\\\\href{#def-${this.name}}{${Node.makeTeXName(this.name)}}`;\n\t\n\t\tif (!this.expr)\n\t\t\treturn this.funcallToTeXString(this.params, prec);\n\t\n\t\treturn this.funcallToTeXString(this.params, Node.PREC_COLONEQQ)\n\t\t\t\t+ `\\\\coloneqq ${this.expr.toTeXString(Node.PREC_COLONEQQ)}`;\n\t}\n\n\tpublic funcallToTeXString(args, prec) {\n\t\targs = args.map(arg => {\n\t\t\treturn arg.toTeXString(this.tex ? this.precedence : Node.PREC_COMMA);\n\t\t});\n\t\n\t\tif (this.tex) {\n\t\t\treturn this.makeTeX('def-' + this.name, args, prec);\n\t\t}\n\t\n\t\treturn (\n\t\t\t!this.name\n\t\t\t\t? this.toTeXString(false)\n\t\t\t\t: `\\\\href{#def-${this.name}}{${Node.makeTeXName(this.name)}}`\n\t\t) + `\\\\mathord{\\\\left(${args.join(', ')}\\\\right)}`;\n\t}\n}","import StackTrace from \"../StackTrace\";\nimport Node from \"./Node\";\n\nexport default abstract class Type extends Node {\n\tpublic readonly isFunctional: boolean;\n\tpublic readonly isSimple: boolean;\n\t\n\tpublic abstract equals(t: Type): boolean;\n\n\tconstructor (trace: StackTrace, doc: string, tex: string, isFunctional: boolean) {\n\t\tsuper(trace, doc, tex);\n\t\tthis.isFunctional = isFunctional;\n\t\tthis.isSimple = !isFunctional;\n\t}\n\n\tpublic abstract resolve(): Type;\n}","export default interface Nameable {\n\tname: string;\n}\n\nexport function isNameable(obj: object): obj is Nameable {\n\treturn 'name' in obj;\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport $Variable from './$Variable';\nimport Expr0 from './Expr0';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Variable from './Variable';\n\ninterface TeeArgumentType {\n\tleft: Metaexpr[];\n\tdef$s: $Variable[];\n\tright: Metaexpr;\n}\n\nexport default class Tee extends Metaexpr {\n\n\tpublic readonly left: Metaexpr[];\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly right: Metaexpr;\n\n\tconstructor ({left, def$s, right}: TeeArgumentType, trace: StackTrace) {\n\t\tif (!(left instanceof Array\n\t\t\t\t&& left.every(l => {\n\t\t\t\t\treturn l.type instanceof ObjectType\n\t\t\t\t\t\t|| l.type instanceof MetaType;\n\t\t\t\t}))) {\n\t\t\tconsole.log(left);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (def$s && !(def$s instanceof Array && def$s.every($ => $ instanceof $Variable)))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tif (!(right.type instanceof ObjectType || right.type instanceof MetaType)) {\n\t\t\tconsole.log(right);\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tif (right.type.isFunctional) {\n\t\t\tthrow Node.error('RHS of a rule cannot be a schema', trace);\n\t\t}\n\n\t\tsuper(trace, null, null, new MetaType({\n\t\t\tfunctional: false,\n\t\t\tleft: left.map(e => e.type),\n\t\t\tright: right.type\n\t\t}));\n\n\t\tthis.left = left;\n\t\tthis.def$s = def$s || [];\n\t\tthis.right = right;\n\t\tthis.precedence = Node.PREC_COMMA;\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.right.isProved(hypotheses.concat(this.left));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tvar left = this.left.map(e => e.substitute(map));\n\t\tvar right = this.right.substitute(map);\n\n\t\treturn new Tee({\n\t\t\tleft,\n\t\t\tdef$s: null,\n\t\t\tright\n\t\t}, this.trace);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar left = this.left.map(lef => lef.expandMeta(andFuncalls));\n\t\tvar right = this.right.expandMeta(andFuncalls);\n\n\t\treturn new Tee({left, def$s: null, right}, this.trace);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.TWO;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tif (!(obj instanceof Tee)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tif (this.left.length != obj.left.length) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tfor (var i = 0; i < this.left.length; i++) {\n\t\t\tif (!this.left[i].equals(obj.left[i], context)) return false;\n\t\t}\n\n\t\treturn this.right.equals(obj.right, context);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\thypnumMap = new Map(hypnumMap);\n\n\t\tvar start = ctr.peek() + 1;\n\n\t\tvar leftlines: ProofType[] = this.left.map(l => {\n\t\t\thypnumMap.set(l, ctr.next());\n\t\t\t\n\t\t\treturn {\n\t\t\t\t_type: 'H',\n\t\t\t\tctr: ctr.peek(),\n\t\t\t\texpr: l\n\t\t\t};\n\t\t});\n\n\t\t$Map = new Map($Map);\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [{\n\t\t\t_type: 'T',\n\t\t\tleftlines: leftlines as any,\n\t\t\trightlines: $lines.concat(this.right.getProof(hypnumMap, $Map, ctr)),\n\t\t\tctr: [start, ctr.peek()]\n\t\t}];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tif (!this.left.length) {\n\t\t\treturn '|- ' + this.right.toIndentedString(indent);\n\t\t}\n\t\n\t\treturn [\n\t\t\t'\\t' + this.left.map(e => e.toIndentedString(indent + 1)).join(',\\n' + '\\t'.repeat(indent + 1)),\n\t\t\t'|-',\n\t\t\t'\\t' + this.right.toIndentedString(indent + 1)\n\t\t].join('\\n' + '\\t'.repeat(indent));\n\t}\n\t\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tvar expanded = this.expandMeta(true) as Tee;\n\n\t\treturn [\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\left(' : ''),\n\t\t\t`{${expanded.left.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')} \\\\vdash ${expanded.right.toTeXString(Node.PREC_COMMA)}}`,\n\t\t\t(this.shouldConsolidate(prec) ? '\\\\right)' : '')\n\t\t].join('');\n\t}\n}","var grammar;\n\nif (process.env.__webpack__) {\n\tgrammar = require('raw-loader!./grammar.pegjs').default;\n} else {\n\tvar fs = require('fs');\n\tvar path = require('path');\n\n\tgrammar = fs.readFileSync(path.join(__dirname, 'grammar.pegjs'), 'utf-8');\n}\n\nvar Program = require('./Program').default;\n\nmodule.exports = {grammar, Program};","export default \"start =\\n\\t_\\n\\timports:(i:import _ {return i})*\\n\\tlines:(a:line _ {return a})*\\n\\t{return imports.concat(lines)}\\n\\nline =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\nevaluable =\\n\\t_ e:evaluable_internal _ {return e}\\n\\nevaluable_internal =\\n\\ttypedef\\n\\t/ defv\\n\\t/ defun\\n\\t/ defschema\\n\\t/ metaexpr\\n\\nimport =\\n\\t'import' __\\n\\tfilename:ident _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'import',\\n\\t\\t\\tfilename,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntypedef =\\n\\tdoc:(documentation __)?\\n\\tbase:(\\\"base\\\" __)?\\n\\t\\\"type\\\" __\\n\\torigin:(o:ftype __ {return o})?\\n\\tname:ident _ sem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'typedef',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tbase: !!base,\\n\\t\\t\\torigin,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefv =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\ttype:type __\\n\\tname:ident _\\n\\texpr:(\\n\\t\\t\\\"=\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\tsem\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: false,\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschemaparam =\\n\\ttex:(tex __)? type:type __ name:ident\\n\\tselector:(_ ':' _ '@' g:$[a-z0-9_]+ {return g})?\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defv',\\n\\t\\t\\tisParam: true,\\n\\t\\t\\tdoc: null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\ttype,\\n\\t\\t\\tname,\\n\\t\\t\\tselector,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n \\ndefun =\\n\\tdoc:(documentation __)?\\n\\ttex:(tex __)?\\n\\tsealed:('sealed' __)?\\n\\trettype:type __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\texpr:(\\n\\t\\t\\\"{\\\" _\\n\\t\\texpr:expr0 _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return expr}\\n\\t\\t/ sem {return null}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defun',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\tsealed: !!sealed,\\n\\t\\t\\trettype,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndefschema =\\n\\tdoc:(documentation __)?\\n\\tannotations: (a:annotation __ {return a})*\\n\\tschemaType:('axiom' / 'theorem' / 'schema') __\\n\\tname:ident _\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defschemaparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defschemaparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\tusing:(\\n\\t\\t'using' __\\n\\t\\tx:(\\n\\t\\t\\thead:ident _\\n\\t\\t\\ttail:(',' _ n:ident _ {return n})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)\\n\\t\\t{return x}\\n\\t)?\\n\\t\\\"{\\\" _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t\\\"}\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'defschema',\\n\\t\\t\\tdoc: doc ? doc[0] : null,\\n\\t\\t\\tannotations,\\n\\t\\t\\tschemaType,\\n\\t\\t\\tname,\\n\\t\\t\\tparams,\\n\\t\\t\\tusing: using || [],\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// var[...]\\n// foo(...)[...]\\n// foo[...][...]\\n// (metaexpr)[...]\\n// schema(?, ...)[...]\\nreduction =\\n\\tleftargs:(\\n\\t\\ta:metaexpr_internal_2 {return [a]}\\n\\t\\t/ \\\"[\\\" _\\n\\t\\tb:(\\n\\t\\t\\thead:metaexpr _\\n\\t\\t\\ttail:(\\\";\\\" _ e:metaexpr _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\"]\\\"\\n\\t\\t{return b || []}\\n\\t)\\n\\tright:(\\n\\t\\t_ '>' _\\n\\t\\tsubject:(\\n\\t\\t\\tschemacall\\n\\t\\t\\t/ var\\n\\t\\t\\t/ \\\"(\\\" _\\n\\t\\t\\te:metaexpr _\\n\\t\\t\\t\\\")\\\"\\n\\t\\t\\t{return e}\\n\\t\\t)\\n\\t\\targs:(\\n\\t\\t\\t_ \\\"(\\\" _\\n\\t\\t\\ta:(\\n\\t\\t\\t\\thead:('?' {return null} / expr0) _\\n\\t\\t\\t\\ttail:(\\\",\\\" _ e:('?' {return null} / expr0) _ {return e})*\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)?\\n\\t\\t\\t\\\")\\\"\\n\\t\\t\\t{return a || []}\\n\\t\\t)?\\n\\t\\tas_:(\\n\\t\\t\\t__ 'as' __\\n\\t\\t\\tm:metaexpr_internal_2\\n\\t\\t\\t{return m}\\n\\t\\t)?\\n\\t\\t{return {subject, args, as_: as_ || null};}\\n\\t)+\\n\\t{\\n\\t\\tvar ret = {\\n\\t\\t\\t_type: 'reduction',\\n\\t\\t\\tsubject: right[0].subject,\\n\\t\\t\\targs: right[0].args,\\n\\t\\t\\tleftargs: leftargs,\\n\\t\\t\\tas: right[0].as_,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\n\\t\\tfor (var i = 1; i < right.length; i++) {\\n\\t\\t\\tret = {\\n\\t\\t\\t\\t_type: 'reduction',\\n\\t\\t\\t\\tsubject: right[i].subject,\\n\\t\\t\\t\\targs: right[i].args,\\n\\t\\t\\t\\tleftargs: [ret],\\n\\t\\t\\t\\tas: right[i].as_,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn ret;\\n\\t}\\n\\n// var(...)\\n// (metaexpr)(...)\\nschemacall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemacall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// forall(f, g)\\n// (expr0)(f, g)\\nfuncall =\\n\\tschema:(\\n\\t\\tvar\\n\\t\\t/ \\\"(\\\" _\\n\\t\\te:expr0 _\\n\\t\\t\\\")\\\"\\n\\t\\t{return e}\\n\\t) _\\n\\targs:(\\n\\t\\t\\\"(\\\" _\\n\\t\\ta:(\\n\\t\\t\\thead:expr0 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:expr0 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\"\\n\\t\\t{return a || []}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funcall',\\n\\t\\t\\tschema,\\n\\t\\t\\targs,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => expr0\\n// (T t) => { expr0 }\\nfunexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\texpr:(\\n\\t\\texpr0\\n\\t\\t/ \\\"{\\\" _ e:expr0 _ \\\"}\\\" {return e}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'funexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\n// (T t) => metaexpr_internal_1\\n// (T t) => { $foo = ...; metaexpr }\\nschemaexpr =\\n\\tparams:(\\n\\t\\t\\\"(\\\" _\\n\\t\\tp:(\\n\\t\\t\\thead:defparam _\\n\\t\\t\\ttail:(\\\",\\\" _ tv:defparam _ {return tv})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)?\\n\\t\\t\\\")\\\" _\\n\\t\\t{return p || []}\\n\\t)\\n\\t\\\"=>\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_1\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'schemaexpr',\\n\\t\\t\\tparams,\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\texpr: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ntee =\\n\\tleft:(\\n\\t\\tl:(\\n\\t\\t\\thead:metaexpr_internal_1 _\\n\\t\\t\\ttail:(\\\",\\\" _ e:metaexpr_internal_1 _ {return e})*\\n\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t)? {return l || []}\\n\\t)\\n\\t\\\"|-\\\" _\\n\\tfoo:(\\n\\t\\texpr:metaexpr_internal_2\\n\\t\\t{return {defdollars: [], expr}}\\n\\t\\t/ \\\"{\\\" _\\n\\t\\tdefdollars: (d:defdollar _ {return d})* _\\n\\t\\texpr:metaexpr _\\n\\t\\t\\\"}\\\"\\n\\t\\t{return {defdollars, expr}}\\n\\t)\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'tee',\\n\\t\\t\\tdef$s: foo.defdollars,\\n\\t\\t\\tleft,\\n\\t\\t\\tright: foo.expr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nwith =\\n\\t'with' _ '(' _\\n\\ttex:(tex __)?\\n\\ttype:type __\\n\\tvarname:ident _\\n\\t\\\"=\\\" _\\n\\tvarexpr:expr0 _\\n\\t')' _ '{' _\\n\\tdefdollars: (d:defdollar _ {return d})* _\\n\\texpr:metaexpr _\\n\\t'}'\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'with',\\n\\t\\t\\twith: {\\n\\t\\t\\t\\t_type: 'defv',\\n\\t\\t\\t\\tisParam: false,\\n\\t\\t\\t\\tdoc: null,\\n\\t\\t\\t\\ttex: tex ? tex[0] : null,\\n\\t\\t\\t\\tsealed: false,\\n\\t\\t\\t\\ttype,\\n\\t\\t\\t\\tname: varname,\\n\\t\\t\\t\\texpr: varexpr,\\n\\t\\t\\t\\tlocation: location()\\n\\t\\t\\t},\\n\\t\\t\\tdef$s: defdollars,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nmetaexpr =\\n\\tmetaexpr_internal_3\\n\\nmetaexpr_internal_3 =\\n\\treduction\\n\\t/ metaexpr_internal_2\\n\\nmetaexpr_internal_2 =\\n\\ttee\\n\\t/ metaexpr_internal_1\\n\\n/*\\n * The following should hold:\\n *\\n * - `schemacall` should precede `var`.\\n *\\n */\\nmetaexpr_internal_1 =\\n\\tschemacall\\n\\t/ var\\n\\t/ schemaexpr\\n\\t/ with\\n\\t/ \\\"(\\\" _ e:metaexpr _ \\\")\\\" {return e}\\n\\nexpr0 =\\n\\tfuncall\\n\\t/ funexpr\\n\\t/ var\\n\\t/ \\\"(\\\" _ e:expr0 _ \\\")\\\" {return e}\\n\\ndefdollar =\\n\\tname:dollar_ident _\\n\\t'=' _\\n\\texpr:metaexpr _\\n\\tsem\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'def$',\\n\\t\\t\\tname,\\n\\t\\t\\texpr,\\n\\t\\t\\tlocation: location()\\n\\t\\t};\\n\\t}\\n\\ntype =\\n\\tstype\\n\\t/ ftype\\n\\nstype =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: false,\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nftype =\\n\\t\\\"[\\\" _\\n\\tfrom:(\\n\\t\\ttype:type {return [type]}\\n\\t\\t/ (\\n\\t\\t\\ttt:(\\n\\t\\t\\t\\t\\\"(\\\" _\\n\\t\\t\\t\\thead: type\\n\\t\\t\\t\\ttail:(_ \\\",\\\" _ t:type {return t})*\\n\\t\\t\\t\\t_ \\\")\\\"\\n\\t\\t\\t\\t{return [head].concat(tail)}\\n\\t\\t\\t)\\n\\t\\t\\t{return tt}\\n\\t\\t)\\n\\t) _\\n\\t\\\"->\\\" _\\n\\tto:type _\\n\\t\\\"]\\\"\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'type',\\n\\t\\t\\tftype: true,\\n\\t\\t\\tfrom,\\n\\t\\t\\tto,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nvar =\\n\\tat_var\\n\\t/ dollar_var\\n\\t/ plain_var\\n\\nat_var =\\n\\tname:at_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '@',\\n\\t\\t\\tname: name.slice(1),\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\ndollar_var =\\n\\tname:dollar_ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: '$',\\n\\t\\t\\tname: name,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nplain_var =\\n\\tname:ident\\n\\t{\\n\\t\\treturn {\\n\\t\\t\\t_type: 'var',\\n\\t\\t\\ttype: 'normal',\\n\\t\\t\\tname,\\n\\t\\t\\tlocation: location()\\n\\t\\t}\\n\\t}\\n\\nkeyword =\\n\\t'as'\\n\\t/ 'axiom'\\n\\t/ 'base'\\n\\t/ 'import'\\n\\t/ 'schema'\\n\\t/ 'sealed'\\n\\t/ 'type'\\n\\t/ 'using'\\n\\t/ 'with'\\n\\nannotation =\\n\\t'@discouraged'\\n\\t/ '@deprecated'\\n\\nident =\\n\\t$(!(keyword ![a-zA-Z0-9_]) [a-zA-Z0-9_]+)\\n\\nat_ident =\\n\\t$('@' [a-zA-Z0-9_]+)\\n\\ndollar_ident =\\n\\t$('$' [a-zA-Z0-9_]+)\\n\\ndocumentation =\\n\\t'\\\"' b:$(!'\\\"' a:. {return a})* '\\\"' {\\n\\t\\treturn b.replace(/\\\\r\\\\n|\\\\r/g, '\\\\n');\\n\\t}\\n\\ntex =\\n\\t'$' b:$(!'$' a:. {return a})* '$' {\\n\\t\\treturn b.replace(/\\\\r\\\\n|\\\\r/g, '\\\\n');\\n\\t}\\n\\ncomment =\\n\\t\\\"//\\\" (!newline .)*\\n\\t/ \\\"/*\\\" (!\\\"*/\\\" .)* \\\"*/\\\"\\n\\nnewline =\\n\\t\\\"\\\\r\\\\n\\\" / \\\"\\\\r\\\" / \\\"\\\\n\\\"\\n\\n// optional whitespace\\n_ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)*\\n\\n// mandatory whitespace\\n__ =\\n\\t([ \\\\t\\\\n\\\\r] / comment)+\\n\\nsem =\\n\\t\\\";\\\"\";","import PegInterface from './PegInterface';\nimport { EvaluableObject, ImportOrLineObject } from './PegInterfaceDefinitions';\nimport ProofExplorer from './ProofExplorer';\nimport Scope from './Scope';\n\ninterface LoaderReturnType {\n\tfileUri?: string;\n\tcode: string;\n}\n\ntype LoaderType = (packageName: string) => (LoaderReturnType | Promise<LoaderReturnType>);\n\nexport default class Program {\n\t\n\tpublic scope: Scope;\n\tpublic readonly parser;\n\tpublic readonly scopeMap: Map<string, Scope> = new Map();\n\n\t/**\n\t * A temporary list used by {@link loadModuleInternal} method.\n\t * \n\t * This is the list of filenames of the files with a temporary mark during a\n\t * depth-first topological sort. Node that the file is considered to be\n\t * marked with a permanent mark if {@code this.scopeMap} has the filename.\n\t * \n\t * See https://en.wikipedia.org/wiki/Topological_sorting#Depth-first_search.\n\t */\n\tprivate loadingModules: string[];\n\t\n\tconstructor (parser) {\n\t\tif (!parser) throw Error('no');\n\t\tthis.parser = parser;\n\t}\n\n\tpublic async loadModule(filename: string, loader: LoaderType): Promise<Scope> {\n\t\tthis.loadingModules = [];\n\t\treturn this.scope = await this.loadModuleInternal(filename, loader);\n\t}\n\n\tprivate async loadModuleInternal(filename: string, loader: LoaderType): Promise<Scope> {\n\t\t// the file has a permanent mark\n\t\tif (this.scopeMap.has(filename)) {\n\t\t\treturn this.scopeMap.get(filename);\n\t\t}\n\n\t\tvar loadingModuleIndex = this.loadingModules.indexOf(filename);\n\n\t\t// the file has a temporary mark\n\t\tif (loadingModuleIndex >= 0) {\n\t\t\tif (loadingModuleIndex == this.loadingModules.length - 1) {\n\t\t\t\tthrow Error(`Cannot self import (${filename})`);\n\t\t\t}\n\n\t\t\tvar cycle = this.loadingModules.slice(loadingModuleIndex).concat(filename);\n\n\t\t\tthrow Error(`Circular import detected (${cycle.join(' -> ')}). Sadly, circular import is currently not supported.`);\n\t\t}\n\n\t\t// mark the file with a temporary mark\n\t\tthis.loadingModules.push(filename);\n\n\t\tvar {fileUri, code} = await loader(filename);\n\n\t\tvar scope = new Scope(fileUri, null);\n\t\tvar parsed = this.parser.parse(code);\n\n\t\tawait this.feed(parsed, scope, loader);\n\n\t\t// remove temporary mark\n\t\tif (this.loadingModules.pop() != filename) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\t// mark the file with a permanent mark\n\t\tthis.scopeMap.set(filename, scope);\n\t\treturn scope;\n\t}\n\n\tpublic async feed(lines: ImportOrLineObject[], scope: Scope=this.scope, loader: LoaderType) {\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tvar line = lines[i];\n\t\t\t\n\t\t\tswitch (line._type) {\n\t\t\t\tcase 'import':\n\t\t\t\t\tvar scope2 = await this.loadModuleInternal(line.filename, loader);\n\t\t\t\t\tscope.importMap.set(line.filename, scope2);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'typedef':\n\t\t\t\t\tvar type = PegInterface.type(line, scope);\n\n\t\t\t\t\tif (scope.hasType(type.name)) {\n\t\t\t\t\t\tthrow scope.error(`Type ${type.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addType(type);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defv':\n\t\t\t\t\tvar variable = PegInterface.variable(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(variable.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${variable.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addVariable(variable);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defun':\n\t\t\t\t\tvar fun = PegInterface.fun(line, scope);\n\n\t\t\t\t\tif (scope.hasVariable(fun.name)) {\n\t\t\t\t\t\tthrow scope.error(`Definition ${fun.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addFun(fun);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'defschema':\n\t\t\t\t\tvar schema = PegInterface.schema(line, scope, null);\n\n\t\t\t\t\tif (scope.hasSchema(schema.name)) {\n\t\t\t\t\t\tthrow scope.error(`Schema ${schema.name} has already been declared`);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addSchema(schema);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic evaluate(line: EvaluableObject) {\n\t\tvar scope = new Scope('<repl>', this.scope);\n\n\t\tswitch (line._type) {\n\t\t\tcase 'typedef':\n\t\t\t\treturn PegInterface.type(line, scope);\n\t\t\tcase 'defv':\n\t\t\t\treturn PegInterface.variable(line, scope);\n\t\t\tcase 'defun':\n\t\t\t\treturn PegInterface.fun(line, scope);\n\t\t\tcase 'defschema':\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PegInterface.schema(line, scope, null);\n\t\t\tcase 'tee':\n\t\t\t\treturn PegInterface.tee(line, scope, null);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PegInterface.reduction(line, scope, null);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PegInterface.schemacall(line, scope, null);\n\t\t\tcase 'var':\n\t\t\t\treturn PegInterface.metavar(line, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error(`Unknown line type ${(line as any)._type}`);\n\t\t}\n\t}\n\n\tpublic getProofExplorer(name: string, ktx) {\n\t\treturn ProofExplorer.get(this.scope, name, ktx);\n\t}\n}","/*\n * PEG.js의 출력과 적절한 클래스 사이를 잇는 인터페이스.\n * PEG.js의 출력은 여기에서만 처리해야 한다.\n */\n\nimport ExecutionContext from './ExecutionContext';\nimport $Variable from './nodes/$Variable';\nimport Expr0 from './nodes/Expr0';\nimport Fun from './nodes/Fun';\nimport Funcall from './nodes/Funcall';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Parameter from './nodes/Parameter';\nimport Reduction from './nodes/Reduction';\nimport Schema, { SchemaType } from './nodes/Schema';\nimport Tee from './nodes/Tee';\nimport Variable from './nodes/Variable';\nimport With from './nodes/With';\nimport { Def$Object, DefschemaObject, DefunObject, DefvObject, Expr0Object, FuncallObject, FunexprObject, MetaexprObject, ReductionObject, SchemacallObject, SchemaexprObject, StypeObject, TeeObject, TypedefObject, TypeObject, VarObject, WithObject } from './PegInterfaceDefinitions';\nimport Scope, { NestedTypeInput } from './Scope';\n\nfunction typeObjToString(obj: TypeObject): string {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) return (obj as StypeObject).name;\n\treturn '[' + obj.from.map(typeObjToString).join(', ') + ' -> '\n\t\t\t+ typeObjToString(obj.to) + ']';\n}\n\n/*\n * Scope#getType이나 Scope#hasType 등의 입력 형태로 바꾼다.\n * st\t\t\t\t\t\t-> 'st'\n * [cls -> st]\t\t\t\t-> ['cls', 'st']\n * [(cls, cls) -> st]\t\t-> ['cls', 'cls', 'st']\n * [[cls -> st] -> st]\t\t-> [['cls', 'st'], 'st']\n */\nfunction typeObjToNestedArr(obj: TypeObject): NestedTypeInput {\n\tif (obj._type != 'type')\n\t\tthrow Error('Assertion failed');\n\n\tif (!obj.ftype) {\n\t\tobj = obj as StypeObject;\n\n\t\tif (!obj.name)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.name;\n\t} else {\n\t\tif (!obj.from || !obj.to)\n\t\t\tthrow Error('Assertion failed');\n\n\t\treturn obj.from.map(typeObjToNestedArr).concat(\n\t\t\t[typeObjToNestedArr(obj.to)]\n\t\t);\n\t}\n}\n\nfunction varObjToString(obj: VarObject): string {\n\tswitch (obj.type) {\n\t\tcase '@':\n\t\t\treturn `@${obj.name}`;\n\t\tcase '$':\n\t\t\treturn `${obj.name}`;\n\t\tcase 'normal':\n\t\t\treturn `${obj.name}`;\n\t\tdefault:\n\t\t\tthrow Error(`Unknown type ${obj.type}`);\n\t}\n}\n\nexport default class PI {\n\tpublic static type(obj: TypedefObject, parentScope: Scope): ObjectType {\n\t\tif (obj._type != 'typedef')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope: Scope = parentScope.extend('type', obj.name, obj.location);\n\n\t\tvar origin: ObjectType = obj.origin ? scope.getType(typeObjToNestedArr(obj.origin)) : null;\n\n\t\tvar name: string = obj.name;\n\t\tvar doc: string = obj.doc;\n\t\tvar base: boolean = obj.base;\n\n\t\tif (base && origin) {\n\t\t\tthrow scope.error('Base type should not be an alias');\n\t\t}\n\n\t\tif (origin) {\n\t\t\treturn new ObjectType({\n\t\t\t\tname,\n\t\t\t\tdoc,\n\t\t\t\tbase,\n\t\t\t\torigin\n\t\t\t});\n\t\t}\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: false,\n\t\t\tname,\n\t\t\tdoc,\n\t\t\tbase\n\t\t});\n\t}\n\n\tpublic static variable(obj: DefvObject | VarObject, parentScope: Scope): Variable | Fun {\n\t\tif (!['defv', 'var'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('variable', obj.name, obj.location);\n\n\t\tif (obj._type == 'var') {\n\t\t\tif (obj.type != 'normal') {\n\t\t\t\tthrow scope.error(`Variable type ${obj.type} not allowed`);\n\t\t\t}\n\n\t\t\tif (!scope.hasVariable(obj.name))\n\t\t\t\tthrow scope.error(`Undefined identifier ${varObjToString(obj)}`);\n\t\t\treturn scope.getVariable(obj.name);\n\t\t}\n\n\t\tif (!scope.hasType(typeObjToNestedArr(obj.type)))\n\t\t\tthrow scope.error(`Type ${typeObjToString(obj.type)} is not defined`);\n\n\t\tvar type = scope.getType(typeObjToNestedArr(obj.type));\n\n\t\tvar expr = obj.expr ? PI.expr0(obj.expr, scope) : null;\n\n\t\tif (obj.isParam) {\n\t\t\treturn new Parameter({\n\t\t\t\tdoc: obj.doc,\n\t\t\t\ttex: obj.tex,\n\t\t\t\ttype,\n\t\t\t\tname: obj.name,\n\t\t\t\tselector: obj.selector || null\n\t\t\t}, scope.trace);\n\t\t}\n\n\t\treturn new Variable({\n\t\t\tdoc: obj.doc,\n\t\t\ttex: obj.tex,\n\t\t\tsealed: !!obj.sealed,\n\t\t\ttype,\n\t\t\tname: obj.name,\n\t\t\texpr: expr || null\n\t\t}, scope.trace);\n\t}\n\n\tpublic static fun(obj: DefunObject | FunexprObject, parentScope: Scope): ObjectFun {\n\t\tif (obj._type != 'defun' && obj._type != 'funexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('fun', obj._type == 'defun' ? obj.name : '<anonymous>', obj.location);\n\n\t\tvar doc = null,\n\t\t\ttex = null,\n\t\t\tsealed = false,\n\t\t\trettype: ObjectType = null,\n\t\t\tname = null,\n\t\t\texpr = null;\n\n\t\tif (obj._type == 'defun') {\n\t\t\tdoc = obj.doc;\n\t\t\ttex = obj.tex;\n\t\t\tsealed = obj.sealed;\n\t\t\t\n\t\t\tif (!scope.hasType(typeObjToNestedArr(obj.rettype))) {\n\t\t\t\tthrow scope.error(`Type ${typeObjToString(obj.rettype)} is not defined`);\n\t\t\t}\n\n\t\t\trettype = scope.getType(typeObjToNestedArr(obj.rettype));\n\t\t\tname = obj.name;\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tif (obj.expr) {\n\t\t\texpr = PI.expr0(obj.expr, scope);\n\t\t}\n\n\t\treturn new ObjectFun({annotations: [], sealed, rettype, name, params, expr, doc, tex}, scope.trace);\n\t}\n\n\tpublic static funcall(obj: FuncallObject, parentScope: Scope): Funcall {\n\t\tif (obj._type != 'funcall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('funcall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.expr0(obj.schema, scope);\n\n\t\tvar args = obj.args.map(arg => {\n\t\t\treturn PI.expr0(arg, scope);\n\t\t});\n\n\t\treturn new Funcall({fun, args}, scope.trace);\n\t}\n\n\tpublic static metaexpr(obj: MetaexprObject, parentScope: Scope, context: ExecutionContext): Metaexpr {\n\t\tif (!['tee', 'reduction', 'schemacall', 'schemaexpr', 'var', 'with'].includes(obj._type)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'tee':\n\t\t\t\treturn PI.tee(obj, scope, context);\n\t\t\tcase 'reduction':\n\t\t\t\treturn PI.reduction(obj, scope, context);\n\t\t\tcase 'schemacall':\n\t\t\t\treturn PI.schemacall(obj, scope, context);\n\t\t\tcase 'schemaexpr':\n\t\t\t\treturn PI.schema(obj, scope, context);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.metavar(obj, scope);\n\t\t\tcase 'with':\n\t\t\t\treturn PI.with(obj, scope, context);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static expr0(obj: Expr0Object, parentScope: Scope): Expr0 {\n\t\tif (!['funcall', 'funexpr', 'var'].includes(obj._type)) {\n\t\t\tconsole.log(obj);\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj._type) {\n\t\t\tcase 'funcall':\n\t\t\t\treturn PI.funcall(obj, scope);\n\t\t\tcase 'funexpr':\n\t\t\t\treturn PI.fun(obj, scope);\n\t\t\tcase 'var':\n\t\t\t\treturn PI.variable(obj, scope);\n\t\t\tdefault:\n\t\t\t\tthrow Error('wut');\n\t\t}\n\t}\n\n\tpublic static metavar(obj: VarObject, parentScope: Scope): Metaexpr {\n\t\tif (obj._type != 'var')\n\t\t\tthrow Error('Assertion failed');\n\n\t\t// don't extend scope\n\t\tvar scope = parentScope;\n\n\t\tswitch (obj.type) {\n\t\t\tcase '@':\n\t\t\t\tif (obj.name.match(/^h[0-9]+$/)) {\n\t\t\t\t\tvar hypnum = Number(obj.name.slice(1)) - 1;\n\t\t\t\t\tif (hypnum >= scope.hypotheses.length) {\n\t\t\t\t\t\tthrow scope.error(`Hypothesis #${hypnum + 1} not found`);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn scope.hypotheses[hypnum];\n\t\t\t\t}\n\n\t\t\t\tthrow scope.error(`Unknown selector query ${varObjToString(obj)}`);\n\t\t\tcase '$':\n\t\t\t\tif (!scope.has$(obj.name)) {\n\t\t\t\t\tthrow scope.error(`${varObjToString(obj)} is not defined`);\n\t\t\t\t}\n\n\t\t\t\treturn scope.get$(obj.name);\n\t\t\tcase 'normal':\n\t\t\t\tif (!scope.hasSchema(obj.name))\n\t\t\t\t\tthrow scope.error(`Schema ${varObjToString(obj)} is not defined`);\n\n\t\t\t\treturn scope.getSchema(obj.name);\n\t\t\tdefault:\n\t\t\t\tthrow scope.error(`Unknown type ${obj.type}`);\n\t\t}\n\t}\n\n\tpublic static with(obj: WithObject, parentScope: Scope, context: ExecutionContext): With {\n\t\tif (obj._type != 'with') {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tvar scope = parentScope.extend('with', null, obj.location);\n\n\t\tvar tv = PI.variable(obj.with, scope);\n\n\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\n\t\tif (!(tv instanceof Variable)) {\n\t\t\tthrow Error('Something\\'s wrong');\n\t\t}\n\n\t\tscope.addVariable(tv);\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new With({\n\t\t\tvariable: tv,\n\t\t\tdef$s,\n\t\t\texpr\n\t\t}, scope.trace);\n\t}\n\n\tpublic static tee(obj: TeeObject, parentScope: Scope, context: ExecutionContext): Tee {\n\t\tif (obj._type != 'tee')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('tee', null, obj.location);\n\n\t\tvar left = obj.left.map(o => PI.metaexpr(o, scope, context));\n\n\t\tvar scopeRight = scope.extend('tee.right', null, obj.right.location);\n\t\tleft.forEach(l => scopeRight.hypotheses.push(l));\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scopeRight, context);\n\n\t\t\tif (scopeRight.hasOwn$($v.name)) {\n\t\t\t\tthrow scopeRight.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scopeRight.add$($v);\n\t\t});\n\n\t\tvar right = PI.metaexpr(obj.right, scopeRight, context);\n\n\t\treturn new Tee({left, def$s, right}, scope.trace);\n\t}\n\n\tpublic static def$(obj: Def$Object, parentScope: Scope, context: ExecutionContext): $Variable {\n\t\tif (obj._type != 'def$')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar scope = parentScope.extend('def$', obj.name, obj.location);\n\t\t\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new $Variable({name: obj.name, expr}, scope.trace);\n\t}\n\n\tpublic static schema(obj: DefschemaObject | SchemaexprObject, parentScope: Scope, oldContext: ExecutionContext): Schema {\n\t\tif (obj._type != 'defschema' && obj._type != 'schemaexpr')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tvar name = obj._type == 'defschema' ? obj.name : null;\n\n\t\tvar scope = parentScope.extend('schema', name, obj.location);\n\n\t\tvar schemaType: SchemaType = 'schema',\n\t\t\tdoc: string = null,\n\t\t\tannotations: string[] = [],\n\t\t\tcontext = oldContext;\n\n\t\tif (obj._type == 'defschema') {\n\t\t\tschemaType = obj.schemaType;\n\t\t\tdoc = obj.doc;\n\t\t\tannotations = obj.annotations;\n\n\t\t\tif (oldContext) {\n\t\t\t\tconsole.log(oldContext);\n\t\t\t\tthrow Error('duh');\n\t\t\t}\n\n\t\t\tvar using: (Variable | ObjectFun)[] = obj.using.map(name => {\n\t\t\t\tif (!scope.hasVariable(name)) {\n\t\t\t\t\tthrow scope.error(`Variable ${name} is not defined`);\n\t\t\t\t}\n\n\t\t\t\tvar fun = scope.getVariable(name);\n\n\t\t\t\tif (!fun.expr) {\n\t\t\t\t\tthrow scope.error(`${name} is not a macro`);\n\t\t\t\t}\n\n\t\t\t\treturn fun;\n\t\t\t});\n\n\t\t\tcontext = new ExecutionContext(using);\n\t\t}\n\n\t\tvar params = obj.params.map(tvo => {\n\t\t\tvar tv = PI.variable(tvo, scope);\n\n\t\t\tif (scope.hasOwnVariable(tv.name))\n\t\t\t\tthrow scope.error(`Parameter ${tv.name} has already been declared`);\n\t\t\t\n\t\t\tif (!(tv instanceof Parameter)) {\n\t\t\t\tthrow Error('Something\\'s wrong');\n\t\t\t}\n\n\t\t\tscope.addVariable(tv);\n\t\t\treturn tv;\n\t\t});\n\n\t\tvar def$s = obj.def$s.map($ => {\n\t\t\tvar $v = PI.def$($, scope, context);\n\n\t\t\tif (scope.hasOwn$($v.name)) {\n\t\t\t\tthrow scope.error(`${$.name} has already been declared`);\n\t\t\t}\n\n\t\t\treturn scope.add$($v);\n\t\t});\n\n\t\tvar expr = PI.metaexpr(obj.expr, scope, context);\n\n\t\treturn new Schema({doc, tex: null, annotations, schemaType, name, params, context, def$s, expr}, scope.trace);\n\t}\n\n\tpublic static schemacall(obj: SchemacallObject, parentScope: Scope, context: ExecutionContext): Funcall {\n\t\tif (obj._type != 'schemacall')\n\t\t\tthrow Error('Assertion failed');\n\n\t\tvar scope = parentScope.extend('schemacall', 'name' in obj.schema ? obj.schema.name : null, obj.location);\n\n\t\tvar fun = PI.metaexpr(obj.schema, scope, context);\n\n\t\tvar args = obj.args.map(obj => {\n\t\t\treturn PI.expr0(obj, scope);\n\t\t});\n\n\t\treturn new Funcall({\n\t\t\tfun,\n\t\t\targs\n\t\t}, scope.trace);\n\t}\n\n\tpublic static reduction(obj: ReductionObject, parentScope: Scope, context: ExecutionContext): Reduction {\n\t\tif (obj._type != 'reduction')\n\t\t\tthrow Error('Assertion failed');\n\t\t\n\t\tif (!context) {\n\t\t\tthrow Error('duh');\n\t\t}\n\n\t\tvar scope = parentScope.extend('reduction', 'name' in obj.subject ? obj.subject.name : null, obj.location);\n\n\t\tvar subject = PI.metaexpr(obj.subject, scope, context);\n\n\t\tvar args = !obj.args\n\t\t\t? null\n\t\t\t: obj.args.map(g => {\n\t\t\t\treturn g && PI.expr0(g, scope);\n\t\t\t});\n\n\t\tvar leftargs = obj.leftargs.map(obj => {\n\t\t\treturn PI.metaexpr(obj, scope, context);\n\t\t});\n\n\t\tvar as = obj.as && PI.metaexpr(obj.as, scope, context);\n\n\t\treturn new Reduction({\n\t\t\tsubject,\n\t\t\targs,\n\t\t\tleftargs,\n\t\t\tas\n\t\t}, context, scope.trace);\n\t}\n}","import ObjectFun from \"./nodes/ObjectFun\";\nimport Variable from \"./nodes/Variable\";\n\nexport default class ExecutionContext {\n\n\tpublic readonly usingList: (Variable | ObjectFun)[];\n\n\tconstructor (usingList?: (Variable | ObjectFun)[]) {\n\t\tthis.usingList = usingList || [];\n\t}\n\n\tpublic canUse(fun: Variable | ObjectFun) {\n\t\treturn this.usingList.includes(fun);\n\t}\n}","import Counter from '../Counter';\nimport ExecutionContext from '../ExecutionContext';\nimport { ProofType } from '../ProofType';\nimport StackTrace from '../StackTrace';\nimport Expr0 from './Expr0';\nimport Fun from './Fun';\nimport Funcall from './Funcall';\nimport Metaexpr, { EqualsPriority } from './Metaexpr';\nimport MetaType from './MetaType';\nimport { isNameable } from './Nameable';\nimport Node, { Precedence } from './Node';\nimport ObjectType from './ObjectType';\nimport Tee from './Tee';\nimport Variable from './Variable';\n\ninterface ReductionArgumentType {\n\tsubject: Metaexpr;\n\targs: (Expr0 | null)[];\n\tleftargs: Metaexpr[];\n\tas: Metaexpr;\n}\n\nexport default class Reduction extends Metaexpr {\n\t\n\tpublic readonly subject: Metaexpr;\n\tpublic readonly args: (Expr0 | null)[];\n\tpublic readonly leftargs: Metaexpr[];\n\tpublic readonly reduced: Metaexpr;\n\n\tconstructor ({subject, args, leftargs, as}: ReductionArgumentType, context: ExecutionContext, trace: StackTrace) {\n\t\tif (args) {\n\t\t\tlet resolvedType = subject.type.resolve() as ObjectType | MetaType,\n\t\t\t\tparamTypes = resolvedType.from,\n\t\t\t\targTypes = args.map(e => e && e.type);\n\n\t\t\tif (paramTypes.length != argTypes.length)\n\t\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${argTypes.length}`, trace);\n\n\t\t\tfor (var i = 0; i < paramTypes.length; i++) {\n\t\t\t\tif (argTypes[i] && !paramTypes[i].equals(argTypes[i])) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} has illegal argument type (expected ${paramTypes[i]}): ${argTypes[i]}`, trace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (subject instanceof Fun) {\n\t\t\tsubject.params.forEach((p, i) => {\n\t\t\t\tif (!(args && args[i]) && !p.selector) {\n\t\t\t\t\tthrow Node.error(`Argument #${i + 1} could not be guessed`, trace);\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tvar derefs = subject.params.map((p, i) => {\n\t\t\t\tif (args && args[i]) return args[i];\n\n\t\t\t\tvar tee = (subject as Fun).expr.expandMeta(false) as Tee;\n\t\n\t\t\t\treturn Reduction.guess(\n\t\t\t\t\tp.selector,\n\t\t\t\t\ttee.left, leftargs,\n\t\t\t\t\ttee.right, as,\n\t\t\t\t\tcontext, trace\n\t\t\t\t);\n\t\t\t});\n\t\n\t\t\tsubject = new Funcall({\n\t\t\t\tfun: subject,\n\t\t\t\targs: derefs,\n\t\t\t}, trace);\n\t\t} else if (args) {\n\t\t\tthrow Node.error('Something\\'s wrong', trace);\n\t\t}\n\t\n\t\tif (!(subject.type instanceof MetaType && subject.type.isSimple))\n\t\t\tthrow Node.error('Subject is not reducible', trace);\n\t\n\t\tif (!(leftargs instanceof Array)\n\t\t\t\t|| leftargs.map(e => e instanceof Node).some(e => !e))\n\t\t\tthrow Node.error('Assertion failed', trace);\n\n\t\tvar paramTypes = subject.type.left,\n\t\t\tleftargTypes = leftargs.map(e => e.type);\n\n\t\tif (paramTypes.length != leftargTypes.length)\n\t\t\tthrow Node.error(`Invalid number of arguments (expected ${paramTypes.length}): ${leftargTypes.length}`, trace);\n\n\t\tfor (let i = 0; i < paramTypes.length; i++) {\n\t\t\tif (!paramTypes[i].equals(leftargTypes[i]))\n\t\t\t\tthrow Node.error(`Illegal argument type (expected ${paramTypes[i]}): ${leftargTypes[i]}`, trace);\n\t\t}\n\n\t\tsuper(trace, null, null, subject.type.right);\n\n\t\tthis.subject = subject;\n\t\tthis.leftargs = leftargs;\n\n\t\tvar tee = subject.expandMeta(true);\n\n\t\tif (!(tee instanceof Tee)) {\n\t\t\tthrow Node.error('Assertion failed', trace);\n\t\t}\n\n\t\tvar leftargsExpanded = leftargs.map(arg => {\n\t\t\treturn arg.expandMeta(true);\n\t\t});\n\n\t\tfor (let i = 0; i < tee.left.length; i++) {\n\t\t\tif (!tee.left[i].equals(leftargsExpanded[i], context)) {\n\t\t\t\tthrow Node.error(`LHS #${i + 1} failed to match:\n\n--- EXPECTED ---\n${tee.left[i].expandMeta(true)}\n----------------\n\n--- RECEIVED ---\n${leftargs[i].expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\t\t}\n\n\t\tif (as) {\n\t\t\tif (!tee.right.equals(as, context)) {\n\t\t\t\tthrow Node.error(`RHS failed to match:\n\n--- EXPECTED ---\n${tee.right.expandMeta(true)}\n----------------\n\n--- RECEIVED (from [as ...]) ---\n${as.expandMeta(true)}\n----------------`, trace);\n\t\t\t}\n\n\t\t\tthis.reduced = as;\n\t\t} else {\n\t\t\tthis.reduced = tee.right;\n\t\t}\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.subject.isProved(hypotheses)\n\t\t\t&& this.leftargs.every(l => l.isProved(hypotheses));\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\treturn this.reduced.substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\treturn this.reduced.expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(): EqualsPriority {\n\t\treturn EqualsPriority.FIVE;\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\treturn this.reduced.equals(obj, context);\n\t}\n\n\tpublic static guess(\n\t\t\tselector: string,\n\t\t\tleft: Metaexpr[], leftargs: Metaexpr[],\n\t\t\tright: Metaexpr, as: Metaexpr,\n\t\t\tcontext: ExecutionContext, trace: StackTrace): Metaexpr {\n\t\t\n\t\tif (selector.length == 0) throw Node.error('wut', trace);\n\n\t\tvar parameter: Metaexpr, argument: Metaexpr;\n\n\t\tif (selector[0] == 'r') {\n\t\t\tif (!as) {\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: expected output is not given`, trace);\n\t\t\t}\n\n\t\t\tparameter = right;\n\t\t\targument = as;\n\t\t} else {\n\t\t\tvar n = Number(selector[0]);\n\n\t\t\tif (!(1 <= n && n <= leftargs.length))\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent index out of range`, trace);\n\n\t\t\tparameter = left[n - 1];\n\t\t\targument = leftargs[n - 1];\n\t\t}\n\n\t\treturn (function recurse(\n\t\t\t\tptr: number,\n\t\t\t\tparameter: Metaexpr, argument: Metaexpr): Metaexpr {\n\t\t\t\n\t\t\targument = argument.expandMeta(true);\n\t\t\t\n\t\t\tif (selector.length <= ptr) return argument;\n\n\t\t\tif (/^[0-9]$/.test(selector[ptr])) {\n\t\t\t\tvar n = Number(selector[ptr]);\n\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\tif (parameter.left.length != argument.left.length) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent length mismatch`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(1 <= n && n <= argument.left.length)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}: antecedent index out of range`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn recurse(ptr + 1, parameter.left[n - 1], argument.left[n - 1]);\n\t\t\t\t}\n\n\t\t\t\twhile (true) {\n\t\t\t\t\twhile (argument instanceof Variable && argument.expr) {\n\t\t\t\t\t\targument = argument.expr;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!(parameter instanceof Funcall && argument instanceof Funcall)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (parameter.fun.equals(argument.fun, context)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!argument.isExpandable(context)) {\n\t\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t\t\t}\n\n\t\t\t\t\targument = argument.expandOnce(context);\n\t\t\t\t}\n\n\t\t\t\tif (!(1 <= n && n <= argument.args.length))\n\t\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\n\t\t\t\treturn recurse(ptr + 1, parameter.args[n - 1], argument.args[n - 1]);\n\t\t\t} else if (selector[ptr] == 'r') {\n\t\t\t\tif (parameter instanceof Tee && argument instanceof Tee) {\n\t\t\t\t\treturn recurse(ptr + 1, parameter.right, argument.right);\n\t\t\t\t}\n\n\t\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t\t}\n\n\t\t\tthrow Node.error(`Cannot dereference @${selector}`, trace);\n\t\t})(1, parameter, argument);\n\t}\n\n\tprotected getProofInternal(\n\t\t\thypnumMap: Map<Metaexpr, number>,\n\t\t\t$Map: Map<Metaexpr, number | [number, number]>,\n\t\t\tctr: Counter): ProofType[] {\n\t\t\n\t\tvar leftarglines: ProofType[] = [];\n\t\tvar leftargnums: (number | [number, number])[] = this.leftargs.map(l => {\n\t\t\tif (hypnumMap.has(l)) return hypnumMap.get(l);\n\t\t\tif ($Map.has(l)) return $Map.get(l);\n\n\t\t\tvar lines = l.getProof(hypnumMap, $Map, ctr);\n\t\t\tleftarglines = leftarglines.concat(lines);\n\t\t\treturn lines[lines.length - 1].ctr;\n\t\t});\n\t\t\n\t\tvar args: Expr0[] = null;\n\t\tvar subjectlines: ProofType[] = [];\n\t\tvar subjectnum = hypnumMap.get(this.subject)\n\t\t\t|| $Map.get(this.subject)\n\t\t\t|| (this.subject instanceof Funcall && $Map.has(this.subject.fun)\n\t\t\t\t? (args = this.subject.args, $Map.get(this.subject.fun))\n\t\t\t\t: false)\n\t\t\t|| ((s => s instanceof Fun && s.name\n\t\t\t\t\t|| s instanceof Funcall && isNameable(s.fun) && s.fun.name)(this.subject)\n\t\t\t\t? this.subject\n\t\t\t\t: (subjectlines = this.subject.getProof(hypnumMap, $Map, ctr))[subjectlines.length-1].ctr);\n\n\t\treturn [\n\t\t\t...leftarglines,\n\t\t\t...subjectlines,\n\t\t\t{\n\t\t\t\t_type: 'E',\n\t\t\t\tctr: ctr.next(),\n\t\t\t\tsubject: subjectnum,\n\t\t\t\targs,\n\t\t\t\tleftargs: leftargnums,\n\t\t\t\treduced: this.reduced\n\t\t\t}\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tvar leftargs: any = this.leftargs.map(arg => {\n\t\t\treturn arg.toIndentedString(indent + 1);\n\t\t});\n\t\n\t\tif (leftargs.join('').length <= 50) {\n\t\t\tleftargs = this.leftargs.map(arg => {\n\t\t\t\treturn arg.toIndentedString(indent);\n\t\t\t});\n\t\n\t\t\tleftargs = leftargs.join(', ');\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\tleftargs,\n\t\t\t\t']'\n\t\t\t].join('');\n\t\t}\n\t\telse {\n\t\t\tleftargs = leftargs.join(',\\n' + '\\t'.repeat(indent + 1));\n\t\n\t\t\treturn [\n\t\t\t\t`${this.subject.toIndentedString(indent)}[`,\n\t\t\t\t'\\t' + leftargs,\n\t\t\t\t']'\n\t\t\t].join('\\n' + '\\t'.repeat(indent));\n\t\t}\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\treturn `${this.subject.toTeXString(false)}[${this.leftargs.map(e => e.toTeXString(Node.PREC_COMMA)).join(', ')}]`;\n\t}\n}","import Counter from \"../Counter\";\nimport ExecutionContext from \"../ExecutionContext\";\nimport { ProofType } from \"../ProofType\";\nimport StackTrace from \"../StackTrace\";\nimport $Variable from \"./$Variable\";\nimport Expr0 from \"./Expr0\";\nimport Metaexpr, { EqualsPriority } from \"./Metaexpr\";\nimport { Precedence } from \"./Node\";\nimport Variable from \"./Variable\";\n\ninterface WithArgumentType {\n\tvariable: Variable;\n\tdef$s: $Variable[];\n\texpr: Metaexpr;\n}\n\nexport default class With extends Metaexpr {\n\n\tpublic readonly variable: Variable;\n\tpublic readonly def$s: $Variable[];\n\tpublic readonly expr: Metaexpr;\n\n\tconstructor({variable, def$s, expr}: WithArgumentType, trace: StackTrace) {\n\t\tsuper(trace, null, null, expr.type);\n\n\t\tthis.variable = variable;\n\t\tthis.def$s = def$s;\n\t\tthis.expr = expr;\n\t}\n\n\tpublic substitute(map: Map<Variable, Expr0>): Metaexpr {\n\t\tif (map.has(this.variable))\n\t\t\tthrow Error('Parameter collision');\n\t\t\n\t\tmap = new Map(map);\n\n\t\treturn this.expandMeta(false).substitute(map);\n\t}\n\n\tprotected expandMetaInternal(andFuncalls: boolean): Metaexpr {\n\t\tvar map = new Map<Variable, Expr0>();\n\t\tmap.set(this.variable, this.variable.expr);\n\n\t\treturn this.expr.substitute(map).expandMeta(andFuncalls);\n\t}\n\n\tprotected getEqualsPriority(context: ExecutionContext): EqualsPriority {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected equalsInternal(obj: Metaexpr, context: ExecutionContext): boolean {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tprotected isProvedInternal(hypotheses: Metaexpr[]): boolean {\n\t\treturn this.expr.isProved(hypotheses);\n\t}\n\n\tprotected getProofInternal(hypnumMap: Map<Metaexpr, number>, $Map: Map<Metaexpr, number | [number, number]>, ctr: Counter, root?: boolean): ProofType[] {\n\n\t\t$Map = new Map($Map);\n\n\t\tvar def: ProofType = {\n\t\t\t_type: 'def',\n\t\t\tctr: ctr.next(),\n\t\t\tvar: this.variable\n\t\t};\n\n\t\tvar $lines = this.def$s.map($ => {\n\t\t\tvar lines = $.expr.getProof(hypnumMap, $Map, ctr);\n\t\t\tvar $num = lines[lines.length - 1].ctr;\n\t\t\t$Map.set($, $num);\n\t\t\treturn lines;\n\t\t}).flat(1);\n\n\t\treturn [\n\t\t\tdef,\n\t\t\t...$lines,\n\t\t\t...this.expr.getProof(hypnumMap, $Map, ctr)\n\t\t];\n\t}\n\n\tpublic toIndentedString(indent: number, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n\n\tpublic toTeXString(prec?: Precedence, root?: boolean): string {\n\t\tthrow new Error(\"Method not implemented.\");\n\t}\n}","import Counter from \"./Counter\";\nimport Metaexpr from \"./nodes/Metaexpr\";\nimport Schema from \"./nodes/Schema\";\nimport Variable from \"./nodes/Variable\";\nimport { ProofType } from \"./ProofType\";\nimport Scope from \"./Scope\";\n\nexport default class ProofExplorer {\n\tpublic static get(scope: Scope, name: string, ktx): string {\n\t\tvar DIAMOND = '&#x25C7;',\n\t\t\tDOWN = '&#x25BC;';\n\t\t// var UP = '&#x25B2;';\n\t\t\n\t\tif (!scope.hasSchema(name)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\t\n\t\tvar expr = scope.getSchema(name);\n\n\t\tif (!(expr instanceof Schema)) {\n\t\t\tthrow Error('wut');\n\t\t}\n\n\t\tfunction getHtmlLine(ctr: string | number, left: any[], h1: string, h2: string | string[], options?) {\n\t\t\tvar padding = left.length;\n\n\t\t\tvar {bbb=false, rrb=false} = options || {};\n\t\n\t\t\tvar htmlLeft = left.map((e, i, a) => `<td class=\"${rrb && i == a.length - 1 ? 'rrb' : 'brb'}\">${e.map(f => ktx(f.toTeXStringWithId(true))).join(', ')}</td>`).join('');\n\n\t\t\tfor (var i = 0; i < left.length; i++)\n\t\t\t\twhile(left[i].length) left[i].pop();\n\t\n\t\t\treturn `<tr><th>${ctr}</th>${htmlLeft}<td ${bbb ? 'class=\"bbb\" ' : ''}colspan=\"${ncols-padding}\">${h1}</td>${h2 instanceof Array ? h2.map(e => `<td>${e}</td>`).join('') : `<td colspan=\"2\">${h2}</td>`}</tr>`;\n\t\t}\n\n\t\tfunction exprToHtml(expr: number | [number, number] | Metaexpr, expand?: boolean): string {\n\t\t\tif (typeof expr == 'number') return `<b>${expr}</b>`;\n\t\t\tif (expr instanceof Array) return `<b>${expr[0]}&ndash;${expr[1]}</b>`;\n\t\t\tif (expand) return ktx(expr.expandMeta(true).toTeXString(true, true));\n\t\t\t\n\t\t\treturn ktx(expr.toTeXString(true, true));\n\t\t}\n\n\t\tvar tree = expr.getProof(new Map(), new Map(), new Counter(), true);\n\n\t\tvar innertree: ProofType[] = (tree[0] as any).$lines.concat((tree[0] as any).lines);\n\n\t\tvar ncols = (function recurse(tree: ProofType[]): number {\n\t\t\treturn Math.max(...tree.map(t => {\n\t\t\t\tswitch (t._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.$lines),\n\t\t\t\t\t\t\trecurse(t.lines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\t\trecurse(t.leftlines),\n\t\t\t\t\t\t\trecurse(t.rightlines)\n\t\t\t\t\t\t) + 1;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}));\n\t\t})(innertree);\n\n\t\tvar html = '<table class=\"explorer\">';\n\t\thtml += `<tr><th>#</th><th colspan=\"${ncols}\">expr</th><th colspan=\"2\">rule</th></tr>`;\n\t\t\n\t\thtml += (function tree2html(lines: ProofType[], left: Variable[][]) {\n\t\t\treturn lines.map(line => {\n\t\t\t\tswitch (line._type) {\n\t\t\t\t\tcase 'V':\n\t\t\t\t\t\t// getHtmlLine 함수가 이 배열을 조작하기 때문에\n\t\t\t\t\t\t// shallow copy 해야 한다.\n\t\t\t\t\t\tvar params = line.params.slice();\n\t\t\t\t\t\treturn tree2html(line.$lines, left.concat([params]))\n\t\t\t\t\t\t\t+ tree2html(line.lines, left.concat([params]));\n\t\t\t\t\tcase 'T':\n\t\t\t\t\t\tvar newleft = left.concat([[]]);\n\n\t\t\t\t\t\tvar ret = '';\n\n\t\t\t\t\t\tif (line.leftlines.length == 0) {\n\t\t\t\t\t\t\tvar emptyleft = Array(left.length + 1).fill([]);\n\n\t\t\t\t\t\t\tret += getHtmlLine(\n\t\t\t\t\t\t\t\t'', emptyleft, '', '', {bbb: true, rrb: true}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret += line.leftlines.map((line, i, a) => {\n\t\t\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\t\t\tnewleft,\n\t\t\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t\t\t'assumption',\n\t\t\t\t\t\t\t\t\t{bbb: i == a.length - 1, rrb: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}).join('');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret += tree2html(\n\t\t\t\t\t\t\tline.rightlines,\n\t\t\t\t\t\t\tnewleft\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn ret;\n\t\t\t\t\tcase '?':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'???'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'H':\n\t\t\t\t\t\tthrow Error('no');\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.num)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RS':\n\t\t\t\t\tcase 'RCX':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, exprToHtml(line.expr)]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'RC':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t[DIAMOND, `${exprToHtml(line.schema)} (${line.args.map(a => exprToHtml(a)).join(', ')})`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.reduced, true),\n\t\t\t\t\t\t\t[DOWN, `${exprToHtml(line.subject)}${line.args ? ' (' + line.args.map(a => exprToHtml(a)).join(', ') + ')' : ''} [${line.leftargs.map(a => exprToHtml(a)).join(', ')}]`]\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'NP':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.expr, true),\n\t\t\t\t\t\t\t'<b class=\"red\">not proved</b>'\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 'def':\n\t\t\t\t\t\treturn getHtmlLine(\n\t\t\t\t\t\t\tline.ctr,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\texprToHtml(line.var),\n\t\t\t\t\t\t\t'definition'\n\t\t\t\t\t\t);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow Error(`Unknown type ${(line as any)._type}`);\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t})(innertree, []);\n\t\t\n\t\thtml += '</table>';\n\t\n\t\treturn html;\n\t}\n}","export default class Counter {\n\n\tprivate n: number;\n\n\tconstructor (start: number=0) {\n\t\tthis.n = start;\n\t}\n\n\tpublic peek(): number {\n\t\treturn this.n;\n\t}\n\n\tpublic next(): number {\n\t\treturn ++this.n;\n\t}\n}","import $Variable from './nodes/$Variable';\nimport Fun from './nodes/Fun';\nimport Metaexpr from './nodes/Metaexpr';\nimport ObjectFun from './nodes/ObjectFun';\nimport ObjectType from './nodes/ObjectType';\nimport Schema from './nodes/Schema';\nimport Variable from './nodes/Variable';\nimport { LocationObject } from './PegInterfaceDefinitions';\nimport StackTrace from './StackTrace';\n\nexport type NestedTypeInput = string | NestedTypeInput[];\n\n/**\n * 변수 영역(scope).\n * 구문 분석 과정에서 name resolution을 할 때에만 사용해야 한다.\n */\nexport default class Scope {\n\tpublic readonly importMap: Map<string, Scope> = new Map();\n\n\tpublic readonly typedefMap: Map<string, ObjectType> = new Map();\n\tpublic readonly defMap: Map<string, Variable | ObjectFun> = new Map();\n\tpublic readonly schemaMap: Map<string, Schema> = new Map();\n\tpublic readonly $Map: Map<string, $Variable> = new Map();\n\tpublic readonly hypotheses: Metaexpr[] = [];\n\n\tpublic readonly parent: Scope;\n\tpublic readonly root: Scope;\n\n\tpublic readonly trace: StackTrace;\n\tpublic baseType: ObjectType;\n\n\tpublic readonly fileUri: string;\n\n\tconstructor (fileUri: string, parent: Scope, trace?: StackTrace) {\n\t\tthis.fileUri = fileUri;\n\n\t\tthis.parent = parent;\n\t\tthis.root = parent ? parent.root : this;\n\n\t\tif (trace && !(trace instanceof StackTrace)) {\n\t\t\tthrow Error('Assertion failed');\n\t\t}\n\n\t\tthis.trace = trace || new StackTrace(fileUri);\n\n\t\tthis.baseType = parent ? parent.baseType : null;\n\t}\n\n\tpublic extend(type: string, name: string, location: LocationObject): Scope {\n\t\tvar child = new Scope(this.fileUri, this, this.trace.extend({type, name, location}));\n\t\tthis.hypotheses.forEach(h => child.hypotheses.push(h));\n\t\treturn child;\n\t}\n\n\tpublic error(message: string): Error {\n\t\treturn this.trace.error(message);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasOwnType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasOwnType(e);\n\t\t}).every(e => e);\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic hasType(name: NestedTypeInput): boolean {\n\t\tif (typeof name == 'string') {\n\t\t\treturn this.hasOwnType(name)\n\t\t\t\t|| (!!this.parent && this.parent.hasType(name));\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\treturn name.map(e => {\n\t\t\treturn this.hasType(e);\n\t\t}).every(e => e);\n\t}\n\n\tpublic addType(type: ObjectType): ObjectType {\n\t\tif (!(type instanceof ObjectType))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!type.name)\n\t\t\tthrow this.error('Something\\'s wrong');\n\n\t\tif (this.hasOwnType(type.name))\n\t\t\tthrow this.error(`Type ${type.name} has already been declared`);\n\n\t\tif (type.isBaseType) {\n\t\t\tif (this.baseType) {\n\t\t\t\tthrow this.error('A base type already exists');\n\t\t\t}\n\n\t\t\t(function broadcast(scope: Scope) {\n\t\t\t\tscope.baseType = type;\n\t\t\t\tif (scope.parent) broadcast(scope.parent);\n\t\t\t})(this);\n\t\t}\n\n\t\tthis.typedefMap.set(type.name, type);\n\t\treturn type;\n\t}\n\n\t/*\n\t * Possible input values:\n\t * 'st'\t\t\t\t\t\t-> st\n\t * ['cls', 'st']\t\t\t-> [cls -> st]\n\t * ['cls', 'cls', 'st']\t\t-> [(cls, cls) -> st]\n\t * [['cls', 'st'], 'st']\t-> [[cls -> st] -> st]\n\t */\n\tpublic getType(name: NestedTypeInput): ObjectType {\n\t\tif (typeof name == 'string') {\n\t\t\tif (!this.hasType(name))\n\t\t\t\tthrow this.error(`Type ${name} is not defined`);\n\n\t\t\treturn this.typedefMap.has(name)\n\t\t\t\t? this.typedefMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getType(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasType(name)\n\t\t\t\t\t})[0].getType(name);\n\t\t}\n\n\t\tif (!(name instanceof Array))\n\t\t\tthrow this.error('Argument is malformed');\n\n\t\tif (name.length < 2)\n\t\t\tthrow this.error('Illegal array length');\n\n\t\tvar from = name.slice(0, name.length - 1).map(e => {\n\t\t\treturn this.getType(e);\n\t\t});\n\n\t\tvar to = this.getType(name[name.length - 1]);\n\n\t\treturn new ObjectType({\n\t\t\tfunctional: true,\n\t\t\tfrom,\n\t\t\tto\n\t\t});\n\t}\n\n\tpublic hasOwnVariable(name: string): boolean {\n\t\treturn this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnVariable(name));\n\t}\n\n\tpublic hasVariable(name: string): boolean {\n\t\treturn this.hasOwnVariable(name)\n\t\t\t|| (!!this.parent && this.parent.hasVariable(name));\n\t}\n\n\tpublic addVariable(variable: Variable | Fun): Variable | Fun {\n\t\tif (!(variable instanceof Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnVariable(variable.name))\n\t\t\tthrow this.error(`Definition ${variable.name} has already been declared`);\n\n\t\tthis.defMap.set(variable.name, variable);\n\t\treturn variable;\n\t}\n\n\tpublic addFun(fun: ObjectFun): ObjectFun {\n\t\tif (!(fun instanceof ObjectFun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (!fun.name)\n\t\t\tthrow this.error('Cannot add anonymous fun to scope');\n\n\t\tif (this.hasOwnVariable(fun.name))\n\t\t\tthrow this.error(`Definition ${fun.name} has already been declared`);\n\n\t\tthis.defMap.set(fun.name, fun);\n\t\treturn fun;\n\t}\n\n\tpublic getVariable(name: string): Variable | ObjectFun {\n\t\tif (!this.hasVariable(name))\n\t\t\tthrow this.error(`Definition ${name} is not defined`);\n\n\t\treturn this.defMap.has(name)\n\t\t\t? this.defMap.get(name)\n\t\t\t: (!!this.parent && this.parent.getVariable(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.hasVariable(name)\n\t\t\t\t})[0].getVariable(name);\n\t}\n\n\tpublic hasOwnSchema(name: string): boolean {\n\t\treturn this.schemaMap.has(name) || this.defMap.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwnSchema(name));\n\t}\n\n\tpublic hasSchema(name: string): boolean {\n\t\treturn this.hasOwnSchema(name)\n\t\t\t|| (!!this.parent && this.parent.hasSchema(name));\n\t}\n\n\tpublic addSchema(schema: Schema): Schema {\n\t\tif (!(schema instanceof Fun))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwnSchema(schema.name))\n\t\t\tthrow this.error(`Schema ${schema.name} has already been declared`);\n\n\t\tthis.schemaMap.set(schema.name, schema);\n\t\treturn schema;\n\t}\n\n\tpublic getSchema(name: string): Variable | Fun {\n\t\tif (!this.hasSchema(name))\n\t\t\tthrow this.error(`Schema ${name} is not defined`);\n\n\t\treturn this.schemaMap.has(name)\n\t\t\t? this.schemaMap.get(name)\n\t\t\t: this.defMap.has(name)\n\t\t\t\t? this.defMap.get(name)\n\t\t\t\t: (!!this.parent && this.parent.getSchema(name))\n\t\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\t\treturn s.hasSchema(name)\n\t\t\t\t\t})[0].getSchema(name);\n\t}\n\n\tpublic hasOwn$(name: string): boolean {\n\t\treturn this.$Map.has(name)\n\t\t\t|| [...this.importMap.values()].some(s => s.hasOwn$(name));\n\t}\n\n\tpublic has$(name: string): boolean {\n\t\treturn this.hasOwn$(name)\n\t\t\t|| (!!this.parent && this.parent.has$(name));\n\t}\n\n\tpublic add$($: $Variable): $Variable {\n\t\tif (!($ instanceof $Variable))\n\t\t\tthrow this.error('Illegal argument type');\n\n\t\tif (this.hasOwn$($.name))\n\t\t\tthrow this.error(`$ variable ${$.name} has already been declared`);\n\n\t\tthis.$Map.set($.name, $);\n\t\treturn $;\n\t}\n\n\tpublic get$(name: string): $Variable {\n\t\tif (!this.has$(name))\n\t\t\tthrow this.error(`$ variable ${name} is not defined`);\n\n\t\treturn this.$Map.has(name)\n\t\t\t? this.$Map.get(name)\n\t\t\t: (!!this.parent && this.parent.get$(name))\n\t\t\t\t|| [...this.importMap.values()].filter(s => {\n\t\t\t\t\treturn s.has$(name)\n\t\t\t\t})[0].get$(name);\n\t}\n}","import { LocationObject } from \"./PegInterfaceDefinitions\";\n\ninterface StackTraceElement {\n\ttype: string;\n\tname: string;\n\tlocation: LocationObject;\n}\n\nexport default class StackTrace {\n\n\tpublic readonly fileUri: string;\n\tpublic readonly stack: StackTraceElement[];\n\n\tconstructor (fileUri: string, stack?: StackTraceElement[]) {\n\t\tthis.fileUri = fileUri;\n\t\tthis.stack = stack || [];\n\t}\n\n\tpublic extend(element: StackTraceElement): StackTrace {\n\t\treturn new StackTrace(this.fileUri, [element].concat(this.stack));\n\t}\n\n\tpublic error(message: string) {\n\t\tvar fileUri = this.fileUri || '<unknown>';\n\n\t\treturn new Error(\n\t\t\tmessage\n\t\t\t+ '\\n\\tat '\n\t\t\t+ (\n\t\t\t\tthis.stack.length\n\t\t\t\t\t? this.stack.map(({type, name, location}) => {\n\t\t\t\t\t\treturn `${type} ${name || '<anonymous>'} (${fileUri}:${location.start.line}:${location.start.column})`;\n\t\t\t\t\t}).join('\\n\\tat ')\n\t\t\t\t\t: `<root> (${fileUri}:1:1)`\n\t\t\t)\n\t\t);\n\t}\n}"],"sourceRoot":""}