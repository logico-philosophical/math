import propositional;
import predicate;
import set;

"순서쌍(ordered pair). Kuratowski의 정의이다."
$\left(#1<<,>>#2\right)$
sealed cls pair(cls x, cls y) {
	doubleton(singleton(x), doubleton(x, y))
}

theorem pair_set_i(cls x: @11, cls y: @21) using pair {
	is_set(x), is_set(y) |- {
		[
			@h1 > singleton_set_i;
			[@h1; @h2] > doubleton_set_i
		] > doubleton_set_i as is_set(pair(x, y))
	}
}

theorem pair_set_e1(cls x: @111, cls y: @112) using pair {
	is_set(pair(x, y)) |- {
		@h1 > doubleton_set_e1 > singleton_set_e
	}
}

theorem pair_set_e2(cls x: @111, cls y: @112) using pair {
	is_set(pair(x, y)) |- {
		@h1 > doubleton_set_e2 > doubleton_set_e2
	}
}

theorem pair_set_flip(cls x: @111, cls y: @112) {
	is_set(pair(x, y)) |- {
		[
			@h1 > pair_set_e2;
			@h1 > pair_set_e1
		] > pair_set_i
	}
}

theorem pair_eq_i(cls x: @11, cls y: @21, cls u: @12, cls v: @22) using pair {
	eq(x, u), eq(y, v) |- {
		[
			@h1 > singleton_eq_i;
			[@h1; @h2] > doubleton_eq_i
		] > doubleton_eq_i as eq(pair(x, y), pair(u, v))
	}
}

"`[Pinter]` 정리 1.30."
theorem pair_eq_e(cls x: @11, cls y: @21, cls u: @31, cls v: @41) using pair {
	is_set(x), is_set(y), is_set(u), is_set(v), eq(pair(x, y), pair(u, v)) |- {
		[
			[
				@h1 > singleton_set_i;
				[@h1; @h2] > doubleton_set_i;
				@h3 > singleton_set_i;
				[@h3; @h4] > doubleton_set_i;
				@h5
			] > doubleton_eq_e;
			A(eq(singleton(x), singleton(u)), eq(doubleton(x, y), doubleton(u, v))) |- {
				[
					[
						@h1; @h2; @h3; @h4;
						@h6 > Ae2
					] > doubleton_eq_e;
					id(A(eq(x, u), eq(y, v))) > cp;
					A(eq(x, v), eq(y, u)) |- {
						[
							[
								@h1; @h3;
								@h6 > Ae1
							] > singleton_eq_e;
							[
								[
									[
										@h1; @h3;
										@h6 > Ae1
									] > singleton_eq_e;
									@h7 > Ae2 > eq_symmetric
								] > eq_transitive > eq_symmetric;
								@h7 > Ae1
							] > eq_transitive
						] > Ai
					} > cp
				] > Oe
			} > cp;
			A(eq(singleton(x), doubleton(u, v)), eq(doubleton(x, y), singleton(u))) |- {
				[
					[
						@h1;
						[
							[@h3; @h4] > doubleton_in_1(u, v);
							@h6 > Ae1
						] > in_eq_flip
					] > singleton_e > eq_symmetric;
					[
						[
							[
								@h1;
								[
									[@h3; @h4] > doubleton_in_1(u, v);
									@h6 > Ae1
								] > in_eq_flip
							] > singleton_e;
							[
								@h1;
								[
									[@h3; @h4] > doubleton_in_2(u, v);
									@h6 > Ae1
								] > in_eq_flip
							] > singleton_e > eq_symmetric
						] > eq_transitive > eq_symmetric;
						[
							@h3;
							[
								[@h1; @h2] > doubleton_in_2(x, y);
								@h6 > Ae2
							] > in_eq
						] > singleton_e > eq_symmetric
					] > eq_transitive > eq_symmetric
				] > Ai
			} > cp
		] > Oe
	}
}

theorem pair_eq_e1(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	is_set(x), is_set(y), is_set(u), is_set(v), eq(pair(x, y), pair(u, v)) |- {
		[@h1; @h2; @h3; @h4; @h5] > pair_eq_e > Ae1
	}
}

theorem pair_eq_e1_v1(cls x: @211, cls y: @212, cls u: @221, cls v: @222) {
	is_set(pair(x, y)), eq(pair(x, y), pair(u, v)) |- {
		$set_uv = [@h1; @h2] > set_is_set_1;

		$set_x = @h1 > pair_set_e1;

		$set_y = @h1 > pair_set_e2;

		$set_u = $set_uv > pair_set_e1;

		$set_v = $set_uv > pair_set_e2;

		[$set_x; $set_y; $set_u; $set_v; @h2] > pair_eq_e1
	}
}

theorem pair_eq_e1_v2(cls x: @211, cls y: @212, cls u: @221, cls v: @222) {
	is_set(pair(u, v)), eq(pair(x, y), pair(u, v)) |- {
		$set_xy = [@h1; @h2] > set_is_set_2;

		$set_x = $set_xy > pair_set_e1;

		$set_y = $set_xy > pair_set_e2;

		$set_u = @h1 > pair_set_e1;

		$set_v = @h1 > pair_set_e2;

		[$set_x; $set_y; $set_u; $set_v; @h2] > pair_eq_e1
	}
}

theorem pair_eq_e2(cls x: @11, cls y: @21, cls u: @31, cls v: @41) {
	is_set(x), is_set(y), is_set(u), is_set(v), eq(pair(x, y), pair(u, v)) |- {
		[@h1; @h2; @h3; @h4; @h5] > pair_eq_e > Ae2
	}
}

theorem pair_eq_e2_v1(cls x: @211, cls y: @212, cls u: @221, cls v: @222) {
	is_set(pair(x, y)), eq(pair(x, y), pair(u, v)) |- {
		$set_uv = [@h1; @h2] > set_is_set_1;

		$set_x = @h1 > pair_set_e1;

		$set_y = @h1 > pair_set_e2;

		$set_u = $set_uv > pair_set_e1;

		$set_v = $set_uv > pair_set_e2;

		[$set_x; $set_y; $set_u; $set_v; @h2] > pair_eq_e2
	}
}

theorem pair_eq_e2_v2(cls x: @211, cls y: @212, cls u: @221, cls v: @222) {
	is_set(pair(u, v)), eq(pair(x, y), pair(u, v)) |- {
		$set_xy = [@h1; @h2] > set_is_set_2;

		$set_x = $set_xy > pair_set_e1;

		$set_y = $set_xy > pair_set_e2;

		$set_u = @h1 > pair_set_e1;

		$set_v = @h1 > pair_set_e2;

		[$set_x; $set_y; $set_u; $set_v; @h2] > pair_eq_e2
	}
}

"순서쌍을 위한 setbuilder. 즉 [$\{(a, b): f(a, b)\}]이다."
$\left\{<<:>>#1\right\}$
cls setbuilder_pair(pr2 f) {
	setbuilder((cls z) => X2((cls a, cls b) => A(eq(z, pair(a, b)), f(a, b))))
}

theorem setbuilder_pair_i(pr2 f: @r21, cls a: @111, cls b: @112) {
	is_set(pair(a, b)), f(a, b) |- {
		[
			@h1;
			[eq_reflexive(pair(a, b)); @h2] > Ai > Xi2((cls c, cls d) => A(eq(pair(a, b), pair(c, d)), f(c, d)), a, b)
		] > setbuilder_i as in(pair(a, b), setbuilder_pair(f))
	}
}

theorem setbuilder_pair_e(pr2 f: @121, cls a: @111, cls b: @112) {
	in(pair(a, b), setbuilder_pair(f)) |- {
		$set_a_b = @h1 > is_set_i;

		[
			@h1 > setbuilder_e as X2((cls c, cls d) => A(eq(pair(a, b), pair(c, d)), f(c, d)));
			(cls c, cls d) => {
				eq(pair(a, b), pair(c, d)), f(c, d) |- {
					[
						[$set_a_b; @h2] > pair_eq_e1_v1;
						[$set_a_b; @h2] > pair_eq_e2_v1;
						@h3
					] > ax_indiscernible2_m2(f, ?, ?, ?, ?)
				} > cp2
			} > Ui2
		] > mpX2_alt(?, f(a, b))
	}
}

"순서쌍을 위한 setbuilder2. 즉 [$\{f(a, b): g(a, b)\}]이다."
$\left\{#1<<:>>#2\right\}$
cls setbuilder2_pair(fun2 f, pr2 g) {
	setbuilder((cls z) => X2((cls a, cls b) => A(eq(z, f(a, b)), g(a, b))))
}

"곱집합(cartesian product)."
$!<prec=300>#1<<\times>>#2$
cls cartesian($A$ cls a, $B$ cls b) {
	setbuilder_pair((cls x, cls y) => A(in(x, a), in(y, b)))
}

theorem cartesian_in_i($A$ cls a: @12, $B$ cls b: @22, cls x: @11, cls y: @21) {
	in(x, a), in(y, b) |- {
		[
			[
				@h1 > is_set_i;
				@h2 > is_set_i
			] > pair_set_i;
			[
				eq_reflexive(pair(x, y));
				[@h1; @h2] > Ai
			] > Ai > Xi2((cls u, cls v) => A(eq(pair(x, y), pair(u, v)), A(in(u, a), in(v, b))), x, y)
		] > setbuilder_i as in(pair(x, y), cartesian(a, b))
	}
}

theorem cartesian_in_e($A$ cls a: @121, $B$ cls b: @122, cls x: @111, cls y: @112) {
	in(pair(x, y), cartesian(a, b)) |- {
		$set_pair_xy = @h1 > is_set_i;

		$set_x = $set_pair_xy > pair_set_e1;

		$set_y = $set_pair_xy > pair_set_e2;

		[
			@h1 > setbuilder_e((cls z) => X2((cls u, cls v) => A(eq(z, pair(u, v)), A(in(u, a), in(v, b)))), ?);
			(cls u, cls v) => {
				A(eq(pair(x, y), pair(u, v)), A(in(u, a), in(v, b))) |- {
					$foo = @h2 > Ae2;

					$u_in_a = $foo > Ae1;

					$v_in_b = $foo > Ae2;

					$u_is_set = $u_in_a > is_set_i;

					$v_is_set = $v_in_b > is_set_i;

					$Ae1h4 = @h2 > Ae1;

					[
						[
							[$set_x; $set_y; $u_is_set; $v_is_set; $Ae1h4] > pair_eq_e1;
							$u_in_a
						] > eq_in;
						[
							[$set_x; $set_y; $u_is_set; $v_is_set; $Ae1h4] > pair_eq_e2;
							$v_in_b
						] > eq_in
					] > Ai
				} > cp
			} > Ui2
		] > mpX2_alt(?, A(in(x, a), in(y, b)))
	}
}

theorem cartesian_in_e1($A$ cls a: @121, $B$ cls b: @122, cls x: @111, cls y: @112) {
	in(pair(x, y), cartesian(a, b)) |- {
		@h1 > cartesian_in_e > Ae1
	}
}

theorem cartesian_in_e2($A$ cls a: @121, $B$ cls b: @122, cls x: @111, cls y: @112) {
	in(pair(x, y), cartesian(a, b)) |- {
		@h1 > cartesian_in_e > Ae2
	}
}

"[$A] 및 [$B] 상에서의 이항관계. [$A\times B]의 부분집합이다. heterogeneous relation이라고도 한다."
$\left(<<\operatorname{relation}>>{#1}\text{ over }{#2}\text{ and }{#3}\right)$
st is_rel_over_sets($R$ cls r, $A$ cls a, $B$ cls b) {
	subseteq(r, cartesian(a, b))
}

"[$A] 상에서의 이항관계. [$A\times A]의 부분집합이다. homogeneous relation 또는 endorelation이라고도 한다."
$\left(<<\operatorname{relation}>>{#1}\text{ over }{#2}\right)$
st is_rel_over_set($R$ cls r, $A$ cls a) {
	is_rel_over_sets(r, a, a)
}

"정의역과 치역에 관한 조건이 없는 이항관계. [$V\times V]의 부분집합이다. `[Pinter]`에서 graph라 부르는 것이다."
$\left(<<\operatorname{relation}>> #1\right)$
st is_rel($R$ cls r) {
	is_rel_over_set(r, universe)
}

$\left(#2\mathrel{#1}#3\right){}^{\scriptscriptstyle<<\dag>>}$
st rel_call(${\sim}$ cls r, cls a, cls b) {
	in(pair(a, b), r)
}

"이항관계의 정의역(domain)."
$!<prec=200><<\operatorname{dom}>>#1$
cls rel_dom($R$ cls r) {
	setbuilder((cls x) => X((cls y) => in(pair(x, y), r)))
}

theorem rel_dom_in_i($R$ cls r: @12, cls x: @111, cls y: @112) {
	in(pair(x, y), r) |- {
		$set_x = @h1 > is_set_i > pair_set_e1;

		[
			$set_x;
			@h1 > Xi((cls y) => in(pair(x, y), r), y)
		] > setbuilder_i as in(x, rel_dom(r))
	}
}

"이항관계의 치역(image)."
$!<prec=200><<\operatorname{im}>>#1$
cls rel_im($R$ cls r) {
	setbuilder((cls y) => X((cls x) => in(pair(x, y), r)))
}

"어떤 집합에 의한 상(image)."
$#1{\left[#2\right]}{}^{<<\scriptscriptstyle\dag>>}$
cls rel_im_set($R$ cls r, $A$ cls a) {
	setbuilder((cls y) => Xin(a, (cls x) => in(pair(x, y), r)))
}

theorem rel_im_set_eq_i($R$ cls r, $A$ cls a: @11, $B$ cls b: @12) {
	eq(a, b) |- {
		(cls y) => { @h1 > Xin_eq(?, ?, (cls x) => in(pair(x, y), r)) } > Ui > setbuilder_eq_i((cls y) => Xin(a, (cls x) => in(pair(x, y), r)), (cls y) => Xin(b, (cls x) => in(pair(x, y), r))) as eq(rel_im_set(r, a), rel_im_set(r, b))
	}
}

theorem rel_im_set_subseteq_i($R$ cls r, $A$ cls a: @11, $B$ cls b: @12) {
	subseteq(a, b) |- {
		(cls y) => {
			in(y, rel_im_set(r, a)) |- {
				[
					@h2 > is_set_i;
					[
						@h1;
						@h2 > setbuilder_e
					] > Xin_supset
				] > setbuilder_i as in(y, rel_im_set(r, b))
			} > cp
		} > Ui as subseteq(rel_im_set(r, a), rel_im_set(r, b))
	}
}

theorem rel_im_set_in_i($R$ cls r: @22, $A$ cls a: @12, cls x: @11, cls y: @212) {
	in(x, a), in(pair(x, y), r) |- {
		[
			@h2 > is_set_i > pair_set_e2;
			[@h1; @h2] > Ai > Xi((cls x) => {
				A(in(x, a), in(pair(x, y), r))
			}, x)
		] > setbuilder_i as in(y, rel_im_set(r, a))
	}
}

"이항관계의 역(inverse)."
$!<prec=190>{#1}^{<<-1>>}$
sealed cls rel_inverse(cls x) {
	setbuilder_pair((cls a, cls b) => in(pair(b, a), x))
}

theorem rel_inverse_in_i(cls x: @12, cls a: @111, cls b: @112) using rel_inverse {
	in(pair(a, b), x) |- {
		[
			@h1 > is_set_i > pair_set_flip;
			@h1
		] > setbuilder_pair_i as in(pair(b, a), rel_inverse(x))
	}
}

theorem rel_inverse_in_e(cls x: @121, cls a: @111, cls b: @112) using rel_inverse {
	in(pair(a, b), rel_inverse(x)) |- {
		@h1 > setbuilder_pair_e
	}
}

theorem rel_inverse_in(cls x, cls a, cls b) {
	[
		rel_inverse_in_i(x, a, b) > cp;
		rel_inverse_in_e(x, b, a) > cp
	] > Ei
}

theorem rel_inverse_is_rel($R$ cls r: @11, $A$ cls a: @12, $B$ cls b: @13) using rel_inverse {
	is_rel_over_sets(r, a, b) |- {
		(cls z) => {
			in(z, rel_inverse(r)) |- {
				[
					@h2 > setbuilder_e;
					(cls x, cls y) => {
						eq(z, pair(x, y)), in(pair(y, x), r) |- {
							$foo = [@h4; @h1] > in_subseteq > cartesian_in_e;

							[
								@h3;
								[
									$foo > Ae2;
									$foo > Ae1
								] > cartesian_in_i
							] > eq_in
						} > cp2
					} > Ui2
				] > mpX2_alt(?, in(z, cartesian(b, a)))
			} > cp
		} > Ui as is_rel_over_sets(rel_inverse(r), b, a)
	}
}

"이항관계의 합성(composition)."
$!<prec=300>#1 <<\circ>> #2$
cls rel_composite(cls x, cls y) {
	setbuilder_pair((cls a, cls c) => X((cls b) => A(in(pair(a, b), y), in(pair(b, c), x))))
}

theorem rel_composite_in_i(cls f: @12, cls g: @22, cls x: @111, cls y: @112, cls z: @212) {
	in(pair(x, y), f), in(pair(y, z), g) |- {
		[
			[
				@h1 > is_set_i > pair_set_e1;
				@h2 > is_set_i > pair_set_e2
			] > pair_set_i;
			[@h1; @h2] > Ai > Xi((cls y) => A(in(pair(x, y), f), in(pair(y, z), g)), y)
		] > setbuilder_pair_i as in(pair(x, z), rel_composite(g, f))
	}
}

theorem rel_composite_im_set($R_1$ cls r1, $R_2$ cls r2, $A$ cls a) {
	(cls z) => {
		$c1 = in(z, rel_im_set(rel_composite(r1, r2), a)) |- {
			$X = @h1 > setbuilder_e;

			$U = (cls x) => {
				in(x, a), in(pair(x, z), rel_composite(r1, r2)) |- {
					$X = @h3
					> setbuilder_pair_e as X((cls y) => A(in(pair(x, y), r2), in(pair(y, z), r1)));

					$U = (cls y) => {
						in(pair(x, y), r2), in(pair(y, z), r1) |- {
							[
								[@h2; @h4] > rel_im_set_in_i;
								@h5
							] > rel_im_set_in_i
						} > cp2
					} > Ui;

					[$X; $U] > mpX_alt(?, in(z, rel_im_set(r1, rel_im_set(r2, a))))
				} > cp2 > curry
			} > Ui;

			[$X; $U] > mpXin_alt(?, ?, in(z, rel_im_set(r1, rel_im_set(r2, a))))
		} > cp;

		$c2 = in(z, rel_im_set(r1, rel_im_set(r2, a))) |- {
			$X = @h1 > setbuilder_e;

			$U = (cls y) => {
				in(y, rel_im_set(r2, a)), in(pair(y, z), r1) |- {
					$X = @h2 > setbuilder_e;

					$U = (cls x) => {
						in(x, a), in(pair(x, y), r2) |- {
							[
								@h4;
								[@h5; @h3] > rel_composite_in_i
							] > rel_im_set_in_i
						} > cp2 > curry
					} > Ui;

					[$X; $U] > mpXin_alt(?, ?, in(z, rel_im_set(rel_composite(r1, r2), a)))
				} > cp2 > curry
			} > Ui;

			[$X; $U] > mpXin_alt(?, ?, in(z, rel_im_set(rel_composite(r1, r2), a)))
		} > cp;

		[$c1; $c2] > Ei
	} > Ui
	> eq_i(rel_im_set(rel_composite(r1, r2), a), rel_im_set(r1, rel_im_set(r2, a)))
}

"이항관계의 제한(restriction)."
$\left(#1{<<\upharpoonright>>}_{#2}\right)$
cls rel_restrict($R$ cls r, $A$ cls a) {
	setbuilder_pair((cls x, cls y) => A(in(pair(x, y), r), in(x, a)))
}

"이항관계의 반사성(reflexivity)."
st rel_reflexive($\sim$ cls r, $A$ cls a) {
	Uin(a, (cls x) => rel_call(r, x, x))
}

"이항관계의 비반사성(irreflexivity)."
st rel_irreflexive($\sim$ cls r, $A$ cls a) {
	Uin(a, (cls x) => N(rel_call(r, x, x)))
}

"이항관계의 대칭성(symmetry)."
st rel_symmetric($\sim$ cls r, $A$ cls a) {
	Uin2(a, a, (cls x, cls y) => I(rel_call(r, x, y), rel_call(r, y, x)))
}

theorem rel_symmetric_m($\sim$ cls r: @11, $A$ cls a: @12, cls x: @21, cls y: @31) {
	rel_symmetric(r, a), in(x, a), in(y, a), rel_call(r, x, y) |- {
		[@h4; [@h1; @h2; @h3] > Uin2_e] > mp
	}
}

"이항관계의 반대칭성(antisymmetry)."
st rel_antisymmetric($\sim$ cls r, $A$ cls a) {
	Uin2(a, a, (cls x, cls y) => I(A(rel_call(r, x, y), rel_call(r, y, x)), eq(x, y)))
}

"이항관계의 비대칭성(asymmetry)."
st rel_asymmetric($\sim$ cls r, $A$ cls a) {
	Uin2(a, a, (cls x, cls y) => I(rel_call(r, x, y), N(rel_call(r, y, x))))
}

"이항관계의 추이성(transitivity)."
st rel_transitive($\sim$ cls r, $A$ cls a) {
	Uin3(a, a, a, (cls x, cls y, cls z) => {
		I(A(rel_call(r, x, y), rel_call(r, y, z)), rel_call(r, x, z))
	})
}

"이항관계의 반추이성(antitransitivity)."
st rel_antitransitive($\sim$ cls r, $A$ cls a) {
	Uin3(a, a, a, (cls x, cls y, cls z) => {
		I(A(rel_call(r, x, y), rel_call(r, y, z)), N(rel_call(r, x, z)))
	})
}

"원순서(preorder). 즉 반사적이고 추이적인 이항관계이다."
$\left(<<\operatorname{preorder}>> {#1}\text{ over }{#2}\right)$
st is_preorder($\lesssim$ cls r, $A$ cls a) {
	A(is_rel_over_set(r, a), A(rel_reflexive(r, a), rel_transitive(r, a)))
}

"동치관계(equivalence relation). 즉 대칭적인 원순서이다."
$\left(<<\operatorname{equiv.\ rel.}>> {#1}\text{ over }{#2}\right)$
st is_equiv_rel($\sim$ cls r, $A$ cls a) {
	A(is_preorder(r, a), rel_symmetric(r, a))
}

theorem equiv_rel_is_reflexive($\sim$ cls r: @11, $A$ cls a: @12) {
	is_equiv_rel(r, a) |- {
		@h1 > Ae1 > Ae2 > Ae1
	}
}

theorem equiv_rel_is_symmetric($\sim$ cls r: @11, $A$ cls a: @12) {
	is_equiv_rel(r, a) |- {
		@h1 > Ae2
	}
}

theorem equiv_rel_is_transitive($\sim$ cls r: @11, $A$ cls a: @12) {
	is_equiv_rel(r, a) |- {
		@h1 > Ae1 > Ae2 > Ae2
	}
}

"동치류(equivalence class). [$\sim]이 클래스 [$A] 상에서의 동치관계일 때, [$A]의 원소 [$x]에 대해 정의된다.

예를 들어 [$\Z_6 = \{1, 2, 3, 4, 5, 6\}] 상에서 [$a\sim b]가 [$a\equiv b\pmod 3]으로 정의될 때 [$`[1]_{\Z_6, \sim} = \{1, 4\}`]가 된다."
$\left[#1\right]_{#2,#3}^{\scriptscriptstyle<<\dag>>}$
cls equiv_cls(cls x, $A$ cls a, ${\sim}$ cls r) {
	subsetbuilder(a, (cls z) => rel_call(r, z, x))
}

theorem equiv_cls_in_i(cls x: @23, $A$ cls a: @12, $\sim$ cls r: @21, cls z: @11) {
	in(z, a), rel_call(r, z, x) |- {
		[@h1; @h2] > subsetbuilder_i as in(z, equiv_cls(x, a, r))
	}
}

theorem equiv_cls_in_i2(cls x: @21, $A$ cls a: @12, $\sim$ cls r: @11) {
	is_equiv_rel(r, a), in(x, a) |- {
		[
			@h2;
			[@h1 > equiv_rel_is_reflexive; @h2] > Uin_e
		] > equiv_cls_in_i
	}
}

theorem equiv_cls_eq_i($\sim$ cls r: @11, $A$ cls a: @12, cls x: @21, cls y: @31) {
	$foo = (cls x, cls y, $A$ cls a, $\sim$ cls r, cls z) => {
		is_equiv_rel(r, a), in(x, a), in(y, a), rel_call(r, x, y) |- {
			in(z, equiv_cls(x, a, r)) |- {
				$foo = @h5 > setbuilder_e;
				$z_in_a = $foo > Ae1;
				$z_sim_x = $foo > Ae2;

				$transitive = [
					@h1 > equiv_rel_is_transitive;
					$z_in_a; @h2; @h3
				] > Uin3_e;

				[
					$z_in_a;
					[[$z_sim_x; @h4] > Ai; $transitive] > mp
				] > equiv_cls_in_i
			} > cp
		}
	};
	
	is_equiv_rel(r, a), in(x, a), in(y, a), rel_call(r, x, y) |- {
		(cls z) => {
			$1 = [@h1; @h2; @h3; @h4] > $foo(x, y, a, r, z);
			$2 = [@h1; @h3; @h2; [@h1 > equiv_rel_is_symmetric; @h2; @h3; @h4] > rel_symmetric_m] > $foo(y, x, a, r, z);

			[$1; $2] > Ei
		} > Ui > eq_i(equiv_cls(x, a, r), equiv_cls(y, a, r))
	}
}

theorem equiv_cls_eq_e($\sim$ cls r: @11, $A$ cls a: @12, cls x: @21, cls y: @31) {
	is_equiv_rel(r, a), in(x, a), in(y, a), eq(equiv_cls(x, a, r), equiv_cls(y, a, r)) |- {
		[[@h1; @h2] > equiv_cls_in_i2; @h4] > in_eq > subsetbuilder_e
	}
}

"몫집합(quotient set).

예를 들어 [$\Z_6 = \{1, 2, 3, 4, 5, 6\}] 상에서 [$a\sim b]가 [$a\equiv b\pmod 3]으로 정의될 때 [$\Z_6/{\sim} = \{\{1, 4\}, \{2, 5\}, \{3, 6\}\}]이 된다."
$\left(#1<</>>#2\right)$
cls quotient_set($A$ cls a, ${\sim}$ cls r) {
	setbuilder2((cls x) => equiv_cls(x, a, r), is_in(a))
}

"부분 순서(partial order). strict partial order와 구분하여 non-strict partial order라고도 한다. 즉 반대칭적인 원순서이다. 보통 [$\leq] 등으로 표기한다."
$\left(<<\operatorname{partial\ ord.}>> {#1}\text{ over }{#2}\right)$
st is_partial_order($R$ cls r, $A$ cls a) {
	A(is_preorder(r, a), rel_antisymmetric(r, a))
}

"비반사적 부분 순서(strict partial order). 보통 [$<] 등으로 표기하는 이항관계이다. 이때 비대칭성이 비반사성을 함의함에 주목하라."
$\left(<<\operatorname{strict\ partial\ ord.}>> {#1}\text{ over }{#2}\right)$
st is_strict_order($R$ cls r, $A$ cls a) {
	A(is_rel_over_set(r, a), A(rel_asymmetric(r, a), rel_transitive(r, a)))
}

theorem setbuilder_pair_is_rel(pr2 f: @r11) {
	with ($A$ cls aa = setbuilder_pair(f)) {
		 |- {
			(cls z) => {
				in(z, aa) |- {
					[
						@h1 > setbuilder_e;
						(cls a, cls b) => {
							eq(z, pair(a, b)), f(a, b) |- {
								$set_ab = [@h2; @h1] > eq_in_flip > is_set_i;

								$a_in_V = $set_ab > pair_set_e1 > universe_in_i;

								$b_in_V = $set_ab > pair_set_e2 > universe_in_i;

								[
									@h2;
									[$a_in_V; $b_in_V] > cartesian_in_i
								] > eq_in
							} > cp2
						} > Ui2
					] > mpX2_alt(?, in(z, cartesian(universe, universe)))
				} > cp
			} > Ui as is_rel(aa)
		}
	}
}

"이항관계를 위한 U.

[$R]이 이항관계일 때 임의의 [$.(a, b)\in R]에 대해 [$f(a, b)]이면, 임의의 [$x\in R]에 대해 [$fx]이다."
theorem rel_U(pr f: @r2, $R$ cls r: @11) {
	is_rel(r), U2((cls x, cls y) => I(in(pair(x, y), r), f(pair(x, y)))) |- {
		(cls z) => {
			in(z, r) |- {
				[
					[@h3; @h1] > in_subseteq > setbuilder_e > X2Ae1((cls x, cls y) => eq(z, pair(x, y)), (cls x, cls y) => A(in(x, universe), in(y, universe)));
					(cls x, cls y) => {
						eq(z, pair(x, y)) |- {
							[
								@h4;
								[
									[@h4; @h3] > eq_in_flip;
									@h2 > Ue2(?, x, y)
								] > mp
							] > ax_indiscernible_m2(f, ?, ?)
						} > cp
					} > Ui2
				] > mpX2_alt(?, f(z))
			} > cp
		} > Ui as Uin(r, f)
	}
}

theorem rel_eq_i($R_1$ cls r1: @11, $R_2$ cls r2: @21) {
	is_rel(r1), is_rel(r2),
	U2((cls x, cls y) => E(in(pair(x, y), r1), in(pair(x, y), r2))) |- {
		$Ee1 = @h3 > Ee1U2((cls x, cls y) => in(pair(x, y), r1), (cls x, cls y) => in(pair(x, y), r2)) as U2((cls x, cls y) => I(in(pair(x, y), r1), in(pair(x, y), r2)));

		$Ee2 = @h3 > Ee2U2((cls x, cls y) => in(pair(x, y), r1), (cls x, cls y) => in(pair(x, y), r2)) as U2((cls x, cls y) => I(in(pair(x, y), r2), in(pair(x, y), r1)));

		[
			[@h1; $Ee1] > rel_U(is_in(r2), ?) as subseteq(r1, r2);
			[@h2; $Ee2] > rel_U(is_in(r1), ?) as subseteq(r2, r1)
		] > subseteq_to_eq
	}
}

"곱집합은 이항관계이다."
theorem cartesian_is_rel(cls x, cls y) {
	(cls z) => {
		in(z, cartesian(x, y)) |- {
			[
				@h1 > is_set_i;
				[
					@h1 > setbuilder_e;
					(cls a, cls b) => {
						eq(z, pair(a, b)), A(in(a, x), in(b, y)) |- {
							[
								@h2;
								[
									@h3 > Ae1 > is_set_i > universe_in_i;
									@h3 > Ae2 > is_set_i > universe_in_i
								] > Ai
							] > Ai
						} > cp2
					} > Ui2
				] > mpX2(?, (cls a, cls b) => A(eq(z, pair(a, b)), A(in(a, universe), in(b, universe))))
			] > setbuilder_i as in(z, cartesian(universe, universe))
		} > cp
	} > Ui as is_rel(cartesian(x, y))
}

theorem cartesian_inverse($A$ cls a, $B$ cls b) {
	$foo = ($A$ cls a, $B$ cls b, cls x, cls y) => {
		in(pair(x, y), cartesian(a, b)) |- {
			[
				@h1 > cartesian_in_e > Ae2;
				@h1 > cartesian_in_e > Ae1
			] > cartesian_in_i
		} > cp
	};

	[
		cartesian_is_rel(b, a);
		cartesian_is_rel(a, b) > rel_inverse_is_rel as is_rel(rel_inverse(cartesian(a, b)));
		(cls x, cls y) => {
			[
				[$foo(b, a, x, y); $foo(a, b, y, x)] > Ei;
				rel_inverse_in(cartesian(a, b), y, x)
			] > syllE
		} > Ui2
	] > rel_eq_i > eq_symmetric
}

theorem rel_subset_is_rel(cls x: @11, cls y: @12) {
	subseteq(x, y), is_rel(y) |- {
		[@h1; @h2] > subseteq_subseteq as is_rel(x)
	}
}

"`[Pinter]` 정리 1.51. 곱집합은 집합이다."
theorem cartesian_is_set($A$ cls a: @11, $B$ cls b: @21) using pair {
	is_set(a), is_set(b) |- {
		$power_power_cup_is_set = [@h1; @h2] > cup_is_set > power_is_set > power_is_set;

		$cartesian_subseteq_power_power_cup = [
			cartesian_is_rel(a, b);
			(cls x, cls y) => {
				in(pair(x, y), cartesian(a, b)) |- {
					$set_pair_xy = @h3 > is_set_i;

					$set_x = $set_pair_xy > pair_set_e1;

					$set_y = $set_pair_xy > pair_set_e2;

					$x_in_cup_ab = @h3 > cartesian_in_e1 > cup_i1(?, b, ?);

					$y_in_cup_ab = @h3 > cartesian_in_e2 > cup_i2(a, ?, ?);

					$1 = [
						$set_x > singleton_set_i(x);
						(cls z) => {
							in(z, singleton(x)) |- {
								[
									[$set_x; @h4] > singleton_e;
									$x_in_cup_ab
								] > eq_in
							} > cp
						} > Ui as subseteq(singleton(x), cup(a, b))
					] > setbuilder_i as in(singleton(x), power(cup(a, b)));

					$2 = [
						[$set_x; $set_y] > doubleton_set_i;
						(cls z) => {
							in(z, doubleton(x, y)) |- {
								[
									[$set_x; $set_y; @h4] > doubleton_e;
									eq(z, x) |- {
										[@h5; $x_in_cup_ab] > eq_in
									};
									eq(z, y) |- {
										[@h5; $y_in_cup_ab] > eq_in
									}
								] > Oe_alt
							} > cp
						} > Ui as subseteq(doubleton(x, y), cup(a, b))
					] > setbuilder_i as in(doubleton(x, y), power(cup(a, b)));

					[
						[$set_x; $set_y] > pair_set_i;
						(cls z) => {
							in(z, doubleton(singleton(x), doubleton(x, y))) |- {
								[
									[
										$set_x > singleton_set_i;
										[$set_x; $set_y] > doubleton_set_i;
										@h4
									] > doubleton_e;
									eq(z, singleton(x)) |- {
										[@h5; $1] > eq_in
									};
									eq(z, doubleton(x, y)) |- {
										[@h5; $2] > eq_in
									}
								] > Oe_alt
							} > cp
						} > Ui as subseteq(pair(x, y), power(cup(a, b)))
					] > setbuilder_i as in(pair(x, y), power(power(cup(a, b))))
				} > cp
			} > Ui2
		] > rel_U(is_in(power(power(cup(a, b)))), cartesian(a, b)) as subseteq(cartesian(a, b), power(power(cup(a, b))));

		[$power_power_cup_is_set; $cartesian_subseteq_power_power_cup] > subset_is_set
	}
}

schema rel_composite_associative(cls x, cls y, cls z) {
	is_rel(x), is_rel(y), is_rel(z) |- eq(rel_composite(rel_composite(x, y), z), rel_composite(x, rel_composite(y, z)))
}

theorem rel_inverse_subseteq($A$ cls a: @21, $B$ cls b: @22) {
	is_rel(a), subseteq(a, b) |- {
		[
			@h1 > rel_inverse_is_rel as is_rel(rel_inverse(a));
			(cls x, cls y) => {
				in(pair(x, y), rel_inverse(a)) |- {
					[
						@h3 > rel_inverse_in_e;
						@h2
					] > in_subseteq > rel_inverse_in_i
				} > cp
			} > Ui2
		] > rel_U(is_in(rel_inverse(b)), ?) as subseteq(rel_inverse(a), rel_inverse(b))
	}
}